
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006cdc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00406cdc  00406cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  00406ce4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000488  204009d0  004076b4  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400e58  00407b3c  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402e58  00409b3c  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   000277bf  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005531  00000000  00000000  00048216  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000bb36  00000000  00000000  0004d747  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001148  00000000  00000000  0005927d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012c8  00000000  00000000  0005a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000269d9  00000000  00000000  0005b68d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017e2f  00000000  00000000  00082066  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000967e1  00000000  00000000  00099e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000036c4  00000000  00000000  00130678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 2e 40 20 95 11 40 00 93 11 40 00 93 11 40 00     X.@ ..@...@...@.
  400010:	93 11 40 00 93 11 40 00 93 11 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	6d 15 40 00 93 11 40 00 00 00 00 00 0d 16 40 00     m.@...@.......@.
  40003c:	75 16 40 00 93 11 40 00 93 11 40 00 93 11 40 00     u.@...@...@...@.
  40004c:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  40005c:	93 11 40 00 93 11 40 00 00 00 00 00 85 0e 40 00     ..@...@.......@.
  40006c:	99 0e 40 00 ad 0e 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  40007c:	93 11 40 00 c1 0e 40 00 d5 0e 40 00 93 11 40 00     ..@...@...@...@.
  40008c:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  40009c:	2d 34 40 00 93 11 40 00 93 11 40 00 93 11 40 00     -4@...@...@...@.
  4000ac:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000bc:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000cc:	93 11 40 00 00 00 00 00 93 11 40 00 00 00 00 00     ..@.......@.....
  4000dc:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000ec:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000fc:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  40010c:	93 11 40 00 93 11 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 93 11 40 00 93 11 40 00 93 11 40 00     ......@...@...@.
  40012c:	93 11 40 00 93 11 40 00 00 00 00 00 93 11 40 00     ..@...@.......@.
  40013c:	93 11 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	00406ce4 	.word	0x00406ce4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406ce4 	.word	0x00406ce4
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	00406ce4 	.word	0x00406ce4
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001ac:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001ae:	4b07      	ldr	r3, [pc, #28]	; (4001cc <spi_enable_clock+0x20>)
  4001b0:	4298      	cmp	r0, r3
  4001b2:	d003      	beq.n	4001bc <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4001b4:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <spi_enable_clock+0x24>)
  4001b6:	4298      	cmp	r0, r3
  4001b8:	d004      	beq.n	4001c4 <spi_enable_clock+0x18>
  4001ba:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001bc:	2015      	movs	r0, #21
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <spi_enable_clock+0x28>)
  4001c0:	4798      	blx	r3
  4001c2:	bd08      	pop	{r3, pc}
  4001c4:	202a      	movs	r0, #42	; 0x2a
  4001c6:	4b03      	ldr	r3, [pc, #12]	; (4001d4 <spi_enable_clock+0x28>)
  4001c8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4001ca:	e7f6      	b.n	4001ba <spi_enable_clock+0xe>
  4001cc:	40008000 	.word	0x40008000
  4001d0:	40058000 	.word	0x40058000
  4001d4:	00401009 	.word	0x00401009

004001d8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4001d8:	6843      	ldr	r3, [r0, #4]
  4001da:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4001de:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4001e0:	6843      	ldr	r3, [r0, #4]
  4001e2:	0409      	lsls	r1, r1, #16
  4001e4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4001e8:	4319      	orrs	r1, r3
  4001ea:	6041      	str	r1, [r0, #4]
  4001ec:	4770      	bx	lr

004001ee <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4001ee:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4001f0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4001f4:	6905      	ldr	r5, [r0, #16]
  4001f6:	f015 0f02 	tst.w	r5, #2
  4001fa:	d103      	bne.n	400204 <spi_write+0x16>
		if (!timeout--) {
  4001fc:	3c01      	subs	r4, #1
  4001fe:	d1f9      	bne.n	4001f4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400200:	2001      	movs	r0, #1
  400202:	e00c      	b.n	40021e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400204:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400206:	f014 0f02 	tst.w	r4, #2
  40020a:	d006      	beq.n	40021a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40020c:	0412      	lsls	r2, r2, #16
  40020e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400212:	4311      	orrs	r1, r2
		if (uc_last) {
  400214:	b10b      	cbz	r3, 40021a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400216:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40021a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40021c:	2000      	movs	r0, #0
}
  40021e:	bc30      	pop	{r4, r5}
  400220:	4770      	bx	lr

00400222 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400222:	b932      	cbnz	r2, 400232 <spi_set_clock_polarity+0x10>
  400224:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400228:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40022a:	f023 0301 	bic.w	r3, r3, #1
  40022e:	6303      	str	r3, [r0, #48]	; 0x30
  400230:	4770      	bx	lr
  400232:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400236:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400238:	f043 0301 	orr.w	r3, r3, #1
  40023c:	6303      	str	r3, [r0, #48]	; 0x30
  40023e:	4770      	bx	lr

00400240 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400240:	b932      	cbnz	r2, 400250 <spi_set_clock_phase+0x10>
  400242:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400246:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400248:	f023 0302 	bic.w	r3, r3, #2
  40024c:	6303      	str	r3, [r0, #48]	; 0x30
  40024e:	4770      	bx	lr
  400250:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400254:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400256:	f043 0302 	orr.w	r3, r3, #2
  40025a:	6303      	str	r3, [r0, #48]	; 0x30
  40025c:	4770      	bx	lr

0040025e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40025e:	2a04      	cmp	r2, #4
  400260:	d003      	beq.n	40026a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400262:	b16a      	cbz	r2, 400280 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400264:	2a08      	cmp	r2, #8
  400266:	d016      	beq.n	400296 <spi_configure_cs_behavior+0x38>
  400268:	4770      	bx	lr
  40026a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40026e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400270:	f023 0308 	bic.w	r3, r3, #8
  400274:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400276:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400278:	f043 0304 	orr.w	r3, r3, #4
  40027c:	6303      	str	r3, [r0, #48]	; 0x30
  40027e:	4770      	bx	lr
  400280:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400284:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400286:	f023 0308 	bic.w	r3, r3, #8
  40028a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40028c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40028e:	f023 0304 	bic.w	r3, r3, #4
  400292:	6303      	str	r3, [r0, #48]	; 0x30
  400294:	4770      	bx	lr
  400296:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40029a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40029c:	f043 0308 	orr.w	r3, r3, #8
  4002a0:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4002a2:	e7e1      	b.n	400268 <spi_configure_cs_behavior+0xa>

004002a4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4002a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4002ae:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4002b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002b2:	431a      	orrs	r2, r3
  4002b4:	630a      	str	r2, [r1, #48]	; 0x30
  4002b6:	4770      	bx	lr

004002b8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4002b8:	1e43      	subs	r3, r0, #1
  4002ba:	4419      	add	r1, r3
  4002bc:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4002c0:	1e43      	subs	r3, r0, #1
  4002c2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4002c4:	bf94      	ite	ls
  4002c6:	b200      	sxthls	r0, r0
		return -1;
  4002c8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4002cc:	4770      	bx	lr

004002ce <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4002ce:	b17a      	cbz	r2, 4002f0 <spi_set_baudrate_div+0x22>
{
  4002d0:	b410      	push	{r4}
  4002d2:	4614      	mov	r4, r2
  4002d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4002d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4002de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4002e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4002e2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4002e6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4002e8:	2000      	movs	r0, #0
}
  4002ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002ee:	4770      	bx	lr
        return -1;
  4002f0:	f04f 30ff 	mov.w	r0, #4294967295
  4002f4:	4770      	bx	lr

004002f6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4002f6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4002f8:	0189      	lsls	r1, r1, #6
  4002fa:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4002fc:	2402      	movs	r4, #2
  4002fe:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400300:	f04f 31ff 	mov.w	r1, #4294967295
  400304:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400306:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400308:	605a      	str	r2, [r3, #4]
}
  40030a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40030e:	4770      	bx	lr

00400310 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400310:	0189      	lsls	r1, r1, #6
  400312:	2305      	movs	r3, #5
  400314:	5043      	str	r3, [r0, r1]
  400316:	4770      	bx	lr

00400318 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400318:	0189      	lsls	r1, r1, #6
  40031a:	2302      	movs	r3, #2
  40031c:	5043      	str	r3, [r0, r1]
  40031e:	4770      	bx	lr

00400320 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400320:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400324:	61ca      	str	r2, [r1, #28]
  400326:	4770      	bx	lr

00400328 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400328:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40032c:	624a      	str	r2, [r1, #36]	; 0x24
  40032e:	4770      	bx	lr

00400330 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400330:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400334:	6a08      	ldr	r0, [r1, #32]
}
  400336:	4770      	bx	lr

00400338 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400338:	b4f0      	push	{r4, r5, r6, r7}
  40033a:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40033c:	2402      	movs	r4, #2
  40033e:	9401      	str	r4, [sp, #4]
  400340:	2408      	movs	r4, #8
  400342:	9402      	str	r4, [sp, #8]
  400344:	2420      	movs	r4, #32
  400346:	9403      	str	r4, [sp, #12]
  400348:	2480      	movs	r4, #128	; 0x80
  40034a:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40034c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40034e:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400350:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400352:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400356:	d814      	bhi.n	400382 <tc_find_mck_divisor+0x4a>
  400358:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40035a:	42a0      	cmp	r0, r4
  40035c:	d217      	bcs.n	40038e <tc_find_mck_divisor+0x56>
  40035e:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400360:	af01      	add	r7, sp, #4
  400362:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400366:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40036a:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40036c:	4284      	cmp	r4, r0
  40036e:	d30a      	bcc.n	400386 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400370:	4286      	cmp	r6, r0
  400372:	d90d      	bls.n	400390 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400374:	3501      	adds	r5, #1
	for (ul_index = 0;
  400376:	2d05      	cmp	r5, #5
  400378:	d1f3      	bne.n	400362 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40037a:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40037c:	b006      	add	sp, #24
  40037e:	bcf0      	pop	{r4, r5, r6, r7}
  400380:	4770      	bx	lr
			return 0;
  400382:	2000      	movs	r0, #0
  400384:	e7fa      	b.n	40037c <tc_find_mck_divisor+0x44>
  400386:	2000      	movs	r0, #0
  400388:	e7f8      	b.n	40037c <tc_find_mck_divisor+0x44>
	return 1;
  40038a:	2001      	movs	r0, #1
  40038c:	e7f6      	b.n	40037c <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40038e:	2500      	movs	r5, #0
	if (p_uldiv) {
  400390:	b12a      	cbz	r2, 40039e <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400392:	a906      	add	r1, sp, #24
  400394:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400398:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40039c:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40039e:	2b00      	cmp	r3, #0
  4003a0:	d0f3      	beq.n	40038a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4003a2:	601d      	str	r5, [r3, #0]
	return 1;
  4003a4:	2001      	movs	r0, #1
  4003a6:	e7e9      	b.n	40037c <tc_find_mck_divisor+0x44>

004003a8 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4003a8:	4b01      	ldr	r3, [pc, #4]	; (4003b0 <gfx_mono_set_framebuffer+0x8>)
  4003aa:	6018      	str	r0, [r3, #0]
  4003ac:	4770      	bx	lr
  4003ae:	bf00      	nop
  4003b0:	204009ec 	.word	0x204009ec

004003b4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4003b4:	4b02      	ldr	r3, [pc, #8]	; (4003c0 <gfx_mono_framebuffer_put_byte+0xc>)
  4003b6:	681b      	ldr	r3, [r3, #0]
  4003b8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4003bc:	5442      	strb	r2, [r0, r1]
  4003be:	4770      	bx	lr
  4003c0:	204009ec 	.word	0x204009ec

004003c4 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4003c4:	4b02      	ldr	r3, [pc, #8]	; (4003d0 <gfx_mono_framebuffer_get_byte+0xc>)
  4003c6:	681b      	ldr	r3, [r3, #0]
  4003c8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4003cc:	5c40      	ldrb	r0, [r0, r1]
  4003ce:	4770      	bx	lr
  4003d0:	204009ec 	.word	0x204009ec

004003d4 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4003d8:	1884      	adds	r4, r0, r2
  4003da:	2c80      	cmp	r4, #128	; 0x80
  4003dc:	dd02      	ble.n	4003e4 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4003de:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4003e2:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4003e4:	b322      	cbz	r2, 400430 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4003e6:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4003e8:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4003ec:	2601      	movs	r6, #1
  4003ee:	fa06 f101 	lsl.w	r1, r6, r1
  4003f2:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4003f4:	2b01      	cmp	r3, #1
  4003f6:	d01d      	beq.n	400434 <gfx_mono_generic_draw_horizontal_line+0x60>
  4003f8:	2b00      	cmp	r3, #0
  4003fa:	d035      	beq.n	400468 <gfx_mono_generic_draw_horizontal_line+0x94>
  4003fc:	2b02      	cmp	r3, #2
  4003fe:	d117      	bne.n	400430 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400400:	3801      	subs	r0, #1
  400402:	b2c7      	uxtb	r7, r0
  400404:	19d4      	adds	r4, r2, r7
  400406:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400408:	f8df a090 	ldr.w	sl, [pc, #144]	; 40049c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  40040c:	f04f 0900 	mov.w	r9, #0
  400410:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4004a0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400414:	4621      	mov	r1, r4
  400416:	4628      	mov	r0, r5
  400418:	47d0      	blx	sl
			temp ^= pixelmask;
  40041a:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40041e:	464b      	mov	r3, r9
  400420:	b2d2      	uxtb	r2, r2
  400422:	4621      	mov	r1, r4
  400424:	4628      	mov	r0, r5
  400426:	47c0      	blx	r8
  400428:	3c01      	subs	r4, #1
  40042a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40042c:	42bc      	cmp	r4, r7
  40042e:	d1f1      	bne.n	400414 <gfx_mono_generic_draw_horizontal_line+0x40>
  400430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400434:	3801      	subs	r0, #1
  400436:	b2c7      	uxtb	r7, r0
  400438:	19d4      	adds	r4, r2, r7
  40043a:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  40043c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40049c <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400440:	f04f 0900 	mov.w	r9, #0
  400444:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4004a0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400448:	4621      	mov	r1, r4
  40044a:	4628      	mov	r0, r5
  40044c:	47d0      	blx	sl
			temp |= pixelmask;
  40044e:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400452:	464b      	mov	r3, r9
  400454:	b2d2      	uxtb	r2, r2
  400456:	4621      	mov	r1, r4
  400458:	4628      	mov	r0, r5
  40045a:	47c0      	blx	r8
  40045c:	3c01      	subs	r4, #1
  40045e:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400460:	42bc      	cmp	r4, r7
  400462:	d1f1      	bne.n	400448 <gfx_mono_generic_draw_horizontal_line+0x74>
  400464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400468:	3801      	subs	r0, #1
  40046a:	b2c7      	uxtb	r7, r0
  40046c:	19d4      	adds	r4, r2, r7
  40046e:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400470:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40049c <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  400474:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  400476:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4004a0 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40047a:	4621      	mov	r1, r4
  40047c:	4628      	mov	r0, r5
  40047e:	47c0      	blx	r8
			temp &= ~pixelmask;
  400480:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400484:	2300      	movs	r3, #0
  400486:	b2d2      	uxtb	r2, r2
  400488:	4621      	mov	r1, r4
  40048a:	4628      	mov	r0, r5
  40048c:	47c8      	blx	r9
  40048e:	3c01      	subs	r4, #1
  400490:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400492:	42bc      	cmp	r4, r7
  400494:	d1f1      	bne.n	40047a <gfx_mono_generic_draw_horizontal_line+0xa6>
  400496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40049a:	bf00      	nop
  40049c:	004006d5 	.word	0x004006d5
  4004a0:	004005d1 	.word	0x004005d1

004004a4 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4004a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4004a8:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4004ac:	b18b      	cbz	r3, 4004d2 <gfx_mono_generic_draw_filled_rect+0x2e>
  4004ae:	461c      	mov	r4, r3
  4004b0:	4690      	mov	r8, r2
  4004b2:	4606      	mov	r6, r0
  4004b4:	1e4d      	subs	r5, r1, #1
  4004b6:	b2ed      	uxtb	r5, r5
  4004b8:	442c      	add	r4, r5
  4004ba:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4004bc:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4004d8 <gfx_mono_generic_draw_filled_rect+0x34>
  4004c0:	463b      	mov	r3, r7
  4004c2:	4642      	mov	r2, r8
  4004c4:	4621      	mov	r1, r4
  4004c6:	4630      	mov	r0, r6
  4004c8:	47c8      	blx	r9
  4004ca:	3c01      	subs	r4, #1
  4004cc:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4004ce:	42ac      	cmp	r4, r5
  4004d0:	d1f6      	bne.n	4004c0 <gfx_mono_generic_draw_filled_rect+0x1c>
  4004d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4004d6:	bf00      	nop
  4004d8:	004003d5 	.word	0x004003d5

004004dc <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4004dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004e0:	b083      	sub	sp, #12
  4004e2:	4604      	mov	r4, r0
  4004e4:	4688      	mov	r8, r1
  4004e6:	4691      	mov	r9, r2
  4004e8:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4004ea:	7a5b      	ldrb	r3, [r3, #9]
  4004ec:	f89b 2008 	ldrb.w	r2, [fp, #8]
  4004f0:	2100      	movs	r1, #0
  4004f2:	9100      	str	r1, [sp, #0]
  4004f4:	4649      	mov	r1, r9
  4004f6:	4640      	mov	r0, r8
  4004f8:	4d21      	ldr	r5, [pc, #132]	; (400580 <gfx_mono_draw_char+0xa4>)
  4004fa:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  4004fc:	f89b 3000 	ldrb.w	r3, [fp]
  400500:	b113      	cbz	r3, 400508 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400502:	b003      	add	sp, #12
  400504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400508:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40050c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40050e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400512:	bf18      	it	ne
  400514:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400516:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  40051a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40051e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400520:	fb17 f70a 	smulbb	r7, r7, sl
  400524:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400528:	f8db 3004 	ldr.w	r3, [fp, #4]
  40052c:	fa13 f787 	uxtah	r7, r3, r7
  400530:	e01f      	b.n	400572 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400532:	0064      	lsls	r4, r4, #1
  400534:	b2e4      	uxtb	r4, r4
  400536:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400538:	b2eb      	uxtb	r3, r5
  40053a:	429e      	cmp	r6, r3
  40053c:	d910      	bls.n	400560 <gfx_mono_draw_char+0x84>
  40053e:	b2eb      	uxtb	r3, r5
  400540:	eb08 0003 	add.w	r0, r8, r3
  400544:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400546:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  40054a:	bf08      	it	eq
  40054c:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400550:	f014 0f80 	tst.w	r4, #128	; 0x80
  400554:	d0ed      	beq.n	400532 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400556:	2201      	movs	r2, #1
  400558:	4649      	mov	r1, r9
  40055a:	4b0a      	ldr	r3, [pc, #40]	; (400584 <gfx_mono_draw_char+0xa8>)
  40055c:	4798      	blx	r3
  40055e:	e7e8      	b.n	400532 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400560:	f109 0901 	add.w	r9, r9, #1
  400564:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400568:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  40056c:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400570:	d0c7      	beq.n	400502 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400572:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400576:	2e00      	cmp	r6, #0
  400578:	d0f2      	beq.n	400560 <gfx_mono_draw_char+0x84>
  40057a:	2500      	movs	r5, #0
  40057c:	462c      	mov	r4, r5
  40057e:	e7de      	b.n	40053e <gfx_mono_draw_char+0x62>
  400580:	004004a5 	.word	0x004004a5
  400584:	00400671 	.word	0x00400671

00400588 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40058c:	4604      	mov	r4, r0
  40058e:	4690      	mov	r8, r2
  400590:	461d      	mov	r5, r3
  400592:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400594:	4f0d      	ldr	r7, [pc, #52]	; (4005cc <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400596:	460e      	mov	r6, r1
  400598:	e008      	b.n	4005ac <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  40059a:	7a6a      	ldrb	r2, [r5, #9]
  40059c:	3201      	adds	r2, #1
  40059e:	4442      	add	r2, r8
  4005a0:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4005a4:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4005a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4005aa:	b16b      	cbz	r3, 4005c8 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4005ac:	7820      	ldrb	r0, [r4, #0]
  4005ae:	280a      	cmp	r0, #10
  4005b0:	d0f3      	beq.n	40059a <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4005b2:	280d      	cmp	r0, #13
  4005b4:	d0f7      	beq.n	4005a6 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4005b6:	462b      	mov	r3, r5
  4005b8:	4642      	mov	r2, r8
  4005ba:	4649      	mov	r1, r9
  4005bc:	47b8      	blx	r7
			x += font->width;
  4005be:	7a2b      	ldrb	r3, [r5, #8]
  4005c0:	4499      	add	r9, r3
  4005c2:	fa5f f989 	uxtb.w	r9, r9
  4005c6:	e7ee      	b.n	4005a6 <gfx_mono_draw_string+0x1e>
}
  4005c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4005cc:	004004dd 	.word	0x004004dd

004005d0 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4005d0:	b570      	push	{r4, r5, r6, lr}
  4005d2:	4604      	mov	r4, r0
  4005d4:	460d      	mov	r5, r1
  4005d6:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4005d8:	b91b      	cbnz	r3, 4005e2 <gfx_mono_ssd1306_put_byte+0x12>
  4005da:	4b0d      	ldr	r3, [pc, #52]	; (400610 <gfx_mono_ssd1306_put_byte+0x40>)
  4005dc:	4798      	blx	r3
  4005de:	42b0      	cmp	r0, r6
  4005e0:	d015      	beq.n	40060e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4005e2:	4632      	mov	r2, r6
  4005e4:	4629      	mov	r1, r5
  4005e6:	4620      	mov	r0, r4
  4005e8:	4b0a      	ldr	r3, [pc, #40]	; (400614 <gfx_mono_ssd1306_put_byte+0x44>)
  4005ea:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4005ec:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4005f0:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4005f4:	4c08      	ldr	r4, [pc, #32]	; (400618 <gfx_mono_ssd1306_put_byte+0x48>)
  4005f6:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4005f8:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4005fc:	f040 0010 	orr.w	r0, r0, #16
  400600:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400602:	f005 000f 	and.w	r0, r5, #15
  400606:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400608:	4630      	mov	r0, r6
  40060a:	4b04      	ldr	r3, [pc, #16]	; (40061c <gfx_mono_ssd1306_put_byte+0x4c>)
  40060c:	4798      	blx	r3
  40060e:	bd70      	pop	{r4, r5, r6, pc}
  400610:	004003c5 	.word	0x004003c5
  400614:	004003b5 	.word	0x004003b5
  400618:	004006e1 	.word	0x004006e1
  40061c:	00400901 	.word	0x00400901

00400620 <gfx_mono_ssd1306_init>:
{
  400620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400624:	480d      	ldr	r0, [pc, #52]	; (40065c <gfx_mono_ssd1306_init+0x3c>)
  400626:	4b0e      	ldr	r3, [pc, #56]	; (400660 <gfx_mono_ssd1306_init+0x40>)
  400628:	4798      	blx	r3
	ssd1306_init();
  40062a:	4b0e      	ldr	r3, [pc, #56]	; (400664 <gfx_mono_ssd1306_init+0x44>)
  40062c:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40062e:	2040      	movs	r0, #64	; 0x40
  400630:	4b0d      	ldr	r3, [pc, #52]	; (400668 <gfx_mono_ssd1306_init+0x48>)
  400632:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400634:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400636:	f04f 0801 	mov.w	r8, #1
  40063a:	462f      	mov	r7, r5
  40063c:	4e0b      	ldr	r6, [pc, #44]	; (40066c <gfx_mono_ssd1306_init+0x4c>)
{
  40063e:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400640:	4643      	mov	r3, r8
  400642:	463a      	mov	r2, r7
  400644:	b2e1      	uxtb	r1, r4
  400646:	4628      	mov	r0, r5
  400648:	47b0      	blx	r6
  40064a:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  40064c:	2c80      	cmp	r4, #128	; 0x80
  40064e:	d1f7      	bne.n	400640 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400650:	3501      	adds	r5, #1
  400652:	b2ed      	uxtb	r5, r5
  400654:	2d04      	cmp	r5, #4
  400656:	d1f2      	bne.n	40063e <gfx_mono_ssd1306_init+0x1e>
  400658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40065c:	204009f0 	.word	0x204009f0
  400660:	004003a9 	.word	0x004003a9
  400664:	00400721 	.word	0x00400721
  400668:	004006e1 	.word	0x004006e1
  40066c:	004005d1 	.word	0x004005d1

00400670 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400670:	09c3      	lsrs	r3, r0, #7
  400672:	d12a      	bne.n	4006ca <gfx_mono_ssd1306_draw_pixel+0x5a>
  400674:	291f      	cmp	r1, #31
  400676:	d828      	bhi.n	4006ca <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40067c:	4614      	mov	r4, r2
  40067e:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400680:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400682:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400686:	2201      	movs	r2, #1
  400688:	fa02 f701 	lsl.w	r7, r2, r1
  40068c:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400690:	4601      	mov	r1, r0
  400692:	4630      	mov	r0, r6
  400694:	4b0d      	ldr	r3, [pc, #52]	; (4006cc <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400696:	4798      	blx	r3
  400698:	4602      	mov	r2, r0
	switch (color) {
  40069a:	2c01      	cmp	r4, #1
  40069c:	d009      	beq.n	4006b2 <gfx_mono_ssd1306_draw_pixel+0x42>
  40069e:	b164      	cbz	r4, 4006ba <gfx_mono_ssd1306_draw_pixel+0x4a>
  4006a0:	2c02      	cmp	r4, #2
  4006a2:	d00e      	beq.n	4006c2 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4006a4:	2300      	movs	r3, #0
  4006a6:	4629      	mov	r1, r5
  4006a8:	4630      	mov	r0, r6
  4006aa:	4c09      	ldr	r4, [pc, #36]	; (4006d0 <gfx_mono_ssd1306_draw_pixel+0x60>)
  4006ac:	47a0      	blx	r4
  4006ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4006b2:	ea48 0200 	orr.w	r2, r8, r0
  4006b6:	b2d2      	uxtb	r2, r2
		break;
  4006b8:	e7f4      	b.n	4006a4 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4006ba:	ea20 0207 	bic.w	r2, r0, r7
  4006be:	b2d2      	uxtb	r2, r2
		break;
  4006c0:	e7f0      	b.n	4006a4 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4006c2:	ea88 0200 	eor.w	r2, r8, r0
  4006c6:	b2d2      	uxtb	r2, r2
		break;
  4006c8:	e7ec      	b.n	4006a4 <gfx_mono_ssd1306_draw_pixel+0x34>
  4006ca:	4770      	bx	lr
  4006cc:	004003c5 	.word	0x004003c5
  4006d0:	004005d1 	.word	0x004005d1

004006d4 <gfx_mono_ssd1306_get_byte>:
{
  4006d4:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  4006d6:	4b01      	ldr	r3, [pc, #4]	; (4006dc <gfx_mono_ssd1306_get_byte+0x8>)
  4006d8:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  4006da:	bd08      	pop	{r3, pc}
  4006dc:	004003c5 	.word	0x004003c5

004006e0 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4006e0:	b538      	push	{r3, r4, r5, lr}
  4006e2:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4006e4:	2208      	movs	r2, #8
  4006e6:	4b09      	ldr	r3, [pc, #36]	; (40070c <ssd1306_write_command+0x2c>)
  4006e8:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4006ea:	4c09      	ldr	r4, [pc, #36]	; (400710 <ssd1306_write_command+0x30>)
  4006ec:	2101      	movs	r1, #1
  4006ee:	4620      	mov	r0, r4
  4006f0:	4b08      	ldr	r3, [pc, #32]	; (400714 <ssd1306_write_command+0x34>)
  4006f2:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4006f4:	2301      	movs	r3, #1
  4006f6:	461a      	mov	r2, r3
  4006f8:	4629      	mov	r1, r5
  4006fa:	4620      	mov	r0, r4
  4006fc:	4c06      	ldr	r4, [pc, #24]	; (400718 <ssd1306_write_command+0x38>)
  4006fe:	47a0      	blx	r4
	delay_us(10);
  400700:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400704:	4b05      	ldr	r3, [pc, #20]	; (40071c <ssd1306_write_command+0x3c>)
  400706:	4798      	blx	r3
  400708:	bd38      	pop	{r3, r4, r5, pc}
  40070a:	bf00      	nop
  40070c:	400e1000 	.word	0x400e1000
  400710:	40008000 	.word	0x40008000
  400714:	004001d9 	.word	0x004001d9
  400718:	004001ef 	.word	0x004001ef
  40071c:	20400001 	.word	0x20400001

00400720 <ssd1306_init>:
{
  400720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400724:	4d66      	ldr	r5, [pc, #408]	; (4008c0 <ssd1306_init+0x1a0>)
  400726:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  40072a:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40072c:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400730:	4b64      	ldr	r3, [pc, #400]	; (4008c4 <ssd1306_init+0x1a4>)
  400732:	2708      	movs	r7, #8
  400734:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400736:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40073a:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40073c:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400740:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400742:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400744:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400748:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  40074a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40074e:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400750:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400752:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400756:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400758:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40075a:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40075e:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400760:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400762:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400766:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400768:	f022 0208 	bic.w	r2, r2, #8
  40076c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40076e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400770:	f022 0208 	bic.w	r2, r2, #8
  400774:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400776:	601f      	str	r7, [r3, #0]
  400778:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40077a:	631f      	str	r7, [r3, #48]	; 0x30
  40077c:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40077e:	f8df 817c 	ldr.w	r8, [pc, #380]	; 4008fc <ssd1306_init+0x1dc>
  400782:	2300      	movs	r3, #0
  400784:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400788:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40078c:	4640      	mov	r0, r8
  40078e:	4c4e      	ldr	r4, [pc, #312]	; (4008c8 <ssd1306_init+0x1a8>)
  400790:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400792:	2300      	movs	r3, #0
  400794:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400798:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40079c:	4640      	mov	r0, r8
  40079e:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4007a0:	2300      	movs	r3, #0
  4007a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007aa:	4640      	mov	r0, r8
  4007ac:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4007ae:	2300      	movs	r3, #0
  4007b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4007b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007b8:	4640      	mov	r0, r8
  4007ba:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4007bc:	2300      	movs	r3, #0
  4007be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007c6:	4640      	mov	r0, r8
  4007c8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4007ca:	2300      	movs	r3, #0
  4007cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007d4:	4640      	mov	r0, r8
  4007d6:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4007d8:	4c3c      	ldr	r4, [pc, #240]	; (4008cc <ssd1306_init+0x1ac>)
  4007da:	f04f 0902 	mov.w	r9, #2
  4007de:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4007e2:	f04f 0880 	mov.w	r8, #128	; 0x80
  4007e6:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4007ea:	6863      	ldr	r3, [r4, #4]
  4007ec:	f043 0301 	orr.w	r3, r3, #1
  4007f0:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4007f2:	463a      	mov	r2, r7
  4007f4:	2101      	movs	r1, #1
  4007f6:	4620      	mov	r0, r4
  4007f8:	4b35      	ldr	r3, [pc, #212]	; (4008d0 <ssd1306_init+0x1b0>)
  4007fa:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4007fc:	2200      	movs	r2, #0
  4007fe:	2101      	movs	r1, #1
  400800:	4620      	mov	r0, r4
  400802:	4b34      	ldr	r3, [pc, #208]	; (4008d4 <ssd1306_init+0x1b4>)
  400804:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400806:	2200      	movs	r2, #0
  400808:	2101      	movs	r1, #1
  40080a:	4620      	mov	r0, r4
  40080c:	4b32      	ldr	r3, [pc, #200]	; (4008d8 <ssd1306_init+0x1b8>)
  40080e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400810:	6863      	ldr	r3, [r4, #4]
  400812:	f023 0302 	bic.w	r3, r3, #2
  400816:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400818:	2200      	movs	r2, #0
  40081a:	2101      	movs	r1, #1
  40081c:	4620      	mov	r0, r4
  40081e:	4b2f      	ldr	r3, [pc, #188]	; (4008dc <ssd1306_init+0x1bc>)
  400820:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400822:	6863      	ldr	r3, [r4, #4]
  400824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400828:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40082a:	6863      	ldr	r3, [r4, #4]
  40082c:	f043 0310 	orr.w	r3, r3, #16
  400830:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400832:	492b      	ldr	r1, [pc, #172]	; (4008e0 <ssd1306_init+0x1c0>)
  400834:	482b      	ldr	r0, [pc, #172]	; (4008e4 <ssd1306_init+0x1c4>)
  400836:	4b2c      	ldr	r3, [pc, #176]	; (4008e8 <ssd1306_init+0x1c8>)
  400838:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  40083a:	b2c2      	uxtb	r2, r0
  40083c:	2101      	movs	r1, #1
  40083e:	4620      	mov	r0, r4
  400840:	4b2a      	ldr	r3, [pc, #168]	; (4008ec <ssd1306_init+0x1cc>)
  400842:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400844:	4620      	mov	r0, r4
  400846:	4b2a      	ldr	r3, [pc, #168]	; (4008f0 <ssd1306_init+0x1d0>)
  400848:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40084a:	2301      	movs	r3, #1
  40084c:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40084e:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400850:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400854:	4c27      	ldr	r4, [pc, #156]	; (4008f4 <ssd1306_init+0x1d4>)
  400856:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400858:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  40085a:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40085e:	47a0      	blx	r4
  400860:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400862:	20a8      	movs	r0, #168	; 0xa8
  400864:	4c24      	ldr	r4, [pc, #144]	; (4008f8 <ssd1306_init+0x1d8>)
  400866:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400868:	201f      	movs	r0, #31
  40086a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40086c:	20d3      	movs	r0, #211	; 0xd3
  40086e:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400870:	2000      	movs	r0, #0
  400872:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400874:	2040      	movs	r0, #64	; 0x40
  400876:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400878:	20a1      	movs	r0, #161	; 0xa1
  40087a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  40087c:	20c8      	movs	r0, #200	; 0xc8
  40087e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400880:	20da      	movs	r0, #218	; 0xda
  400882:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400884:	4648      	mov	r0, r9
  400886:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400888:	2081      	movs	r0, #129	; 0x81
  40088a:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  40088c:	208f      	movs	r0, #143	; 0x8f
  40088e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400890:	20a4      	movs	r0, #164	; 0xa4
  400892:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400894:	20a6      	movs	r0, #166	; 0xa6
  400896:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400898:	20d5      	movs	r0, #213	; 0xd5
  40089a:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  40089c:	4640      	mov	r0, r8
  40089e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4008a0:	208d      	movs	r0, #141	; 0x8d
  4008a2:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4008a4:	2014      	movs	r0, #20
  4008a6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4008a8:	20db      	movs	r0, #219	; 0xdb
  4008aa:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4008ac:	2040      	movs	r0, #64	; 0x40
  4008ae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4008b0:	20d9      	movs	r0, #217	; 0xd9
  4008b2:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4008b4:	20f1      	movs	r0, #241	; 0xf1
  4008b6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4008b8:	20af      	movs	r0, #175	; 0xaf
  4008ba:	47a0      	blx	r4
  4008bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008c0:	400e1200 	.word	0x400e1200
  4008c4:	400e1000 	.word	0x400e1000
  4008c8:	00400ce9 	.word	0x00400ce9
  4008cc:	40008000 	.word	0x40008000
  4008d0:	0040025f 	.word	0x0040025f
  4008d4:	00400223 	.word	0x00400223
  4008d8:	00400241 	.word	0x00400241
  4008dc:	004002a5 	.word	0x004002a5
  4008e0:	08f0d180 	.word	0x08f0d180
  4008e4:	001e8480 	.word	0x001e8480
  4008e8:	004002b9 	.word	0x004002b9
  4008ec:	004002cf 	.word	0x004002cf
  4008f0:	004001ad 	.word	0x004001ad
  4008f4:	20400001 	.word	0x20400001
  4008f8:	004006e1 	.word	0x004006e1
  4008fc:	400e1400 	.word	0x400e1400

00400900 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400900:	b538      	push	{r3, r4, r5, lr}
  400902:	4605      	mov	r5, r0
  400904:	2208      	movs	r2, #8
  400906:	4b09      	ldr	r3, [pc, #36]	; (40092c <ssd1306_write_data+0x2c>)
  400908:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  40090a:	4c09      	ldr	r4, [pc, #36]	; (400930 <ssd1306_write_data+0x30>)
  40090c:	2101      	movs	r1, #1
  40090e:	4620      	mov	r0, r4
  400910:	4b08      	ldr	r3, [pc, #32]	; (400934 <ssd1306_write_data+0x34>)
  400912:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400914:	2301      	movs	r3, #1
  400916:	461a      	mov	r2, r3
  400918:	4629      	mov	r1, r5
  40091a:	4620      	mov	r0, r4
  40091c:	4c06      	ldr	r4, [pc, #24]	; (400938 <ssd1306_write_data+0x38>)
  40091e:	47a0      	blx	r4
	delay_us(10);
  400920:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400924:	4b05      	ldr	r3, [pc, #20]	; (40093c <ssd1306_write_data+0x3c>)
  400926:	4798      	blx	r3
  400928:	bd38      	pop	{r3, r4, r5, pc}
  40092a:	bf00      	nop
  40092c:	400e1000 	.word	0x400e1000
  400930:	40008000 	.word	0x40008000
  400934:	004001d9 	.word	0x004001d9
  400938:	004001ef 	.word	0x004001ef
  40093c:	20400001 	.word	0x20400001

00400940 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400940:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400942:	4810      	ldr	r0, [pc, #64]	; (400984 <sysclk_init+0x44>)
  400944:	4b10      	ldr	r3, [pc, #64]	; (400988 <sysclk_init+0x48>)
  400946:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400948:	213e      	movs	r1, #62	; 0x3e
  40094a:	2000      	movs	r0, #0
  40094c:	4b0f      	ldr	r3, [pc, #60]	; (40098c <sysclk_init+0x4c>)
  40094e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400950:	4c0f      	ldr	r4, [pc, #60]	; (400990 <sysclk_init+0x50>)
  400952:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400954:	2800      	cmp	r0, #0
  400956:	d0fc      	beq.n	400952 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400958:	4b0e      	ldr	r3, [pc, #56]	; (400994 <sysclk_init+0x54>)
  40095a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40095c:	4a0e      	ldr	r2, [pc, #56]	; (400998 <sysclk_init+0x58>)
  40095e:	4b0f      	ldr	r3, [pc, #60]	; (40099c <sysclk_init+0x5c>)
  400960:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400962:	4c0f      	ldr	r4, [pc, #60]	; (4009a0 <sysclk_init+0x60>)
  400964:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400966:	2800      	cmp	r0, #0
  400968:	d0fc      	beq.n	400964 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40096a:	2002      	movs	r0, #2
  40096c:	4b0d      	ldr	r3, [pc, #52]	; (4009a4 <sysclk_init+0x64>)
  40096e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400970:	2000      	movs	r0, #0
  400972:	4b0d      	ldr	r3, [pc, #52]	; (4009a8 <sysclk_init+0x68>)
  400974:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400976:	4b0d      	ldr	r3, [pc, #52]	; (4009ac <sysclk_init+0x6c>)
  400978:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40097a:	4802      	ldr	r0, [pc, #8]	; (400984 <sysclk_init+0x44>)
  40097c:	4b02      	ldr	r3, [pc, #8]	; (400988 <sysclk_init+0x48>)
  40097e:	4798      	blx	r3
  400980:	bd10      	pop	{r4, pc}
  400982:	bf00      	nop
  400984:	11e1a300 	.word	0x11e1a300
  400988:	00401369 	.word	0x00401369
  40098c:	00400f85 	.word	0x00400f85
  400990:	00400fd9 	.word	0x00400fd9
  400994:	00400fe9 	.word	0x00400fe9
  400998:	20183f01 	.word	0x20183f01
  40099c:	400e0600 	.word	0x400e0600
  4009a0:	00400ff9 	.word	0x00400ff9
  4009a4:	00400ee9 	.word	0x00400ee9
  4009a8:	00400f21 	.word	0x00400f21
  4009ac:	0040125d 	.word	0x0040125d

004009b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4009b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4009b4:	b980      	cbnz	r0, 4009d8 <_read+0x28>
  4009b6:	460c      	mov	r4, r1
  4009b8:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4009ba:	2a00      	cmp	r2, #0
  4009bc:	dd0f      	ble.n	4009de <_read+0x2e>
  4009be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4009c0:	4e08      	ldr	r6, [pc, #32]	; (4009e4 <_read+0x34>)
  4009c2:	4d09      	ldr	r5, [pc, #36]	; (4009e8 <_read+0x38>)
  4009c4:	6830      	ldr	r0, [r6, #0]
  4009c6:	4621      	mov	r1, r4
  4009c8:	682b      	ldr	r3, [r5, #0]
  4009ca:	4798      	blx	r3
		ptr++;
  4009cc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4009ce:	42bc      	cmp	r4, r7
  4009d0:	d1f8      	bne.n	4009c4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4009d2:	4640      	mov	r0, r8
  4009d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4009d8:	f04f 38ff 	mov.w	r8, #4294967295
  4009dc:	e7f9      	b.n	4009d2 <_read+0x22>
	for (; len > 0; --len) {
  4009de:	4680      	mov	r8, r0
  4009e0:	e7f7      	b.n	4009d2 <_read+0x22>
  4009e2:	bf00      	nop
  4009e4:	20400de8 	.word	0x20400de8
  4009e8:	20400de0 	.word	0x20400de0

004009ec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4009ec:	3801      	subs	r0, #1
  4009ee:	2802      	cmp	r0, #2
  4009f0:	d815      	bhi.n	400a1e <_write+0x32>
{
  4009f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009f6:	460e      	mov	r6, r1
  4009f8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4009fa:	b19a      	cbz	r2, 400a24 <_write+0x38>
  4009fc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4009fe:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a38 <_write+0x4c>
  400a02:	4f0c      	ldr	r7, [pc, #48]	; (400a34 <_write+0x48>)
  400a04:	f8d8 0000 	ldr.w	r0, [r8]
  400a08:	f815 1b01 	ldrb.w	r1, [r5], #1
  400a0c:	683b      	ldr	r3, [r7, #0]
  400a0e:	4798      	blx	r3
  400a10:	2800      	cmp	r0, #0
  400a12:	db0a      	blt.n	400a2a <_write+0x3e>
  400a14:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400a16:	3c01      	subs	r4, #1
  400a18:	d1f4      	bne.n	400a04 <_write+0x18>
  400a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a1e:	f04f 30ff 	mov.w	r0, #4294967295
  400a22:	4770      	bx	lr
	for (; len != 0; --len) {
  400a24:	4610      	mov	r0, r2
  400a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400a2a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a32:	bf00      	nop
  400a34:	20400de4 	.word	0x20400de4
  400a38:	20400de8 	.word	0x20400de8

00400a3c <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a42:	4b5c      	ldr	r3, [pc, #368]	; (400bb4 <board_init+0x178>)
  400a44:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400a46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a4a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400a4e:	4b5a      	ldr	r3, [pc, #360]	; (400bb8 <board_init+0x17c>)
  400a50:	2200      	movs	r2, #0
  400a52:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400a56:	695a      	ldr	r2, [r3, #20]
  400a58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400a5c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400a5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a62:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400a66:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400a6a:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400a6e:	f007 0007 	and.w	r0, r7, #7
  400a72:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400a74:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400a78:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400a7c:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400a80:	f3bf 8f4f 	dsb	sy
  400a84:	f04f 34ff 	mov.w	r4, #4294967295
  400a88:	fa04 fc00 	lsl.w	ip, r4, r0
  400a8c:	fa06 f000 	lsl.w	r0, r6, r0
  400a90:	fa04 f40e 	lsl.w	r4, r4, lr
  400a94:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400a98:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400a9a:	463a      	mov	r2, r7
  400a9c:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400a9e:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400aa2:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400aa6:	3a01      	subs	r2, #1
  400aa8:	4423      	add	r3, r4
  400aaa:	f1b2 3fff 	cmp.w	r2, #4294967295
  400aae:	d1f6      	bne.n	400a9e <board_init+0x62>
        } while(sets--);
  400ab0:	3e01      	subs	r6, #1
  400ab2:	4460      	add	r0, ip
  400ab4:	f1b6 3fff 	cmp.w	r6, #4294967295
  400ab8:	d1ef      	bne.n	400a9a <board_init+0x5e>
  400aba:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400abe:	4b3e      	ldr	r3, [pc, #248]	; (400bb8 <board_init+0x17c>)
  400ac0:	695a      	ldr	r2, [r3, #20]
  400ac2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400ac6:	615a      	str	r2, [r3, #20]
  400ac8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400acc:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400ad0:	4a3a      	ldr	r2, [pc, #232]	; (400bbc <board_init+0x180>)
  400ad2:	493b      	ldr	r1, [pc, #236]	; (400bc0 <board_init+0x184>)
  400ad4:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400ad6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400ada:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400adc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ae0:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400ae4:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400ae8:	f022 0201 	bic.w	r2, r2, #1
  400aec:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400af0:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400af4:	f022 0201 	bic.w	r2, r2, #1
  400af8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400afc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b00:	f3bf 8f6f 	isb	sy
  400b04:	200a      	movs	r0, #10
  400b06:	4c2f      	ldr	r4, [pc, #188]	; (400bc4 <board_init+0x188>)
  400b08:	47a0      	blx	r4
  400b0a:	200b      	movs	r0, #11
  400b0c:	47a0      	blx	r4
  400b0e:	200c      	movs	r0, #12
  400b10:	47a0      	blx	r4
  400b12:	2010      	movs	r0, #16
  400b14:	47a0      	blx	r4
  400b16:	2011      	movs	r0, #17
  400b18:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b1a:	4b2b      	ldr	r3, [pc, #172]	; (400bc8 <board_init+0x18c>)
  400b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b20:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b22:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b26:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b28:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400b30:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b36:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b3c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400b3e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400b44:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400b46:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400b4a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b4c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400b4e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400b52:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400b54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400b58:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400b5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400b60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400b64:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b6a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b6c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b72:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400b74:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400b78:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b7a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400b7c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400b80:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b82:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400b84:	4a11      	ldr	r2, [pc, #68]	; (400bcc <board_init+0x190>)
  400b86:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400b8a:	f043 0310 	orr.w	r3, r3, #16
  400b8e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b92:	4b0f      	ldr	r3, [pc, #60]	; (400bd0 <board_init+0x194>)
  400b94:	2210      	movs	r2, #16
  400b96:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b9c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b9e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400ba4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400ba6:	4311      	orrs	r1, r2
  400ba8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400baa:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400bac:	4311      	orrs	r1, r2
  400bae:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400bb0:	605a      	str	r2, [r3, #4]
  400bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bb4:	400e1850 	.word	0x400e1850
  400bb8:	e000ed00 	.word	0xe000ed00
  400bbc:	400e0c00 	.word	0x400e0c00
  400bc0:	5a00080c 	.word	0x5a00080c
  400bc4:	00401009 	.word	0x00401009
  400bc8:	400e1200 	.word	0x400e1200
  400bcc:	40088000 	.word	0x40088000
  400bd0:	400e1000 	.word	0x400e1000

00400bd4 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400bd4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400bd8:	0053      	lsls	r3, r2, #1
  400bda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bde:	fbb2 f2f3 	udiv	r2, r2, r3
  400be2:	3a01      	subs	r2, #1
  400be4:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400be8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400bec:	4770      	bx	lr

00400bee <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400bee:	6301      	str	r1, [r0, #48]	; 0x30
  400bf0:	4770      	bx	lr

00400bf2 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400bf2:	6341      	str	r1, [r0, #52]	; 0x34
  400bf4:	4770      	bx	lr

00400bf6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400bf6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400bf8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400bfc:	d03a      	beq.n	400c74 <pio_set_peripheral+0x7e>
  400bfe:	d813      	bhi.n	400c28 <pio_set_peripheral+0x32>
  400c00:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c04:	d025      	beq.n	400c52 <pio_set_peripheral+0x5c>
  400c06:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c0a:	d10a      	bne.n	400c22 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c0c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c0e:	4313      	orrs	r3, r2
  400c10:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c12:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c14:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c16:	400b      	ands	r3, r1
  400c18:	ea23 0302 	bic.w	r3, r3, r2
  400c1c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c1e:	6042      	str	r2, [r0, #4]
  400c20:	4770      	bx	lr
	switch (ul_type) {
  400c22:	2900      	cmp	r1, #0
  400c24:	d1fb      	bne.n	400c1e <pio_set_peripheral+0x28>
  400c26:	4770      	bx	lr
  400c28:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c2c:	d021      	beq.n	400c72 <pio_set_peripheral+0x7c>
  400c2e:	d809      	bhi.n	400c44 <pio_set_peripheral+0x4e>
  400c30:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c34:	d1f3      	bne.n	400c1e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c36:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c38:	4313      	orrs	r3, r2
  400c3a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c3c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c3e:	4313      	orrs	r3, r2
  400c40:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c42:	e7ec      	b.n	400c1e <pio_set_peripheral+0x28>
	switch (ul_type) {
  400c44:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c48:	d013      	beq.n	400c72 <pio_set_peripheral+0x7c>
  400c4a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c4e:	d010      	beq.n	400c72 <pio_set_peripheral+0x7c>
  400c50:	e7e5      	b.n	400c1e <pio_set_peripheral+0x28>
{
  400c52:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c54:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c56:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400c58:	43d3      	mvns	r3, r2
  400c5a:	4021      	ands	r1, r4
  400c5c:	461c      	mov	r4, r3
  400c5e:	4019      	ands	r1, r3
  400c60:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c62:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c64:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c66:	400b      	ands	r3, r1
  400c68:	4023      	ands	r3, r4
  400c6a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400c6c:	6042      	str	r2, [r0, #4]
}
  400c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c72:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c74:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c76:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c78:	400b      	ands	r3, r1
  400c7a:	ea23 0302 	bic.w	r3, r3, r2
  400c7e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c80:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c82:	4313      	orrs	r3, r2
  400c84:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c86:	e7ca      	b.n	400c1e <pio_set_peripheral+0x28>

00400c88 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c88:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c8a:	f012 0f01 	tst.w	r2, #1
  400c8e:	d10d      	bne.n	400cac <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400c90:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400c92:	f012 0f0a 	tst.w	r2, #10
  400c96:	d00b      	beq.n	400cb0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400c98:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400c9a:	f012 0f02 	tst.w	r2, #2
  400c9e:	d109      	bne.n	400cb4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400ca0:	f012 0f08 	tst.w	r2, #8
  400ca4:	d008      	beq.n	400cb8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400ca6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400caa:	e005      	b.n	400cb8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400cac:	6641      	str	r1, [r0, #100]	; 0x64
  400cae:	e7f0      	b.n	400c92 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400cb0:	6241      	str	r1, [r0, #36]	; 0x24
  400cb2:	e7f2      	b.n	400c9a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400cb4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400cb8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400cba:	6001      	str	r1, [r0, #0]
  400cbc:	4770      	bx	lr

00400cbe <pio_set_output>:
{
  400cbe:	b410      	push	{r4}
  400cc0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400cc2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400cc4:	b94c      	cbnz	r4, 400cda <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400cc6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400cc8:	b14b      	cbz	r3, 400cde <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400cca:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400ccc:	b94a      	cbnz	r2, 400ce2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400cce:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400cd0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400cd2:	6001      	str	r1, [r0, #0]
}
  400cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cd8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400cda:	6641      	str	r1, [r0, #100]	; 0x64
  400cdc:	e7f4      	b.n	400cc8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400cde:	6541      	str	r1, [r0, #84]	; 0x54
  400ce0:	e7f4      	b.n	400ccc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400ce2:	6301      	str	r1, [r0, #48]	; 0x30
  400ce4:	e7f4      	b.n	400cd0 <pio_set_output+0x12>
	...

00400ce8 <pio_configure>:
{
  400ce8:	b570      	push	{r4, r5, r6, lr}
  400cea:	b082      	sub	sp, #8
  400cec:	4605      	mov	r5, r0
  400cee:	4616      	mov	r6, r2
  400cf0:	461c      	mov	r4, r3
	switch (ul_type) {
  400cf2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400cf6:	d014      	beq.n	400d22 <pio_configure+0x3a>
  400cf8:	d90a      	bls.n	400d10 <pio_configure+0x28>
  400cfa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400cfe:	d024      	beq.n	400d4a <pio_configure+0x62>
  400d00:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d04:	d021      	beq.n	400d4a <pio_configure+0x62>
  400d06:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d0a:	d017      	beq.n	400d3c <pio_configure+0x54>
		return 0;
  400d0c:	2000      	movs	r0, #0
  400d0e:	e01a      	b.n	400d46 <pio_configure+0x5e>
	switch (ul_type) {
  400d10:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d14:	d005      	beq.n	400d22 <pio_configure+0x3a>
  400d16:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d1a:	d002      	beq.n	400d22 <pio_configure+0x3a>
  400d1c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d20:	d1f4      	bne.n	400d0c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400d22:	4632      	mov	r2, r6
  400d24:	4628      	mov	r0, r5
  400d26:	4b11      	ldr	r3, [pc, #68]	; (400d6c <pio_configure+0x84>)
  400d28:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d2a:	f014 0f01 	tst.w	r4, #1
  400d2e:	d102      	bne.n	400d36 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400d30:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400d32:	2001      	movs	r0, #1
  400d34:	e007      	b.n	400d46 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400d36:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400d38:	2001      	movs	r0, #1
  400d3a:	e004      	b.n	400d46 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400d3c:	461a      	mov	r2, r3
  400d3e:	4631      	mov	r1, r6
  400d40:	4b0b      	ldr	r3, [pc, #44]	; (400d70 <pio_configure+0x88>)
  400d42:	4798      	blx	r3
	return 1;
  400d44:	2001      	movs	r0, #1
}
  400d46:	b002      	add	sp, #8
  400d48:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400d4a:	f004 0301 	and.w	r3, r4, #1
  400d4e:	9300      	str	r3, [sp, #0]
  400d50:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400d54:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d58:	bf14      	ite	ne
  400d5a:	2200      	movne	r2, #0
  400d5c:	2201      	moveq	r2, #1
  400d5e:	4631      	mov	r1, r6
  400d60:	4628      	mov	r0, r5
  400d62:	4c04      	ldr	r4, [pc, #16]	; (400d74 <pio_configure+0x8c>)
  400d64:	47a0      	blx	r4
	return 1;
  400d66:	2001      	movs	r0, #1
		break;
  400d68:	e7ed      	b.n	400d46 <pio_configure+0x5e>
  400d6a:	bf00      	nop
  400d6c:	00400bf7 	.word	0x00400bf7
  400d70:	00400c89 	.word	0x00400c89
  400d74:	00400cbf 	.word	0x00400cbf

00400d78 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400d78:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400d7a:	420b      	tst	r3, r1
}
  400d7c:	bf14      	ite	ne
  400d7e:	2001      	movne	r0, #1
  400d80:	2000      	moveq	r0, #0
  400d82:	4770      	bx	lr

00400d84 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400d84:	f012 0f10 	tst.w	r2, #16
  400d88:	d012      	beq.n	400db0 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400d8a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400d8e:	f012 0f20 	tst.w	r2, #32
  400d92:	d007      	beq.n	400da4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400d94:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400d98:	f012 0f40 	tst.w	r2, #64	; 0x40
  400d9c:	d005      	beq.n	400daa <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400d9e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400da2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400da4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400da8:	e7f6      	b.n	400d98 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400daa:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400dae:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400db0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400db4:	4770      	bx	lr

00400db6 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400db6:	6401      	str	r1, [r0, #64]	; 0x40
  400db8:	4770      	bx	lr

00400dba <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400dba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400dbc:	4770      	bx	lr

00400dbe <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400dbe:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400dc0:	4770      	bx	lr
	...

00400dc4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dc8:	4604      	mov	r4, r0
  400dca:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400dcc:	4b0e      	ldr	r3, [pc, #56]	; (400e08 <pio_handler_process+0x44>)
  400dce:	4798      	blx	r3
  400dd0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400dd2:	4620      	mov	r0, r4
  400dd4:	4b0d      	ldr	r3, [pc, #52]	; (400e0c <pio_handler_process+0x48>)
  400dd6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400dd8:	4005      	ands	r5, r0
  400dda:	d013      	beq.n	400e04 <pio_handler_process+0x40>
  400ddc:	4c0c      	ldr	r4, [pc, #48]	; (400e10 <pio_handler_process+0x4c>)
  400dde:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400de2:	e003      	b.n	400dec <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400de4:	42b4      	cmp	r4, r6
  400de6:	d00d      	beq.n	400e04 <pio_handler_process+0x40>
  400de8:	3410      	adds	r4, #16
		while (status != 0) {
  400dea:	b15d      	cbz	r5, 400e04 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400dec:	6820      	ldr	r0, [r4, #0]
  400dee:	4540      	cmp	r0, r8
  400df0:	d1f8      	bne.n	400de4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400df2:	6861      	ldr	r1, [r4, #4]
  400df4:	4229      	tst	r1, r5
  400df6:	d0f5      	beq.n	400de4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400df8:	68e3      	ldr	r3, [r4, #12]
  400dfa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400dfc:	6863      	ldr	r3, [r4, #4]
  400dfe:	ea25 0503 	bic.w	r5, r5, r3
  400e02:	e7ef      	b.n	400de4 <pio_handler_process+0x20>
  400e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e08:	00400dbb 	.word	0x00400dbb
  400e0c:	00400dbf 	.word	0x00400dbf
  400e10:	20400bf0 	.word	0x20400bf0

00400e14 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400e16:	4c18      	ldr	r4, [pc, #96]	; (400e78 <pio_handler_set+0x64>)
  400e18:	6826      	ldr	r6, [r4, #0]
  400e1a:	2e06      	cmp	r6, #6
  400e1c:	d82a      	bhi.n	400e74 <pio_handler_set+0x60>
  400e1e:	f04f 0c00 	mov.w	ip, #0
  400e22:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e24:	4f15      	ldr	r7, [pc, #84]	; (400e7c <pio_handler_set+0x68>)
  400e26:	e004      	b.n	400e32 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e28:	3401      	adds	r4, #1
  400e2a:	b2e4      	uxtb	r4, r4
  400e2c:	46a4      	mov	ip, r4
  400e2e:	42a6      	cmp	r6, r4
  400e30:	d309      	bcc.n	400e46 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400e32:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e34:	0125      	lsls	r5, r4, #4
  400e36:	597d      	ldr	r5, [r7, r5]
  400e38:	428d      	cmp	r5, r1
  400e3a:	d1f5      	bne.n	400e28 <pio_handler_set+0x14>
  400e3c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400e40:	686d      	ldr	r5, [r5, #4]
  400e42:	4295      	cmp	r5, r2
  400e44:	d1f0      	bne.n	400e28 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e46:	4d0d      	ldr	r5, [pc, #52]	; (400e7c <pio_handler_set+0x68>)
  400e48:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400e4c:	eb05 040e 	add.w	r4, r5, lr
  400e50:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400e54:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400e56:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400e58:	9906      	ldr	r1, [sp, #24]
  400e5a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e5c:	3601      	adds	r6, #1
  400e5e:	4566      	cmp	r6, ip
  400e60:	d005      	beq.n	400e6e <pio_handler_set+0x5a>
  400e62:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e64:	461a      	mov	r2, r3
  400e66:	4b06      	ldr	r3, [pc, #24]	; (400e80 <pio_handler_set+0x6c>)
  400e68:	4798      	blx	r3

	return 0;
  400e6a:	2000      	movs	r0, #0
  400e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400e6e:	4902      	ldr	r1, [pc, #8]	; (400e78 <pio_handler_set+0x64>)
  400e70:	600e      	str	r6, [r1, #0]
  400e72:	e7f6      	b.n	400e62 <pio_handler_set+0x4e>
		return 1;
  400e74:	2001      	movs	r0, #1
}
  400e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e78:	20400c60 	.word	0x20400c60
  400e7c:	20400bf0 	.word	0x20400bf0
  400e80:	00400d85 	.word	0x00400d85

00400e84 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e84:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e86:	210a      	movs	r1, #10
  400e88:	4801      	ldr	r0, [pc, #4]	; (400e90 <PIOA_Handler+0xc>)
  400e8a:	4b02      	ldr	r3, [pc, #8]	; (400e94 <PIOA_Handler+0x10>)
  400e8c:	4798      	blx	r3
  400e8e:	bd08      	pop	{r3, pc}
  400e90:	400e0e00 	.word	0x400e0e00
  400e94:	00400dc5 	.word	0x00400dc5

00400e98 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e98:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e9a:	210b      	movs	r1, #11
  400e9c:	4801      	ldr	r0, [pc, #4]	; (400ea4 <PIOB_Handler+0xc>)
  400e9e:	4b02      	ldr	r3, [pc, #8]	; (400ea8 <PIOB_Handler+0x10>)
  400ea0:	4798      	blx	r3
  400ea2:	bd08      	pop	{r3, pc}
  400ea4:	400e1000 	.word	0x400e1000
  400ea8:	00400dc5 	.word	0x00400dc5

00400eac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400eac:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400eae:	210c      	movs	r1, #12
  400eb0:	4801      	ldr	r0, [pc, #4]	; (400eb8 <PIOC_Handler+0xc>)
  400eb2:	4b02      	ldr	r3, [pc, #8]	; (400ebc <PIOC_Handler+0x10>)
  400eb4:	4798      	blx	r3
  400eb6:	bd08      	pop	{r3, pc}
  400eb8:	400e1200 	.word	0x400e1200
  400ebc:	00400dc5 	.word	0x00400dc5

00400ec0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ec0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ec2:	2110      	movs	r1, #16
  400ec4:	4801      	ldr	r0, [pc, #4]	; (400ecc <PIOD_Handler+0xc>)
  400ec6:	4b02      	ldr	r3, [pc, #8]	; (400ed0 <PIOD_Handler+0x10>)
  400ec8:	4798      	blx	r3
  400eca:	bd08      	pop	{r3, pc}
  400ecc:	400e1400 	.word	0x400e1400
  400ed0:	00400dc5 	.word	0x00400dc5

00400ed4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ed4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400ed6:	2111      	movs	r1, #17
  400ed8:	4801      	ldr	r0, [pc, #4]	; (400ee0 <PIOE_Handler+0xc>)
  400eda:	4b02      	ldr	r3, [pc, #8]	; (400ee4 <PIOE_Handler+0x10>)
  400edc:	4798      	blx	r3
  400ede:	bd08      	pop	{r3, pc}
  400ee0:	400e1600 	.word	0x400e1600
  400ee4:	00400dc5 	.word	0x00400dc5

00400ee8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400ee8:	2803      	cmp	r0, #3
  400eea:	d011      	beq.n	400f10 <pmc_mck_set_division+0x28>
  400eec:	2804      	cmp	r0, #4
  400eee:	d012      	beq.n	400f16 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ef0:	2802      	cmp	r0, #2
  400ef2:	bf0c      	ite	eq
  400ef4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400ef8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400efa:	4a08      	ldr	r2, [pc, #32]	; (400f1c <pmc_mck_set_division+0x34>)
  400efc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400f02:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400f04:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f06:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f08:	f013 0f08 	tst.w	r3, #8
  400f0c:	d0fb      	beq.n	400f06 <pmc_mck_set_division+0x1e>
}
  400f0e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400f10:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400f14:	e7f1      	b.n	400efa <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400f16:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400f1a:	e7ee      	b.n	400efa <pmc_mck_set_division+0x12>
  400f1c:	400e0600 	.word	0x400e0600

00400f20 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400f20:	4a17      	ldr	r2, [pc, #92]	; (400f80 <pmc_switch_mck_to_pllack+0x60>)
  400f22:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f28:	4318      	orrs	r0, r3
  400f2a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f2c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f2e:	f013 0f08 	tst.w	r3, #8
  400f32:	d10a      	bne.n	400f4a <pmc_switch_mck_to_pllack+0x2a>
  400f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f38:	4911      	ldr	r1, [pc, #68]	; (400f80 <pmc_switch_mck_to_pllack+0x60>)
  400f3a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f3c:	f012 0f08 	tst.w	r2, #8
  400f40:	d103      	bne.n	400f4a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f42:	3b01      	subs	r3, #1
  400f44:	d1f9      	bne.n	400f3a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f46:	2001      	movs	r0, #1
  400f48:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f4a:	4a0d      	ldr	r2, [pc, #52]	; (400f80 <pmc_switch_mck_to_pllack+0x60>)
  400f4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f4e:	f023 0303 	bic.w	r3, r3, #3
  400f52:	f043 0302 	orr.w	r3, r3, #2
  400f56:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f58:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f5a:	f013 0f08 	tst.w	r3, #8
  400f5e:	d10a      	bne.n	400f76 <pmc_switch_mck_to_pllack+0x56>
  400f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f64:	4906      	ldr	r1, [pc, #24]	; (400f80 <pmc_switch_mck_to_pllack+0x60>)
  400f66:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f68:	f012 0f08 	tst.w	r2, #8
  400f6c:	d105      	bne.n	400f7a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f6e:	3b01      	subs	r3, #1
  400f70:	d1f9      	bne.n	400f66 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f72:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f74:	4770      	bx	lr
	return 0;
  400f76:	2000      	movs	r0, #0
  400f78:	4770      	bx	lr
  400f7a:	2000      	movs	r0, #0
  400f7c:	4770      	bx	lr
  400f7e:	bf00      	nop
  400f80:	400e0600 	.word	0x400e0600

00400f84 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f84:	b9a0      	cbnz	r0, 400fb0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f86:	480e      	ldr	r0, [pc, #56]	; (400fc0 <pmc_switch_mainck_to_xtal+0x3c>)
  400f88:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f8a:	0209      	lsls	r1, r1, #8
  400f8c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f8e:	4a0d      	ldr	r2, [pc, #52]	; (400fc4 <pmc_switch_mainck_to_xtal+0x40>)
  400f90:	401a      	ands	r2, r3
  400f92:	4b0d      	ldr	r3, [pc, #52]	; (400fc8 <pmc_switch_mainck_to_xtal+0x44>)
  400f94:	4313      	orrs	r3, r2
  400f96:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f98:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f9a:	4602      	mov	r2, r0
  400f9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f9e:	f013 0f01 	tst.w	r3, #1
  400fa2:	d0fb      	beq.n	400f9c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fa4:	4a06      	ldr	r2, [pc, #24]	; (400fc0 <pmc_switch_mainck_to_xtal+0x3c>)
  400fa6:	6a11      	ldr	r1, [r2, #32]
  400fa8:	4b08      	ldr	r3, [pc, #32]	; (400fcc <pmc_switch_mainck_to_xtal+0x48>)
  400faa:	430b      	orrs	r3, r1
  400fac:	6213      	str	r3, [r2, #32]
  400fae:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fb0:	4903      	ldr	r1, [pc, #12]	; (400fc0 <pmc_switch_mainck_to_xtal+0x3c>)
  400fb2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fb4:	4a06      	ldr	r2, [pc, #24]	; (400fd0 <pmc_switch_mainck_to_xtal+0x4c>)
  400fb6:	401a      	ands	r2, r3
  400fb8:	4b06      	ldr	r3, [pc, #24]	; (400fd4 <pmc_switch_mainck_to_xtal+0x50>)
  400fba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fbc:	620b      	str	r3, [r1, #32]
  400fbe:	4770      	bx	lr
  400fc0:	400e0600 	.word	0x400e0600
  400fc4:	ffc8fffc 	.word	0xffc8fffc
  400fc8:	00370001 	.word	0x00370001
  400fcc:	01370000 	.word	0x01370000
  400fd0:	fec8fffc 	.word	0xfec8fffc
  400fd4:	01370002 	.word	0x01370002

00400fd8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fd8:	4b02      	ldr	r3, [pc, #8]	; (400fe4 <pmc_osc_is_ready_mainck+0xc>)
  400fda:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fdc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fe0:	4770      	bx	lr
  400fe2:	bf00      	nop
  400fe4:	400e0600 	.word	0x400e0600

00400fe8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400fe8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400fec:	4b01      	ldr	r3, [pc, #4]	; (400ff4 <pmc_disable_pllack+0xc>)
  400fee:	629a      	str	r2, [r3, #40]	; 0x28
  400ff0:	4770      	bx	lr
  400ff2:	bf00      	nop
  400ff4:	400e0600 	.word	0x400e0600

00400ff8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ff8:	4b02      	ldr	r3, [pc, #8]	; (401004 <pmc_is_locked_pllack+0xc>)
  400ffa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ffc:	f000 0002 	and.w	r0, r0, #2
  401000:	4770      	bx	lr
  401002:	bf00      	nop
  401004:	400e0600 	.word	0x400e0600

00401008 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401008:	283f      	cmp	r0, #63	; 0x3f
  40100a:	d81e      	bhi.n	40104a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40100c:	281f      	cmp	r0, #31
  40100e:	d80c      	bhi.n	40102a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401010:	4b11      	ldr	r3, [pc, #68]	; (401058 <pmc_enable_periph_clk+0x50>)
  401012:	699a      	ldr	r2, [r3, #24]
  401014:	2301      	movs	r3, #1
  401016:	4083      	lsls	r3, r0
  401018:	4393      	bics	r3, r2
  40101a:	d018      	beq.n	40104e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40101c:	2301      	movs	r3, #1
  40101e:	fa03 f000 	lsl.w	r0, r3, r0
  401022:	4b0d      	ldr	r3, [pc, #52]	; (401058 <pmc_enable_periph_clk+0x50>)
  401024:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401026:	2000      	movs	r0, #0
  401028:	4770      	bx	lr
		ul_id -= 32;
  40102a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40102c:	4b0a      	ldr	r3, [pc, #40]	; (401058 <pmc_enable_periph_clk+0x50>)
  40102e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401032:	2301      	movs	r3, #1
  401034:	4083      	lsls	r3, r0
  401036:	4393      	bics	r3, r2
  401038:	d00b      	beq.n	401052 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40103a:	2301      	movs	r3, #1
  40103c:	fa03 f000 	lsl.w	r0, r3, r0
  401040:	4b05      	ldr	r3, [pc, #20]	; (401058 <pmc_enable_periph_clk+0x50>)
  401042:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401046:	2000      	movs	r0, #0
  401048:	4770      	bx	lr
		return 1;
  40104a:	2001      	movs	r0, #1
  40104c:	4770      	bx	lr
	return 0;
  40104e:	2000      	movs	r0, #0
  401050:	4770      	bx	lr
  401052:	2000      	movs	r0, #0
}
  401054:	4770      	bx	lr
  401056:	bf00      	nop
  401058:	400e0600 	.word	0x400e0600

0040105c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40105c:	6943      	ldr	r3, [r0, #20]
  40105e:	f013 0f02 	tst.w	r3, #2
  401062:	d002      	beq.n	40106a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401064:	61c1      	str	r1, [r0, #28]
	return 0;
  401066:	2000      	movs	r0, #0
  401068:	4770      	bx	lr
		return 1;
  40106a:	2001      	movs	r0, #1
}
  40106c:	4770      	bx	lr

0040106e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40106e:	6943      	ldr	r3, [r0, #20]
  401070:	f013 0f01 	tst.w	r3, #1
  401074:	d003      	beq.n	40107e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401076:	6983      	ldr	r3, [r0, #24]
  401078:	700b      	strb	r3, [r1, #0]
	return 0;
  40107a:	2000      	movs	r0, #0
  40107c:	4770      	bx	lr
		return 1;
  40107e:	2001      	movs	r0, #1
}
  401080:	4770      	bx	lr

00401082 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401082:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401084:	010b      	lsls	r3, r1, #4
  401086:	4293      	cmp	r3, r2
  401088:	d914      	bls.n	4010b4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40108a:	00c9      	lsls	r1, r1, #3
  40108c:	084b      	lsrs	r3, r1, #1
  40108e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401092:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401096:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401098:	1e5c      	subs	r4, r3, #1
  40109a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40109e:	428c      	cmp	r4, r1
  4010a0:	d901      	bls.n	4010a6 <usart_set_async_baudrate+0x24>
		return 1;
  4010a2:	2001      	movs	r0, #1
  4010a4:	e017      	b.n	4010d6 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4010a6:	6841      	ldr	r1, [r0, #4]
  4010a8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4010ac:	6041      	str	r1, [r0, #4]
  4010ae:	e00c      	b.n	4010ca <usart_set_async_baudrate+0x48>
		return 1;
  4010b0:	2001      	movs	r0, #1
  4010b2:	e010      	b.n	4010d6 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4010b4:	0859      	lsrs	r1, r3, #1
  4010b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4010ba:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4010be:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4010c0:	1e5c      	subs	r4, r3, #1
  4010c2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4010c6:	428c      	cmp	r4, r1
  4010c8:	d8f2      	bhi.n	4010b0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4010ca:	0412      	lsls	r2, r2, #16
  4010cc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4010d0:	431a      	orrs	r2, r3
  4010d2:	6202      	str	r2, [r0, #32]

	return 0;
  4010d4:	2000      	movs	r0, #0
}
  4010d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010da:	4770      	bx	lr

004010dc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4010dc:	4b08      	ldr	r3, [pc, #32]	; (401100 <usart_reset+0x24>)
  4010de:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4010e2:	2300      	movs	r3, #0
  4010e4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4010e6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4010e8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4010ea:	2388      	movs	r3, #136	; 0x88
  4010ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4010ee:	2324      	movs	r3, #36	; 0x24
  4010f0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4010f2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4010f6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4010f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4010fc:	6003      	str	r3, [r0, #0]
  4010fe:	4770      	bx	lr
  401100:	55534100 	.word	0x55534100

00401104 <usart_init_rs232>:
{
  401104:	b570      	push	{r4, r5, r6, lr}
  401106:	4605      	mov	r5, r0
  401108:	460c      	mov	r4, r1
  40110a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40110c:	4b0f      	ldr	r3, [pc, #60]	; (40114c <usart_init_rs232+0x48>)
  40110e:	4798      	blx	r3
	ul_reg_val = 0;
  401110:	2200      	movs	r2, #0
  401112:	4b0f      	ldr	r3, [pc, #60]	; (401150 <usart_init_rs232+0x4c>)
  401114:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401116:	b1a4      	cbz	r4, 401142 <usart_init_rs232+0x3e>
  401118:	4632      	mov	r2, r6
  40111a:	6821      	ldr	r1, [r4, #0]
  40111c:	4628      	mov	r0, r5
  40111e:	4b0d      	ldr	r3, [pc, #52]	; (401154 <usart_init_rs232+0x50>)
  401120:	4798      	blx	r3
  401122:	4602      	mov	r2, r0
  401124:	b978      	cbnz	r0, 401146 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401126:	6863      	ldr	r3, [r4, #4]
  401128:	68a1      	ldr	r1, [r4, #8]
  40112a:	430b      	orrs	r3, r1
  40112c:	6921      	ldr	r1, [r4, #16]
  40112e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401130:	68e1      	ldr	r1, [r4, #12]
  401132:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401134:	4906      	ldr	r1, [pc, #24]	; (401150 <usart_init_rs232+0x4c>)
  401136:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401138:	6869      	ldr	r1, [r5, #4]
  40113a:	430b      	orrs	r3, r1
  40113c:	606b      	str	r3, [r5, #4]
}
  40113e:	4610      	mov	r0, r2
  401140:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401142:	2201      	movs	r2, #1
  401144:	e7fb      	b.n	40113e <usart_init_rs232+0x3a>
  401146:	2201      	movs	r2, #1
  401148:	e7f9      	b.n	40113e <usart_init_rs232+0x3a>
  40114a:	bf00      	nop
  40114c:	004010dd 	.word	0x004010dd
  401150:	20400c64 	.word	0x20400c64
  401154:	00401083 	.word	0x00401083

00401158 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401158:	2340      	movs	r3, #64	; 0x40
  40115a:	6003      	str	r3, [r0, #0]
  40115c:	4770      	bx	lr

0040115e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40115e:	2310      	movs	r3, #16
  401160:	6003      	str	r3, [r0, #0]
  401162:	4770      	bx	lr

00401164 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401164:	6943      	ldr	r3, [r0, #20]
  401166:	f013 0f02 	tst.w	r3, #2
  40116a:	d004      	beq.n	401176 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40116c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401170:	61c1      	str	r1, [r0, #28]
	return 0;
  401172:	2000      	movs	r0, #0
  401174:	4770      	bx	lr
		return 1;
  401176:	2001      	movs	r0, #1
}
  401178:	4770      	bx	lr

0040117a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40117a:	6943      	ldr	r3, [r0, #20]
  40117c:	f013 0f01 	tst.w	r3, #1
  401180:	d005      	beq.n	40118e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401182:	6983      	ldr	r3, [r0, #24]
  401184:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401188:	600b      	str	r3, [r1, #0]
	return 0;
  40118a:	2000      	movs	r0, #0
  40118c:	4770      	bx	lr
		return 1;
  40118e:	2001      	movs	r0, #1
}
  401190:	4770      	bx	lr

00401192 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401192:	e7fe      	b.n	401192 <Dummy_Handler>

00401194 <Reset_Handler>:
{
  401194:	b500      	push	{lr}
  401196:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401198:	4b25      	ldr	r3, [pc, #148]	; (401230 <Reset_Handler+0x9c>)
  40119a:	4a26      	ldr	r2, [pc, #152]	; (401234 <Reset_Handler+0xa0>)
  40119c:	429a      	cmp	r2, r3
  40119e:	d010      	beq.n	4011c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4011a0:	4b25      	ldr	r3, [pc, #148]	; (401238 <Reset_Handler+0xa4>)
  4011a2:	4a23      	ldr	r2, [pc, #140]	; (401230 <Reset_Handler+0x9c>)
  4011a4:	429a      	cmp	r2, r3
  4011a6:	d20c      	bcs.n	4011c2 <Reset_Handler+0x2e>
  4011a8:	3b01      	subs	r3, #1
  4011aa:	1a9b      	subs	r3, r3, r2
  4011ac:	f023 0303 	bic.w	r3, r3, #3
  4011b0:	3304      	adds	r3, #4
  4011b2:	4413      	add	r3, r2
  4011b4:	491f      	ldr	r1, [pc, #124]	; (401234 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4011b6:	f851 0b04 	ldr.w	r0, [r1], #4
  4011ba:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4011be:	429a      	cmp	r2, r3
  4011c0:	d1f9      	bne.n	4011b6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4011c2:	4b1e      	ldr	r3, [pc, #120]	; (40123c <Reset_Handler+0xa8>)
  4011c4:	4a1e      	ldr	r2, [pc, #120]	; (401240 <Reset_Handler+0xac>)
  4011c6:	429a      	cmp	r2, r3
  4011c8:	d20a      	bcs.n	4011e0 <Reset_Handler+0x4c>
  4011ca:	3b01      	subs	r3, #1
  4011cc:	1a9b      	subs	r3, r3, r2
  4011ce:	f023 0303 	bic.w	r3, r3, #3
  4011d2:	3304      	adds	r3, #4
  4011d4:	4413      	add	r3, r2
                *pDest++ = 0;
  4011d6:	2100      	movs	r1, #0
  4011d8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4011dc:	4293      	cmp	r3, r2
  4011de:	d1fb      	bne.n	4011d8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4011e0:	4a18      	ldr	r2, [pc, #96]	; (401244 <Reset_Handler+0xb0>)
  4011e2:	4b19      	ldr	r3, [pc, #100]	; (401248 <Reset_Handler+0xb4>)
  4011e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4011e8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4011ea:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011ee:	fab3 f383 	clz	r3, r3
  4011f2:	095b      	lsrs	r3, r3, #5
  4011f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4011f6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4011f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011fc:	2200      	movs	r2, #0
  4011fe:	4b13      	ldr	r3, [pc, #76]	; (40124c <Reset_Handler+0xb8>)
  401200:	701a      	strb	r2, [r3, #0]
	return flags;
  401202:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401204:	4a12      	ldr	r2, [pc, #72]	; (401250 <Reset_Handler+0xbc>)
  401206:	6813      	ldr	r3, [r2, #0]
  401208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40120c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40120e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401212:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401216:	b129      	cbz	r1, 401224 <Reset_Handler+0x90>
		cpu_irq_enable();
  401218:	2201      	movs	r2, #1
  40121a:	4b0c      	ldr	r3, [pc, #48]	; (40124c <Reset_Handler+0xb8>)
  40121c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40121e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401222:	b662      	cpsie	i
        __libc_init_array();
  401224:	4b0b      	ldr	r3, [pc, #44]	; (401254 <Reset_Handler+0xc0>)
  401226:	4798      	blx	r3
        main();
  401228:	4b0b      	ldr	r3, [pc, #44]	; (401258 <Reset_Handler+0xc4>)
  40122a:	4798      	blx	r3
  40122c:	e7fe      	b.n	40122c <Reset_Handler+0x98>
  40122e:	bf00      	nop
  401230:	20400000 	.word	0x20400000
  401234:	00406ce4 	.word	0x00406ce4
  401238:	204009d0 	.word	0x204009d0
  40123c:	20400e58 	.word	0x20400e58
  401240:	204009d0 	.word	0x204009d0
  401244:	e000ed00 	.word	0xe000ed00
  401248:	00400000 	.word	0x00400000
  40124c:	20400018 	.word	0x20400018
  401250:	e000ed88 	.word	0xe000ed88
  401254:	00403b41 	.word	0x00403b41
  401258:	00403725 	.word	0x00403725

0040125c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40125c:	4b3b      	ldr	r3, [pc, #236]	; (40134c <SystemCoreClockUpdate+0xf0>)
  40125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401260:	f003 0303 	and.w	r3, r3, #3
  401264:	2b01      	cmp	r3, #1
  401266:	d01d      	beq.n	4012a4 <SystemCoreClockUpdate+0x48>
  401268:	b183      	cbz	r3, 40128c <SystemCoreClockUpdate+0x30>
  40126a:	2b02      	cmp	r3, #2
  40126c:	d036      	beq.n	4012dc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40126e:	4b37      	ldr	r3, [pc, #220]	; (40134c <SystemCoreClockUpdate+0xf0>)
  401270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401272:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401276:	2b70      	cmp	r3, #112	; 0x70
  401278:	d05f      	beq.n	40133a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40127a:	4b34      	ldr	r3, [pc, #208]	; (40134c <SystemCoreClockUpdate+0xf0>)
  40127c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40127e:	4934      	ldr	r1, [pc, #208]	; (401350 <SystemCoreClockUpdate+0xf4>)
  401280:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401284:	680b      	ldr	r3, [r1, #0]
  401286:	40d3      	lsrs	r3, r2
  401288:	600b      	str	r3, [r1, #0]
  40128a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40128c:	4b31      	ldr	r3, [pc, #196]	; (401354 <SystemCoreClockUpdate+0xf8>)
  40128e:	695b      	ldr	r3, [r3, #20]
  401290:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401294:	bf14      	ite	ne
  401296:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40129a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40129e:	4b2c      	ldr	r3, [pc, #176]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012a0:	601a      	str	r2, [r3, #0]
  4012a2:	e7e4      	b.n	40126e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012a4:	4b29      	ldr	r3, [pc, #164]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012a6:	6a1b      	ldr	r3, [r3, #32]
  4012a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012ac:	d003      	beq.n	4012b6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4012ae:	4a2a      	ldr	r2, [pc, #168]	; (401358 <SystemCoreClockUpdate+0xfc>)
  4012b0:	4b27      	ldr	r3, [pc, #156]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012b2:	601a      	str	r2, [r3, #0]
  4012b4:	e7db      	b.n	40126e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012b6:	4a29      	ldr	r2, [pc, #164]	; (40135c <SystemCoreClockUpdate+0x100>)
  4012b8:	4b25      	ldr	r3, [pc, #148]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012ba:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012bc:	4b23      	ldr	r3, [pc, #140]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012be:	6a1b      	ldr	r3, [r3, #32]
  4012c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012c4:	2b10      	cmp	r3, #16
  4012c6:	d005      	beq.n	4012d4 <SystemCoreClockUpdate+0x78>
  4012c8:	2b20      	cmp	r3, #32
  4012ca:	d1d0      	bne.n	40126e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4012cc:	4a22      	ldr	r2, [pc, #136]	; (401358 <SystemCoreClockUpdate+0xfc>)
  4012ce:	4b20      	ldr	r3, [pc, #128]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012d0:	601a      	str	r2, [r3, #0]
          break;
  4012d2:	e7cc      	b.n	40126e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4012d4:	4a22      	ldr	r2, [pc, #136]	; (401360 <SystemCoreClockUpdate+0x104>)
  4012d6:	4b1e      	ldr	r3, [pc, #120]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012d8:	601a      	str	r2, [r3, #0]
          break;
  4012da:	e7c8      	b.n	40126e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012dc:	4b1b      	ldr	r3, [pc, #108]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012de:	6a1b      	ldr	r3, [r3, #32]
  4012e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012e4:	d016      	beq.n	401314 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012e6:	4a1c      	ldr	r2, [pc, #112]	; (401358 <SystemCoreClockUpdate+0xfc>)
  4012e8:	4b19      	ldr	r3, [pc, #100]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012ea:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012ec:	4b17      	ldr	r3, [pc, #92]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012f0:	f003 0303 	and.w	r3, r3, #3
  4012f4:	2b02      	cmp	r3, #2
  4012f6:	d1ba      	bne.n	40126e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012f8:	4a14      	ldr	r2, [pc, #80]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4012fe:	4814      	ldr	r0, [pc, #80]	; (401350 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401300:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401304:	6803      	ldr	r3, [r0, #0]
  401306:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40130a:	b2d2      	uxtb	r2, r2
  40130c:	fbb3 f3f2 	udiv	r3, r3, r2
  401310:	6003      	str	r3, [r0, #0]
  401312:	e7ac      	b.n	40126e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401314:	4a11      	ldr	r2, [pc, #68]	; (40135c <SystemCoreClockUpdate+0x100>)
  401316:	4b0e      	ldr	r3, [pc, #56]	; (401350 <SystemCoreClockUpdate+0xf4>)
  401318:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40131a:	4b0c      	ldr	r3, [pc, #48]	; (40134c <SystemCoreClockUpdate+0xf0>)
  40131c:	6a1b      	ldr	r3, [r3, #32]
  40131e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401322:	2b10      	cmp	r3, #16
  401324:	d005      	beq.n	401332 <SystemCoreClockUpdate+0xd6>
  401326:	2b20      	cmp	r3, #32
  401328:	d1e0      	bne.n	4012ec <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40132a:	4a0b      	ldr	r2, [pc, #44]	; (401358 <SystemCoreClockUpdate+0xfc>)
  40132c:	4b08      	ldr	r3, [pc, #32]	; (401350 <SystemCoreClockUpdate+0xf4>)
  40132e:	601a      	str	r2, [r3, #0]
          break;
  401330:	e7dc      	b.n	4012ec <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401332:	4a0b      	ldr	r2, [pc, #44]	; (401360 <SystemCoreClockUpdate+0x104>)
  401334:	4b06      	ldr	r3, [pc, #24]	; (401350 <SystemCoreClockUpdate+0xf4>)
  401336:	601a      	str	r2, [r3, #0]
          break;
  401338:	e7d8      	b.n	4012ec <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40133a:	4a05      	ldr	r2, [pc, #20]	; (401350 <SystemCoreClockUpdate+0xf4>)
  40133c:	6813      	ldr	r3, [r2, #0]
  40133e:	4909      	ldr	r1, [pc, #36]	; (401364 <SystemCoreClockUpdate+0x108>)
  401340:	fba1 1303 	umull	r1, r3, r1, r3
  401344:	085b      	lsrs	r3, r3, #1
  401346:	6013      	str	r3, [r2, #0]
  401348:	4770      	bx	lr
  40134a:	bf00      	nop
  40134c:	400e0600 	.word	0x400e0600
  401350:	2040001c 	.word	0x2040001c
  401354:	400e1810 	.word	0x400e1810
  401358:	00b71b00 	.word	0x00b71b00
  40135c:	003d0900 	.word	0x003d0900
  401360:	007a1200 	.word	0x007a1200
  401364:	aaaaaaab 	.word	0xaaaaaaab

00401368 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401368:	4b16      	ldr	r3, [pc, #88]	; (4013c4 <system_init_flash+0x5c>)
  40136a:	4298      	cmp	r0, r3
  40136c:	d913      	bls.n	401396 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40136e:	4b16      	ldr	r3, [pc, #88]	; (4013c8 <system_init_flash+0x60>)
  401370:	4298      	cmp	r0, r3
  401372:	d915      	bls.n	4013a0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401374:	4b15      	ldr	r3, [pc, #84]	; (4013cc <system_init_flash+0x64>)
  401376:	4298      	cmp	r0, r3
  401378:	d916      	bls.n	4013a8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40137a:	4b15      	ldr	r3, [pc, #84]	; (4013d0 <system_init_flash+0x68>)
  40137c:	4298      	cmp	r0, r3
  40137e:	d917      	bls.n	4013b0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401380:	4b14      	ldr	r3, [pc, #80]	; (4013d4 <system_init_flash+0x6c>)
  401382:	4298      	cmp	r0, r3
  401384:	d918      	bls.n	4013b8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401386:	4b14      	ldr	r3, [pc, #80]	; (4013d8 <system_init_flash+0x70>)
  401388:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40138a:	bf94      	ite	ls
  40138c:	4a13      	ldrls	r2, [pc, #76]	; (4013dc <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40138e:	4a14      	ldrhi	r2, [pc, #80]	; (4013e0 <system_init_flash+0x78>)
  401390:	4b14      	ldr	r3, [pc, #80]	; (4013e4 <system_init_flash+0x7c>)
  401392:	601a      	str	r2, [r3, #0]
  401394:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401396:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40139a:	4b12      	ldr	r3, [pc, #72]	; (4013e4 <system_init_flash+0x7c>)
  40139c:	601a      	str	r2, [r3, #0]
  40139e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4013a0:	4a11      	ldr	r2, [pc, #68]	; (4013e8 <system_init_flash+0x80>)
  4013a2:	4b10      	ldr	r3, [pc, #64]	; (4013e4 <system_init_flash+0x7c>)
  4013a4:	601a      	str	r2, [r3, #0]
  4013a6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4013a8:	4a10      	ldr	r2, [pc, #64]	; (4013ec <system_init_flash+0x84>)
  4013aa:	4b0e      	ldr	r3, [pc, #56]	; (4013e4 <system_init_flash+0x7c>)
  4013ac:	601a      	str	r2, [r3, #0]
  4013ae:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4013b0:	4a0f      	ldr	r2, [pc, #60]	; (4013f0 <system_init_flash+0x88>)
  4013b2:	4b0c      	ldr	r3, [pc, #48]	; (4013e4 <system_init_flash+0x7c>)
  4013b4:	601a      	str	r2, [r3, #0]
  4013b6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013b8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4013bc:	4b09      	ldr	r3, [pc, #36]	; (4013e4 <system_init_flash+0x7c>)
  4013be:	601a      	str	r2, [r3, #0]
  4013c0:	4770      	bx	lr
  4013c2:	bf00      	nop
  4013c4:	015ef3bf 	.word	0x015ef3bf
  4013c8:	02bde77f 	.word	0x02bde77f
  4013cc:	041cdb3f 	.word	0x041cdb3f
  4013d0:	057bceff 	.word	0x057bceff
  4013d4:	06dac2bf 	.word	0x06dac2bf
  4013d8:	0839b67f 	.word	0x0839b67f
  4013dc:	04000500 	.word	0x04000500
  4013e0:	04000600 	.word	0x04000600
  4013e4:	400e0c00 	.word	0x400e0c00
  4013e8:	04000100 	.word	0x04000100
  4013ec:	04000200 	.word	0x04000200
  4013f0:	04000300 	.word	0x04000300

004013f4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013f4:	4b0a      	ldr	r3, [pc, #40]	; (401420 <_sbrk+0x2c>)
  4013f6:	681b      	ldr	r3, [r3, #0]
  4013f8:	b153      	cbz	r3, 401410 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4013fa:	4b09      	ldr	r3, [pc, #36]	; (401420 <_sbrk+0x2c>)
  4013fc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4013fe:	181a      	adds	r2, r3, r0
  401400:	4908      	ldr	r1, [pc, #32]	; (401424 <_sbrk+0x30>)
  401402:	4291      	cmp	r1, r2
  401404:	db08      	blt.n	401418 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401406:	4610      	mov	r0, r2
  401408:	4a05      	ldr	r2, [pc, #20]	; (401420 <_sbrk+0x2c>)
  40140a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40140c:	4618      	mov	r0, r3
  40140e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401410:	4a05      	ldr	r2, [pc, #20]	; (401428 <_sbrk+0x34>)
  401412:	4b03      	ldr	r3, [pc, #12]	; (401420 <_sbrk+0x2c>)
  401414:	601a      	str	r2, [r3, #0]
  401416:	e7f0      	b.n	4013fa <_sbrk+0x6>
		return (caddr_t) -1;	
  401418:	f04f 30ff 	mov.w	r0, #4294967295
}
  40141c:	4770      	bx	lr
  40141e:	bf00      	nop
  401420:	20400c68 	.word	0x20400c68
  401424:	2045fffc 	.word	0x2045fffc
  401428:	20403058 	.word	0x20403058

0040142c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40142c:	f04f 30ff 	mov.w	r0, #4294967295
  401430:	4770      	bx	lr

00401432 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401436:	604b      	str	r3, [r1, #4]

	return 0;
}
  401438:	2000      	movs	r0, #0
  40143a:	4770      	bx	lr

0040143c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40143c:	2001      	movs	r0, #1
  40143e:	4770      	bx	lr

00401440 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401440:	2000      	movs	r0, #0
  401442:	4770      	bx	lr

00401444 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401444:	f100 0308 	add.w	r3, r0, #8
  401448:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40144a:	f04f 32ff 	mov.w	r2, #4294967295
  40144e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401450:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401452:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401454:	2300      	movs	r3, #0
  401456:	6003      	str	r3, [r0, #0]
  401458:	4770      	bx	lr

0040145a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40145a:	2300      	movs	r3, #0
  40145c:	6103      	str	r3, [r0, #16]
  40145e:	4770      	bx	lr

00401460 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401460:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401462:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401464:	689a      	ldr	r2, [r3, #8]
  401466:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401468:	689a      	ldr	r2, [r3, #8]
  40146a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40146c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40146e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401470:	6803      	ldr	r3, [r0, #0]
  401472:	3301      	adds	r3, #1
  401474:	6003      	str	r3, [r0, #0]
  401476:	4770      	bx	lr

00401478 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401478:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40147a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40147c:	f1b5 3fff 	cmp.w	r5, #4294967295
  401480:	d002      	beq.n	401488 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401482:	f100 0208 	add.w	r2, r0, #8
  401486:	e002      	b.n	40148e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401488:	6902      	ldr	r2, [r0, #16]
  40148a:	e004      	b.n	401496 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40148c:	461a      	mov	r2, r3
  40148e:	6853      	ldr	r3, [r2, #4]
  401490:	681c      	ldr	r4, [r3, #0]
  401492:	42a5      	cmp	r5, r4
  401494:	d2fa      	bcs.n	40148c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401496:	6853      	ldr	r3, [r2, #4]
  401498:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40149a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40149c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40149e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4014a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4014a2:	6803      	ldr	r3, [r0, #0]
  4014a4:	3301      	adds	r3, #1
  4014a6:	6003      	str	r3, [r0, #0]
}
  4014a8:	bc30      	pop	{r4, r5}
  4014aa:	4770      	bx	lr

004014ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4014ac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4014ae:	6842      	ldr	r2, [r0, #4]
  4014b0:	6881      	ldr	r1, [r0, #8]
  4014b2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4014b4:	6882      	ldr	r2, [r0, #8]
  4014b6:	6841      	ldr	r1, [r0, #4]
  4014b8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4014ba:	685a      	ldr	r2, [r3, #4]
  4014bc:	4290      	cmp	r0, r2
  4014be:	d005      	beq.n	4014cc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4014c0:	2200      	movs	r2, #0
  4014c2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4014c4:	6818      	ldr	r0, [r3, #0]
  4014c6:	3801      	subs	r0, #1
  4014c8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4014ca:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4014cc:	6882      	ldr	r2, [r0, #8]
  4014ce:	605a      	str	r2, [r3, #4]
  4014d0:	e7f6      	b.n	4014c0 <uxListRemove+0x14>
	...

004014d4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4014d4:	4b0d      	ldr	r3, [pc, #52]	; (40150c <prvTaskExitError+0x38>)
  4014d6:	681b      	ldr	r3, [r3, #0]
  4014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014dc:	d00a      	beq.n	4014f4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4014de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014e2:	b672      	cpsid	i
  4014e4:	f383 8811 	msr	BASEPRI, r3
  4014e8:	f3bf 8f6f 	isb	sy
  4014ec:	f3bf 8f4f 	dsb	sy
  4014f0:	b662      	cpsie	i
  4014f2:	e7fe      	b.n	4014f2 <prvTaskExitError+0x1e>
  4014f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014f8:	b672      	cpsid	i
  4014fa:	f383 8811 	msr	BASEPRI, r3
  4014fe:	f3bf 8f6f 	isb	sy
  401502:	f3bf 8f4f 	dsb	sy
  401506:	b662      	cpsie	i
  401508:	e7fe      	b.n	401508 <prvTaskExitError+0x34>
  40150a:	bf00      	nop
  40150c:	20400020 	.word	0x20400020

00401510 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401510:	4806      	ldr	r0, [pc, #24]	; (40152c <prvPortStartFirstTask+0x1c>)
  401512:	6800      	ldr	r0, [r0, #0]
  401514:	6800      	ldr	r0, [r0, #0]
  401516:	f380 8808 	msr	MSP, r0
  40151a:	b662      	cpsie	i
  40151c:	b661      	cpsie	f
  40151e:	f3bf 8f4f 	dsb	sy
  401522:	f3bf 8f6f 	isb	sy
  401526:	df00      	svc	0
  401528:	bf00      	nop
  40152a:	0000      	.short	0x0000
  40152c:	e000ed08 	.word	0xe000ed08

00401530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401540 <vPortEnableVFP+0x10>
  401534:	6801      	ldr	r1, [r0, #0]
  401536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40153a:	6001      	str	r1, [r0, #0]
  40153c:	4770      	bx	lr
  40153e:	0000      	.short	0x0000
  401540:	e000ed88 	.word	0xe000ed88

00401544 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401548:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  40154c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401550:	4b05      	ldr	r3, [pc, #20]	; (401568 <pxPortInitialiseStack+0x24>)
  401552:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401556:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40155a:	f06f 0302 	mvn.w	r3, #2
  40155e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401562:	3844      	subs	r0, #68	; 0x44
  401564:	4770      	bx	lr
  401566:	bf00      	nop
  401568:	004014d5 	.word	0x004014d5

0040156c <SVC_Handler>:
	__asm volatile (
  40156c:	4b06      	ldr	r3, [pc, #24]	; (401588 <pxCurrentTCBConst2>)
  40156e:	6819      	ldr	r1, [r3, #0]
  401570:	6808      	ldr	r0, [r1, #0]
  401572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401576:	f380 8809 	msr	PSP, r0
  40157a:	f3bf 8f6f 	isb	sy
  40157e:	f04f 0000 	mov.w	r0, #0
  401582:	f380 8811 	msr	BASEPRI, r0
  401586:	4770      	bx	lr

00401588 <pxCurrentTCBConst2>:
  401588:	20400c74 	.word	0x20400c74
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop

00401590 <vPortEnterCritical>:
  401590:	f04f 0380 	mov.w	r3, #128	; 0x80
  401594:	b672      	cpsid	i
  401596:	f383 8811 	msr	BASEPRI, r3
  40159a:	f3bf 8f6f 	isb	sy
  40159e:	f3bf 8f4f 	dsb	sy
  4015a2:	b662      	cpsie	i
	uxCriticalNesting++;
  4015a4:	4a0b      	ldr	r2, [pc, #44]	; (4015d4 <vPortEnterCritical+0x44>)
  4015a6:	6813      	ldr	r3, [r2, #0]
  4015a8:	3301      	adds	r3, #1
  4015aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4015ac:	2b01      	cmp	r3, #1
  4015ae:	d10f      	bne.n	4015d0 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4015b0:	4b09      	ldr	r3, [pc, #36]	; (4015d8 <vPortEnterCritical+0x48>)
  4015b2:	681b      	ldr	r3, [r3, #0]
  4015b4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4015b8:	d00a      	beq.n	4015d0 <vPortEnterCritical+0x40>
  4015ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015be:	b672      	cpsid	i
  4015c0:	f383 8811 	msr	BASEPRI, r3
  4015c4:	f3bf 8f6f 	isb	sy
  4015c8:	f3bf 8f4f 	dsb	sy
  4015cc:	b662      	cpsie	i
  4015ce:	e7fe      	b.n	4015ce <vPortEnterCritical+0x3e>
  4015d0:	4770      	bx	lr
  4015d2:	bf00      	nop
  4015d4:	20400020 	.word	0x20400020
  4015d8:	e000ed04 	.word	0xe000ed04

004015dc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4015dc:	4b0a      	ldr	r3, [pc, #40]	; (401608 <vPortExitCritical+0x2c>)
  4015de:	681b      	ldr	r3, [r3, #0]
  4015e0:	b953      	cbnz	r3, 4015f8 <vPortExitCritical+0x1c>
  4015e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015e6:	b672      	cpsid	i
  4015e8:	f383 8811 	msr	BASEPRI, r3
  4015ec:	f3bf 8f6f 	isb	sy
  4015f0:	f3bf 8f4f 	dsb	sy
  4015f4:	b662      	cpsie	i
  4015f6:	e7fe      	b.n	4015f6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4015f8:	3b01      	subs	r3, #1
  4015fa:	4a03      	ldr	r2, [pc, #12]	; (401608 <vPortExitCritical+0x2c>)
  4015fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4015fe:	b90b      	cbnz	r3, 401604 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401600:	f383 8811 	msr	BASEPRI, r3
  401604:	4770      	bx	lr
  401606:	bf00      	nop
  401608:	20400020 	.word	0x20400020

0040160c <PendSV_Handler>:
	__asm volatile
  40160c:	f3ef 8009 	mrs	r0, PSP
  401610:	f3bf 8f6f 	isb	sy
  401614:	4b15      	ldr	r3, [pc, #84]	; (40166c <pxCurrentTCBConst>)
  401616:	681a      	ldr	r2, [r3, #0]
  401618:	f01e 0f10 	tst.w	lr, #16
  40161c:	bf08      	it	eq
  40161e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401622:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401626:	6010      	str	r0, [r2, #0]
  401628:	f84d 3d04 	str.w	r3, [sp, #-4]!
  40162c:	f04f 0080 	mov.w	r0, #128	; 0x80
  401630:	b672      	cpsid	i
  401632:	f380 8811 	msr	BASEPRI, r0
  401636:	f3bf 8f4f 	dsb	sy
  40163a:	f3bf 8f6f 	isb	sy
  40163e:	b662      	cpsie	i
  401640:	f001 f846 	bl	4026d0 <vTaskSwitchContext>
  401644:	f04f 0000 	mov.w	r0, #0
  401648:	f380 8811 	msr	BASEPRI, r0
  40164c:	bc08      	pop	{r3}
  40164e:	6819      	ldr	r1, [r3, #0]
  401650:	6808      	ldr	r0, [r1, #0]
  401652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401656:	f01e 0f10 	tst.w	lr, #16
  40165a:	bf08      	it	eq
  40165c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401660:	f380 8809 	msr	PSP, r0
  401664:	f3bf 8f6f 	isb	sy
  401668:	4770      	bx	lr
  40166a:	bf00      	nop

0040166c <pxCurrentTCBConst>:
  40166c:	20400c74 	.word	0x20400c74
  401670:	4770      	bx	lr
  401672:	bf00      	nop

00401674 <SysTick_Handler>:
{
  401674:	b508      	push	{r3, lr}
	__asm volatile
  401676:	f3ef 8311 	mrs	r3, BASEPRI
  40167a:	f04f 0280 	mov.w	r2, #128	; 0x80
  40167e:	b672      	cpsid	i
  401680:	f382 8811 	msr	BASEPRI, r2
  401684:	f3bf 8f6f 	isb	sy
  401688:	f3bf 8f4f 	dsb	sy
  40168c:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40168e:	4b05      	ldr	r3, [pc, #20]	; (4016a4 <SysTick_Handler+0x30>)
  401690:	4798      	blx	r3
  401692:	b118      	cbz	r0, 40169c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401698:	4b03      	ldr	r3, [pc, #12]	; (4016a8 <SysTick_Handler+0x34>)
  40169a:	601a      	str	r2, [r3, #0]
	__asm volatile
  40169c:	2300      	movs	r3, #0
  40169e:	f383 8811 	msr	BASEPRI, r3
  4016a2:	bd08      	pop	{r3, pc}
  4016a4:	004023cd 	.word	0x004023cd
  4016a8:	e000ed04 	.word	0xe000ed04

004016ac <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4016ac:	4a03      	ldr	r2, [pc, #12]	; (4016bc <vPortSetupTimerInterrupt+0x10>)
  4016ae:	4b04      	ldr	r3, [pc, #16]	; (4016c0 <vPortSetupTimerInterrupt+0x14>)
  4016b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4016b2:	2207      	movs	r2, #7
  4016b4:	3b04      	subs	r3, #4
  4016b6:	601a      	str	r2, [r3, #0]
  4016b8:	4770      	bx	lr
  4016ba:	bf00      	nop
  4016bc:	000927bf 	.word	0x000927bf
  4016c0:	e000e014 	.word	0xe000e014

004016c4 <xPortStartScheduler>:
{
  4016c4:	b500      	push	{lr}
  4016c6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4016c8:	4b25      	ldr	r3, [pc, #148]	; (401760 <xPortStartScheduler+0x9c>)
  4016ca:	781a      	ldrb	r2, [r3, #0]
  4016cc:	b2d2      	uxtb	r2, r2
  4016ce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4016d0:	22ff      	movs	r2, #255	; 0xff
  4016d2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4016d4:	781b      	ldrb	r3, [r3, #0]
  4016d6:	b2db      	uxtb	r3, r3
  4016d8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4016dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016e4:	4a1f      	ldr	r2, [pc, #124]	; (401764 <xPortStartScheduler+0xa0>)
  4016e6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4016e8:	2207      	movs	r2, #7
  4016ea:	4b1f      	ldr	r3, [pc, #124]	; (401768 <xPortStartScheduler+0xa4>)
  4016ec:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016f2:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016f6:	d010      	beq.n	40171a <xPortStartScheduler+0x56>
  4016f8:	2206      	movs	r2, #6
  4016fa:	e000      	b.n	4016fe <xPortStartScheduler+0x3a>
  4016fc:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4016fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401702:	005b      	lsls	r3, r3, #1
  401704:	b2db      	uxtb	r3, r3
  401706:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40170a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40170e:	1e51      	subs	r1, r2, #1
  401710:	f013 0f80 	tst.w	r3, #128	; 0x80
  401714:	d1f2      	bne.n	4016fc <xPortStartScheduler+0x38>
  401716:	4b14      	ldr	r3, [pc, #80]	; (401768 <xPortStartScheduler+0xa4>)
  401718:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40171a:	4a13      	ldr	r2, [pc, #76]	; (401768 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  40171c:	6813      	ldr	r3, [r2, #0]
  40171e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401724:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401726:	9b01      	ldr	r3, [sp, #4]
  401728:	b2db      	uxtb	r3, r3
  40172a:	4a0d      	ldr	r2, [pc, #52]	; (401760 <xPortStartScheduler+0x9c>)
  40172c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40172e:	4b0f      	ldr	r3, [pc, #60]	; (40176c <xPortStartScheduler+0xa8>)
  401730:	681a      	ldr	r2, [r3, #0]
  401732:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401736:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401738:	681a      	ldr	r2, [r3, #0]
  40173a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40173e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401740:	4b0b      	ldr	r3, [pc, #44]	; (401770 <xPortStartScheduler+0xac>)
  401742:	4798      	blx	r3
	uxCriticalNesting = 0;
  401744:	2200      	movs	r2, #0
  401746:	4b0b      	ldr	r3, [pc, #44]	; (401774 <xPortStartScheduler+0xb0>)
  401748:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40174a:	4b0b      	ldr	r3, [pc, #44]	; (401778 <xPortStartScheduler+0xb4>)
  40174c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40174e:	4a0b      	ldr	r2, [pc, #44]	; (40177c <xPortStartScheduler+0xb8>)
  401750:	6813      	ldr	r3, [r2, #0]
  401752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401756:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401758:	4b09      	ldr	r3, [pc, #36]	; (401780 <xPortStartScheduler+0xbc>)
  40175a:	4798      	blx	r3
	prvTaskExitError();
  40175c:	4b09      	ldr	r3, [pc, #36]	; (401784 <xPortStartScheduler+0xc0>)
  40175e:	4798      	blx	r3
  401760:	e000e400 	.word	0xe000e400
  401764:	20400c6c 	.word	0x20400c6c
  401768:	20400c70 	.word	0x20400c70
  40176c:	e000ed20 	.word	0xe000ed20
  401770:	004016ad 	.word	0x004016ad
  401774:	20400020 	.word	0x20400020
  401778:	00401531 	.word	0x00401531
  40177c:	e000ef34 	.word	0xe000ef34
  401780:	00401511 	.word	0x00401511
  401784:	004014d5 	.word	0x004014d5

00401788 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401788:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40178c:	2b0f      	cmp	r3, #15
  40178e:	d911      	bls.n	4017b4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401790:	4a12      	ldr	r2, [pc, #72]	; (4017dc <vPortValidateInterruptPriority+0x54>)
  401792:	5c9b      	ldrb	r3, [r3, r2]
  401794:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401796:	4a12      	ldr	r2, [pc, #72]	; (4017e0 <vPortValidateInterruptPriority+0x58>)
  401798:	7812      	ldrb	r2, [r2, #0]
  40179a:	429a      	cmp	r2, r3
  40179c:	d90a      	bls.n	4017b4 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40179e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017a2:	b672      	cpsid	i
  4017a4:	f383 8811 	msr	BASEPRI, r3
  4017a8:	f3bf 8f6f 	isb	sy
  4017ac:	f3bf 8f4f 	dsb	sy
  4017b0:	b662      	cpsie	i
  4017b2:	e7fe      	b.n	4017b2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4017b4:	4b0b      	ldr	r3, [pc, #44]	; (4017e4 <vPortValidateInterruptPriority+0x5c>)
  4017b6:	681b      	ldr	r3, [r3, #0]
  4017b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4017bc:	4a0a      	ldr	r2, [pc, #40]	; (4017e8 <vPortValidateInterruptPriority+0x60>)
  4017be:	6812      	ldr	r2, [r2, #0]
  4017c0:	4293      	cmp	r3, r2
  4017c2:	d90a      	bls.n	4017da <vPortValidateInterruptPriority+0x52>
  4017c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c8:	b672      	cpsid	i
  4017ca:	f383 8811 	msr	BASEPRI, r3
  4017ce:	f3bf 8f6f 	isb	sy
  4017d2:	f3bf 8f4f 	dsb	sy
  4017d6:	b662      	cpsie	i
  4017d8:	e7fe      	b.n	4017d8 <vPortValidateInterruptPriority+0x50>
  4017da:	4770      	bx	lr
  4017dc:	e000e3f0 	.word	0xe000e3f0
  4017e0:	20400c6c 	.word	0x20400c6c
  4017e4:	e000ed0c 	.word	0xe000ed0c
  4017e8:	20400c70 	.word	0x20400c70

004017ec <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4017ec:	b510      	push	{r4, lr}
  4017ee:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4017f0:	4b06      	ldr	r3, [pc, #24]	; (40180c <pvPortMalloc+0x20>)
  4017f2:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4017f4:	4620      	mov	r0, r4
  4017f6:	4b06      	ldr	r3, [pc, #24]	; (401810 <pvPortMalloc+0x24>)
  4017f8:	4798      	blx	r3
  4017fa:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4017fc:	4b05      	ldr	r3, [pc, #20]	; (401814 <pvPortMalloc+0x28>)
  4017fe:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401800:	b10c      	cbz	r4, 401806 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401802:	4620      	mov	r0, r4
  401804:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401806:	4b04      	ldr	r3, [pc, #16]	; (401818 <pvPortMalloc+0x2c>)
  401808:	4798      	blx	r3
	return pvReturn;
  40180a:	e7fa      	b.n	401802 <pvPortMalloc+0x16>
  40180c:	004023b1 	.word	0x004023b1
  401810:	00403bb9 	.word	0x00403bb9
  401814:	00402519 	.word	0x00402519
  401818:	00403247 	.word	0x00403247

0040181c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  40181c:	b148      	cbz	r0, 401832 <vPortFree+0x16>
{
  40181e:	b510      	push	{r4, lr}
  401820:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401822:	4b04      	ldr	r3, [pc, #16]	; (401834 <vPortFree+0x18>)
  401824:	4798      	blx	r3
		{
			free( pv );
  401826:	4620      	mov	r0, r4
  401828:	4b03      	ldr	r3, [pc, #12]	; (401838 <vPortFree+0x1c>)
  40182a:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  40182c:	4b03      	ldr	r3, [pc, #12]	; (40183c <vPortFree+0x20>)
  40182e:	4798      	blx	r3
  401830:	bd10      	pop	{r4, pc}
  401832:	4770      	bx	lr
  401834:	004023b1 	.word	0x004023b1
  401838:	00403bc9 	.word	0x00403bc9
  40183c:	00402519 	.word	0x00402519

00401840 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401840:	b538      	push	{r3, r4, r5, lr}
  401842:	4604      	mov	r4, r0
  401844:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401846:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401848:	b95a      	cbnz	r2, 401862 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40184a:	6803      	ldr	r3, [r0, #0]
  40184c:	2b00      	cmp	r3, #0
  40184e:	d12e      	bne.n	4018ae <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401850:	6840      	ldr	r0, [r0, #4]
  401852:	4b1b      	ldr	r3, [pc, #108]	; (4018c0 <prvCopyDataToQueue+0x80>)
  401854:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401856:	2300      	movs	r3, #0
  401858:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40185a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40185c:	3301      	adds	r3, #1
  40185e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401860:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401862:	b96d      	cbnz	r5, 401880 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401864:	6880      	ldr	r0, [r0, #8]
  401866:	4b17      	ldr	r3, [pc, #92]	; (4018c4 <prvCopyDataToQueue+0x84>)
  401868:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40186a:	68a3      	ldr	r3, [r4, #8]
  40186c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40186e:	4413      	add	r3, r2
  401870:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401872:	6862      	ldr	r2, [r4, #4]
  401874:	4293      	cmp	r3, r2
  401876:	d31c      	bcc.n	4018b2 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401878:	6823      	ldr	r3, [r4, #0]
  40187a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40187c:	2000      	movs	r0, #0
  40187e:	e7ec      	b.n	40185a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401880:	68c0      	ldr	r0, [r0, #12]
  401882:	4b10      	ldr	r3, [pc, #64]	; (4018c4 <prvCopyDataToQueue+0x84>)
  401884:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401886:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401888:	425b      	negs	r3, r3
  40188a:	68e2      	ldr	r2, [r4, #12]
  40188c:	441a      	add	r2, r3
  40188e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401890:	6821      	ldr	r1, [r4, #0]
  401892:	428a      	cmp	r2, r1
  401894:	d202      	bcs.n	40189c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401896:	6862      	ldr	r2, [r4, #4]
  401898:	4413      	add	r3, r2
  40189a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  40189c:	2d02      	cmp	r5, #2
  40189e:	d10a      	bne.n	4018b6 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4018a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018a2:	b153      	cbz	r3, 4018ba <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4018a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018a6:	3b01      	subs	r3, #1
  4018a8:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4018aa:	2000      	movs	r0, #0
  4018ac:	e7d5      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018ae:	2000      	movs	r0, #0
  4018b0:	e7d3      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018b2:	2000      	movs	r0, #0
  4018b4:	e7d1      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018b6:	2000      	movs	r0, #0
  4018b8:	e7cf      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018ba:	2000      	movs	r0, #0
  4018bc:	e7cd      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018be:	bf00      	nop
  4018c0:	00402ad1 	.word	0x00402ad1
  4018c4:	00404139 	.word	0x00404139

004018c8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4018c8:	b530      	push	{r4, r5, lr}
  4018ca:	b083      	sub	sp, #12
  4018cc:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4018ce:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4018d0:	b174      	cbz	r4, 4018f0 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4018d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018d6:	429a      	cmp	r2, r3
  4018d8:	d315      	bcc.n	401906 <prvNotifyQueueSetContainer+0x3e>
  4018da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018de:	b672      	cpsid	i
  4018e0:	f383 8811 	msr	BASEPRI, r3
  4018e4:	f3bf 8f6f 	isb	sy
  4018e8:	f3bf 8f4f 	dsb	sy
  4018ec:	b662      	cpsie	i
  4018ee:	e7fe      	b.n	4018ee <prvNotifyQueueSetContainer+0x26>
  4018f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018f4:	b672      	cpsid	i
  4018f6:	f383 8811 	msr	BASEPRI, r3
  4018fa:	f3bf 8f6f 	isb	sy
  4018fe:	f3bf 8f4f 	dsb	sy
  401902:	b662      	cpsie	i
  401904:	e7fe      	b.n	401904 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401908:	4293      	cmp	r3, r2
  40190a:	d803      	bhi.n	401914 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  40190c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40190e:	4628      	mov	r0, r5
  401910:	b003      	add	sp, #12
  401912:	bd30      	pop	{r4, r5, pc}
  401914:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401916:	a901      	add	r1, sp, #4
  401918:	4620      	mov	r0, r4
  40191a:	4b0b      	ldr	r3, [pc, #44]	; (401948 <prvNotifyQueueSetContainer+0x80>)
  40191c:	4798      	blx	r3
  40191e:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401920:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401922:	f1b3 3fff 	cmp.w	r3, #4294967295
  401926:	d10a      	bne.n	40193e <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401928:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40192a:	2b00      	cmp	r3, #0
  40192c:	d0ef      	beq.n	40190e <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40192e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401932:	4b06      	ldr	r3, [pc, #24]	; (40194c <prvNotifyQueueSetContainer+0x84>)
  401934:	4798      	blx	r3
  401936:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401938:	bf18      	it	ne
  40193a:	2501      	movne	r5, #1
  40193c:	e7e7      	b.n	40190e <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40193e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401940:	3301      	adds	r3, #1
  401942:	64a3      	str	r3, [r4, #72]	; 0x48
  401944:	e7e3      	b.n	40190e <prvNotifyQueueSetContainer+0x46>
  401946:	bf00      	nop
  401948:	00401841 	.word	0x00401841
  40194c:	004028a5 	.word	0x004028a5

00401950 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401950:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401952:	b172      	cbz	r2, 401972 <prvCopyDataFromQueue+0x22>
{
  401954:	b510      	push	{r4, lr}
  401956:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401958:	68c4      	ldr	r4, [r0, #12]
  40195a:	4414      	add	r4, r2
  40195c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40195e:	6840      	ldr	r0, [r0, #4]
  401960:	4284      	cmp	r4, r0
  401962:	d301      	bcc.n	401968 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401964:	6818      	ldr	r0, [r3, #0]
  401966:	60d8      	str	r0, [r3, #12]
  401968:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40196a:	68d9      	ldr	r1, [r3, #12]
  40196c:	4b01      	ldr	r3, [pc, #4]	; (401974 <prvCopyDataFromQueue+0x24>)
  40196e:	4798      	blx	r3
  401970:	bd10      	pop	{r4, pc}
  401972:	4770      	bx	lr
  401974:	00404139 	.word	0x00404139

00401978 <prvUnlockQueue>:
{
  401978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40197a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40197c:	4b22      	ldr	r3, [pc, #136]	; (401a08 <prvUnlockQueue+0x90>)
  40197e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401980:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401982:	2b00      	cmp	r3, #0
  401984:	dd1b      	ble.n	4019be <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401986:	4d21      	ldr	r5, [pc, #132]	; (401a0c <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401988:	4f21      	ldr	r7, [pc, #132]	; (401a10 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40198a:	4e22      	ldr	r6, [pc, #136]	; (401a14 <prvUnlockQueue+0x9c>)
  40198c:	e00b      	b.n	4019a6 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40198e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401990:	b1ab      	cbz	r3, 4019be <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401992:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401996:	47b0      	blx	r6
  401998:	b978      	cbnz	r0, 4019ba <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40199a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40199c:	3b01      	subs	r3, #1
  40199e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4019a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019a2:	2b00      	cmp	r3, #0
  4019a4:	dd0b      	ble.n	4019be <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4019a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019a8:	2b00      	cmp	r3, #0
  4019aa:	d0f0      	beq.n	40198e <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4019ac:	2100      	movs	r1, #0
  4019ae:	4620      	mov	r0, r4
  4019b0:	47a8      	blx	r5
  4019b2:	2801      	cmp	r0, #1
  4019b4:	d1f1      	bne.n	40199a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4019b6:	47b8      	blx	r7
  4019b8:	e7ef      	b.n	40199a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4019ba:	47b8      	blx	r7
  4019bc:	e7ed      	b.n	40199a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4019be:	f04f 33ff 	mov.w	r3, #4294967295
  4019c2:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4019c4:	4b14      	ldr	r3, [pc, #80]	; (401a18 <prvUnlockQueue+0xa0>)
  4019c6:	4798      	blx	r3
	taskENTER_CRITICAL();
  4019c8:	4b0f      	ldr	r3, [pc, #60]	; (401a08 <prvUnlockQueue+0x90>)
  4019ca:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019ce:	2b00      	cmp	r3, #0
  4019d0:	dd14      	ble.n	4019fc <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019d2:	6923      	ldr	r3, [r4, #16]
  4019d4:	b193      	cbz	r3, 4019fc <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019d6:	f104 0610 	add.w	r6, r4, #16
  4019da:	4d0e      	ldr	r5, [pc, #56]	; (401a14 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4019dc:	4f0c      	ldr	r7, [pc, #48]	; (401a10 <prvUnlockQueue+0x98>)
  4019de:	e007      	b.n	4019f0 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4019e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019e2:	3b01      	subs	r3, #1
  4019e4:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019e8:	2b00      	cmp	r3, #0
  4019ea:	dd07      	ble.n	4019fc <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019ec:	6923      	ldr	r3, [r4, #16]
  4019ee:	b12b      	cbz	r3, 4019fc <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019f0:	4630      	mov	r0, r6
  4019f2:	47a8      	blx	r5
  4019f4:	2800      	cmp	r0, #0
  4019f6:	d0f3      	beq.n	4019e0 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4019f8:	47b8      	blx	r7
  4019fa:	e7f1      	b.n	4019e0 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4019fc:	f04f 33ff 	mov.w	r3, #4294967295
  401a00:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401a02:	4b05      	ldr	r3, [pc, #20]	; (401a18 <prvUnlockQueue+0xa0>)
  401a04:	4798      	blx	r3
  401a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a08:	00401591 	.word	0x00401591
  401a0c:	004018c9 	.word	0x004018c9
  401a10:	00402a01 	.word	0x00402a01
  401a14:	004028a5 	.word	0x004028a5
  401a18:	004015dd 	.word	0x004015dd

00401a1c <xQueueGenericReset>:
{
  401a1c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401a1e:	b308      	cbz	r0, 401a64 <xQueueGenericReset+0x48>
  401a20:	4604      	mov	r4, r0
  401a22:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401a24:	4b1d      	ldr	r3, [pc, #116]	; (401a9c <xQueueGenericReset+0x80>)
  401a26:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401a28:	6822      	ldr	r2, [r4, #0]
  401a2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401a2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a2e:	fb03 f301 	mul.w	r3, r3, r1
  401a32:	18d0      	adds	r0, r2, r3
  401a34:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401a36:	2000      	movs	r0, #0
  401a38:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401a3a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401a3c:	1a5b      	subs	r3, r3, r1
  401a3e:	4413      	add	r3, r2
  401a40:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401a42:	f04f 33ff 	mov.w	r3, #4294967295
  401a46:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401a48:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401a4a:	b9fd      	cbnz	r5, 401a8c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a4c:	6923      	ldr	r3, [r4, #16]
  401a4e:	b12b      	cbz	r3, 401a5c <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401a50:	f104 0010 	add.w	r0, r4, #16
  401a54:	4b12      	ldr	r3, [pc, #72]	; (401aa0 <xQueueGenericReset+0x84>)
  401a56:	4798      	blx	r3
  401a58:	2801      	cmp	r0, #1
  401a5a:	d00e      	beq.n	401a7a <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401a5c:	4b11      	ldr	r3, [pc, #68]	; (401aa4 <xQueueGenericReset+0x88>)
  401a5e:	4798      	blx	r3
}
  401a60:	2001      	movs	r0, #1
  401a62:	bd38      	pop	{r3, r4, r5, pc}
  401a64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a68:	b672      	cpsid	i
  401a6a:	f383 8811 	msr	BASEPRI, r3
  401a6e:	f3bf 8f6f 	isb	sy
  401a72:	f3bf 8f4f 	dsb	sy
  401a76:	b662      	cpsie	i
  401a78:	e7fe      	b.n	401a78 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a7e:	4b0a      	ldr	r3, [pc, #40]	; (401aa8 <xQueueGenericReset+0x8c>)
  401a80:	601a      	str	r2, [r3, #0]
  401a82:	f3bf 8f4f 	dsb	sy
  401a86:	f3bf 8f6f 	isb	sy
  401a8a:	e7e7      	b.n	401a5c <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401a8c:	f104 0010 	add.w	r0, r4, #16
  401a90:	4d06      	ldr	r5, [pc, #24]	; (401aac <xQueueGenericReset+0x90>)
  401a92:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401a94:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a98:	47a8      	blx	r5
  401a9a:	e7df      	b.n	401a5c <xQueueGenericReset+0x40>
  401a9c:	00401591 	.word	0x00401591
  401aa0:	004028a5 	.word	0x004028a5
  401aa4:	004015dd 	.word	0x004015dd
  401aa8:	e000ed04 	.word	0xe000ed04
  401aac:	00401445 	.word	0x00401445

00401ab0 <xQueueGenericCreate>:
{
  401ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401ab2:	b950      	cbnz	r0, 401aca <xQueueGenericCreate+0x1a>
  401ab4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab8:	b672      	cpsid	i
  401aba:	f383 8811 	msr	BASEPRI, r3
  401abe:	f3bf 8f6f 	isb	sy
  401ac2:	f3bf 8f4f 	dsb	sy
  401ac6:	b662      	cpsie	i
  401ac8:	e7fe      	b.n	401ac8 <xQueueGenericCreate+0x18>
  401aca:	4606      	mov	r6, r0
  401acc:	4617      	mov	r7, r2
  401ace:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401ad0:	b189      	cbz	r1, 401af6 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ad2:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401ad6:	3059      	adds	r0, #89	; 0x59
  401ad8:	4b12      	ldr	r3, [pc, #72]	; (401b24 <xQueueGenericCreate+0x74>)
  401ada:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401adc:	4604      	mov	r4, r0
  401ade:	b9e8      	cbnz	r0, 401b1c <xQueueGenericCreate+0x6c>
  401ae0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ae4:	b672      	cpsid	i
  401ae6:	f383 8811 	msr	BASEPRI, r3
  401aea:	f3bf 8f6f 	isb	sy
  401aee:	f3bf 8f4f 	dsb	sy
  401af2:	b662      	cpsie	i
  401af4:	e7fe      	b.n	401af4 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401af6:	2058      	movs	r0, #88	; 0x58
  401af8:	4b0a      	ldr	r3, [pc, #40]	; (401b24 <xQueueGenericCreate+0x74>)
  401afa:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401afc:	4604      	mov	r4, r0
  401afe:	2800      	cmp	r0, #0
  401b00:	d0ee      	beq.n	401ae0 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401b02:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401b04:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401b06:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401b08:	2101      	movs	r1, #1
  401b0a:	4620      	mov	r0, r4
  401b0c:	4b06      	ldr	r3, [pc, #24]	; (401b28 <xQueueGenericCreate+0x78>)
  401b0e:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401b10:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401b14:	2300      	movs	r3, #0
  401b16:	6563      	str	r3, [r4, #84]	; 0x54
}
  401b18:	4620      	mov	r0, r4
  401b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401b1c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401b20:	6003      	str	r3, [r0, #0]
  401b22:	e7ef      	b.n	401b04 <xQueueGenericCreate+0x54>
  401b24:	004017ed 	.word	0x004017ed
  401b28:	00401a1d 	.word	0x00401a1d

00401b2c <xQueueGenericSend>:
{
  401b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b30:	b085      	sub	sp, #20
  401b32:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b34:	b1b8      	cbz	r0, 401b66 <xQueueGenericSend+0x3a>
  401b36:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b38:	b301      	cbz	r1, 401b7c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b3a:	2b02      	cmp	r3, #2
  401b3c:	d02c      	beq.n	401b98 <xQueueGenericSend+0x6c>
  401b3e:	461d      	mov	r5, r3
  401b40:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b42:	4b66      	ldr	r3, [pc, #408]	; (401cdc <xQueueGenericSend+0x1b0>)
  401b44:	4798      	blx	r3
  401b46:	2800      	cmp	r0, #0
  401b48:	d134      	bne.n	401bb4 <xQueueGenericSend+0x88>
  401b4a:	9b01      	ldr	r3, [sp, #4]
  401b4c:	2b00      	cmp	r3, #0
  401b4e:	d038      	beq.n	401bc2 <xQueueGenericSend+0x96>
  401b50:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b54:	b672      	cpsid	i
  401b56:	f383 8811 	msr	BASEPRI, r3
  401b5a:	f3bf 8f6f 	isb	sy
  401b5e:	f3bf 8f4f 	dsb	sy
  401b62:	b662      	cpsie	i
  401b64:	e7fe      	b.n	401b64 <xQueueGenericSend+0x38>
  401b66:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b6a:	b672      	cpsid	i
  401b6c:	f383 8811 	msr	BASEPRI, r3
  401b70:	f3bf 8f6f 	isb	sy
  401b74:	f3bf 8f4f 	dsb	sy
  401b78:	b662      	cpsie	i
  401b7a:	e7fe      	b.n	401b7a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b7e:	2a00      	cmp	r2, #0
  401b80:	d0db      	beq.n	401b3a <xQueueGenericSend+0xe>
  401b82:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b86:	b672      	cpsid	i
  401b88:	f383 8811 	msr	BASEPRI, r3
  401b8c:	f3bf 8f6f 	isb	sy
  401b90:	f3bf 8f4f 	dsb	sy
  401b94:	b662      	cpsie	i
  401b96:	e7fe      	b.n	401b96 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401b9a:	2a01      	cmp	r2, #1
  401b9c:	d0cf      	beq.n	401b3e <xQueueGenericSend+0x12>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <xQueueGenericSend+0x86>
  401bb4:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401bb6:	4e4a      	ldr	r6, [pc, #296]	; (401ce0 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401bb8:	f8df a150 	ldr.w	sl, [pc, #336]	; 401d0c <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401bbc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401cec <xQueueGenericSend+0x1c0>
  401bc0:	e042      	b.n	401c48 <xQueueGenericSend+0x11c>
  401bc2:	2700      	movs	r7, #0
  401bc4:	e7f7      	b.n	401bb6 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401bc6:	462a      	mov	r2, r5
  401bc8:	4641      	mov	r1, r8
  401bca:	4620      	mov	r0, r4
  401bcc:	4b45      	ldr	r3, [pc, #276]	; (401ce4 <xQueueGenericSend+0x1b8>)
  401bce:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401bd2:	b19b      	cbz	r3, 401bfc <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401bd4:	4629      	mov	r1, r5
  401bd6:	4620      	mov	r0, r4
  401bd8:	4b43      	ldr	r3, [pc, #268]	; (401ce8 <xQueueGenericSend+0x1bc>)
  401bda:	4798      	blx	r3
  401bdc:	2801      	cmp	r0, #1
  401bde:	d107      	bne.n	401bf0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401be4:	4b41      	ldr	r3, [pc, #260]	; (401cec <xQueueGenericSend+0x1c0>)
  401be6:	601a      	str	r2, [r3, #0]
  401be8:	f3bf 8f4f 	dsb	sy
  401bec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bf0:	4b3f      	ldr	r3, [pc, #252]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401bf2:	4798      	blx	r3
				return pdPASS;
  401bf4:	2001      	movs	r0, #1
}
  401bf6:	b005      	add	sp, #20
  401bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bfe:	b173      	cbz	r3, 401c1e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401c00:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c04:	4b3b      	ldr	r3, [pc, #236]	; (401cf4 <xQueueGenericSend+0x1c8>)
  401c06:	4798      	blx	r3
  401c08:	2801      	cmp	r0, #1
  401c0a:	d1f1      	bne.n	401bf0 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c10:	4b36      	ldr	r3, [pc, #216]	; (401cec <xQueueGenericSend+0x1c0>)
  401c12:	601a      	str	r2, [r3, #0]
  401c14:	f3bf 8f4f 	dsb	sy
  401c18:	f3bf 8f6f 	isb	sy
  401c1c:	e7e8      	b.n	401bf0 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401c1e:	2800      	cmp	r0, #0
  401c20:	d0e6      	beq.n	401bf0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c26:	4b31      	ldr	r3, [pc, #196]	; (401cec <xQueueGenericSend+0x1c0>)
  401c28:	601a      	str	r2, [r3, #0]
  401c2a:	f3bf 8f4f 	dsb	sy
  401c2e:	f3bf 8f6f 	isb	sy
  401c32:	e7dd      	b.n	401bf0 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401c34:	4b2e      	ldr	r3, [pc, #184]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401c36:	4798      	blx	r3
					return errQUEUE_FULL;
  401c38:	2000      	movs	r0, #0
  401c3a:	e7dc      	b.n	401bf6 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401c3c:	4620      	mov	r0, r4
  401c3e:	4b2e      	ldr	r3, [pc, #184]	; (401cf8 <xQueueGenericSend+0x1cc>)
  401c40:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c42:	4b2e      	ldr	r3, [pc, #184]	; (401cfc <xQueueGenericSend+0x1d0>)
  401c44:	4798      	blx	r3
  401c46:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401c48:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401c4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c4e:	429a      	cmp	r2, r3
  401c50:	d3b9      	bcc.n	401bc6 <xQueueGenericSend+0x9a>
  401c52:	2d02      	cmp	r5, #2
  401c54:	d0b7      	beq.n	401bc6 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c56:	9b01      	ldr	r3, [sp, #4]
  401c58:	2b00      	cmp	r3, #0
  401c5a:	d0eb      	beq.n	401c34 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401c5c:	b90f      	cbnz	r7, 401c62 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401c5e:	a802      	add	r0, sp, #8
  401c60:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401c62:	4b23      	ldr	r3, [pc, #140]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401c64:	4798      	blx	r3
		vTaskSuspendAll();
  401c66:	4b26      	ldr	r3, [pc, #152]	; (401d00 <xQueueGenericSend+0x1d4>)
  401c68:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c6a:	47b0      	blx	r6
  401c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c72:	d101      	bne.n	401c78 <xQueueGenericSend+0x14c>
  401c74:	2300      	movs	r3, #0
  401c76:	6463      	str	r3, [r4, #68]	; 0x44
  401c78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c7e:	d101      	bne.n	401c84 <xQueueGenericSend+0x158>
  401c80:	2300      	movs	r3, #0
  401c82:	64a3      	str	r3, [r4, #72]	; 0x48
  401c84:	4b1a      	ldr	r3, [pc, #104]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401c86:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c88:	a901      	add	r1, sp, #4
  401c8a:	a802      	add	r0, sp, #8
  401c8c:	4b1d      	ldr	r3, [pc, #116]	; (401d04 <xQueueGenericSend+0x1d8>)
  401c8e:	4798      	blx	r3
  401c90:	b9e0      	cbnz	r0, 401ccc <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401c92:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401c94:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401c98:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401c9a:	4b15      	ldr	r3, [pc, #84]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401c9c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401c9e:	45bb      	cmp	fp, r7
  401ca0:	d1cc      	bne.n	401c3c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401ca2:	9901      	ldr	r1, [sp, #4]
  401ca4:	f104 0010 	add.w	r0, r4, #16
  401ca8:	4b17      	ldr	r3, [pc, #92]	; (401d08 <xQueueGenericSend+0x1dc>)
  401caa:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401cac:	4620      	mov	r0, r4
  401cae:	4b12      	ldr	r3, [pc, #72]	; (401cf8 <xQueueGenericSend+0x1cc>)
  401cb0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401cb2:	4b12      	ldr	r3, [pc, #72]	; (401cfc <xQueueGenericSend+0x1d0>)
  401cb4:	4798      	blx	r3
  401cb6:	2800      	cmp	r0, #0
  401cb8:	d1c5      	bne.n	401c46 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401cba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401cbe:	f8c9 3000 	str.w	r3, [r9]
  401cc2:	f3bf 8f4f 	dsb	sy
  401cc6:	f3bf 8f6f 	isb	sy
  401cca:	e7bc      	b.n	401c46 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401ccc:	4620      	mov	r0, r4
  401cce:	4b0a      	ldr	r3, [pc, #40]	; (401cf8 <xQueueGenericSend+0x1cc>)
  401cd0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401cd2:	4b0a      	ldr	r3, [pc, #40]	; (401cfc <xQueueGenericSend+0x1d0>)
  401cd4:	4798      	blx	r3
			return errQUEUE_FULL;
  401cd6:	2000      	movs	r0, #0
  401cd8:	e78d      	b.n	401bf6 <xQueueGenericSend+0xca>
  401cda:	bf00      	nop
  401cdc:	00402a0d 	.word	0x00402a0d
  401ce0:	00401591 	.word	0x00401591
  401ce4:	00401841 	.word	0x00401841
  401ce8:	004018c9 	.word	0x004018c9
  401cec:	e000ed04 	.word	0xe000ed04
  401cf0:	004015dd 	.word	0x004015dd
  401cf4:	004028a5 	.word	0x004028a5
  401cf8:	00401979 	.word	0x00401979
  401cfc:	00402519 	.word	0x00402519
  401d00:	004023b1 	.word	0x004023b1
  401d04:	0040296d 	.word	0x0040296d
  401d08:	004027a1 	.word	0x004027a1
  401d0c:	0040293d 	.word	0x0040293d

00401d10 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401d10:	2800      	cmp	r0, #0
  401d12:	d036      	beq.n	401d82 <xQueueGenericSendFromISR+0x72>
{
  401d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d18:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d1a:	2900      	cmp	r1, #0
  401d1c:	d03c      	beq.n	401d98 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401d1e:	2b02      	cmp	r3, #2
  401d20:	d048      	beq.n	401db4 <xQueueGenericSendFromISR+0xa4>
  401d22:	461e      	mov	r6, r3
  401d24:	4615      	mov	r5, r2
  401d26:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401d28:	4b35      	ldr	r3, [pc, #212]	; (401e00 <xQueueGenericSendFromISR+0xf0>)
  401d2a:	4798      	blx	r3
	__asm volatile
  401d2c:	f3ef 8711 	mrs	r7, BASEPRI
  401d30:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d34:	b672      	cpsid	i
  401d36:	f383 8811 	msr	BASEPRI, r3
  401d3a:	f3bf 8f6f 	isb	sy
  401d3e:	f3bf 8f4f 	dsb	sy
  401d42:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401d44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401d46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d48:	429a      	cmp	r2, r3
  401d4a:	d301      	bcc.n	401d50 <xQueueGenericSendFromISR+0x40>
  401d4c:	2e02      	cmp	r6, #2
  401d4e:	d14f      	bne.n	401df0 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401d50:	4632      	mov	r2, r6
  401d52:	4641      	mov	r1, r8
  401d54:	4620      	mov	r0, r4
  401d56:	4b2b      	ldr	r3, [pc, #172]	; (401e04 <xQueueGenericSendFromISR+0xf4>)
  401d58:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401d5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d60:	d141      	bne.n	401de6 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401d62:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401d64:	2b00      	cmp	r3, #0
  401d66:	d033      	beq.n	401dd0 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401d68:	4631      	mov	r1, r6
  401d6a:	4620      	mov	r0, r4
  401d6c:	4b26      	ldr	r3, [pc, #152]	; (401e08 <xQueueGenericSendFromISR+0xf8>)
  401d6e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401d70:	2d00      	cmp	r5, #0
  401d72:	d03f      	beq.n	401df4 <xQueueGenericSendFromISR+0xe4>
  401d74:	2801      	cmp	r0, #1
  401d76:	d13d      	bne.n	401df4 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401d78:	6028      	str	r0, [r5, #0]
	__asm volatile
  401d7a:	f387 8811 	msr	BASEPRI, r7
}
  401d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401d82:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d86:	b672      	cpsid	i
  401d88:	f383 8811 	msr	BASEPRI, r3
  401d8c:	f3bf 8f6f 	isb	sy
  401d90:	f3bf 8f4f 	dsb	sy
  401d94:	b662      	cpsie	i
  401d96:	e7fe      	b.n	401d96 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d98:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401d9a:	2800      	cmp	r0, #0
  401d9c:	d0bf      	beq.n	401d1e <xQueueGenericSendFromISR+0xe>
  401d9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401da2:	b672      	cpsid	i
  401da4:	f383 8811 	msr	BASEPRI, r3
  401da8:	f3bf 8f6f 	isb	sy
  401dac:	f3bf 8f4f 	dsb	sy
  401db0:	b662      	cpsie	i
  401db2:	e7fe      	b.n	401db2 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401db4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401db6:	2801      	cmp	r0, #1
  401db8:	d0b3      	beq.n	401d22 <xQueueGenericSendFromISR+0x12>
  401dba:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dbe:	b672      	cpsid	i
  401dc0:	f383 8811 	msr	BASEPRI, r3
  401dc4:	f3bf 8f6f 	isb	sy
  401dc8:	f3bf 8f4f 	dsb	sy
  401dcc:	b662      	cpsie	i
  401dce:	e7fe      	b.n	401dce <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401dd2:	b18b      	cbz	r3, 401df8 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401dd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401dd8:	4b0c      	ldr	r3, [pc, #48]	; (401e0c <xQueueGenericSendFromISR+0xfc>)
  401dda:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401ddc:	b175      	cbz	r5, 401dfc <xQueueGenericSendFromISR+0xec>
  401dde:	b168      	cbz	r0, 401dfc <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401de0:	2001      	movs	r0, #1
  401de2:	6028      	str	r0, [r5, #0]
  401de4:	e7c9      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401de6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401de8:	3301      	adds	r3, #1
  401dea:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401dec:	2001      	movs	r0, #1
  401dee:	e7c4      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401df0:	2000      	movs	r0, #0
  401df2:	e7c2      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401df4:	2001      	movs	r0, #1
  401df6:	e7c0      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
  401df8:	2001      	movs	r0, #1
  401dfa:	e7be      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
  401dfc:	2001      	movs	r0, #1
  401dfe:	e7bc      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
  401e00:	00401789 	.word	0x00401789
  401e04:	00401841 	.word	0x00401841
  401e08:	004018c9 	.word	0x004018c9
  401e0c:	004028a5 	.word	0x004028a5

00401e10 <xQueueGenericReceive>:
{
  401e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e14:	b084      	sub	sp, #16
  401e16:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401e18:	b198      	cbz	r0, 401e42 <xQueueGenericReceive+0x32>
  401e1a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e1c:	b1e1      	cbz	r1, 401e58 <xQueueGenericReceive+0x48>
  401e1e:	4698      	mov	r8, r3
  401e20:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401e22:	4b61      	ldr	r3, [pc, #388]	; (401fa8 <xQueueGenericReceive+0x198>)
  401e24:	4798      	blx	r3
  401e26:	bb28      	cbnz	r0, 401e74 <xQueueGenericReceive+0x64>
  401e28:	9b01      	ldr	r3, [sp, #4]
  401e2a:	b353      	cbz	r3, 401e82 <xQueueGenericReceive+0x72>
  401e2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e30:	b672      	cpsid	i
  401e32:	f383 8811 	msr	BASEPRI, r3
  401e36:	f3bf 8f6f 	isb	sy
  401e3a:	f3bf 8f4f 	dsb	sy
  401e3e:	b662      	cpsie	i
  401e40:	e7fe      	b.n	401e40 <xQueueGenericReceive+0x30>
  401e42:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e46:	b672      	cpsid	i
  401e48:	f383 8811 	msr	BASEPRI, r3
  401e4c:	f3bf 8f6f 	isb	sy
  401e50:	f3bf 8f4f 	dsb	sy
  401e54:	b662      	cpsie	i
  401e56:	e7fe      	b.n	401e56 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e58:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401e5a:	2a00      	cmp	r2, #0
  401e5c:	d0df      	beq.n	401e1e <xQueueGenericReceive+0xe>
  401e5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e62:	b672      	cpsid	i
  401e64:	f383 8811 	msr	BASEPRI, r3
  401e68:	f3bf 8f6f 	isb	sy
  401e6c:	f3bf 8f4f 	dsb	sy
  401e70:	b662      	cpsie	i
  401e72:	e7fe      	b.n	401e72 <xQueueGenericReceive+0x62>
  401e74:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401e76:	4d4d      	ldr	r5, [pc, #308]	; (401fac <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401e78:	f8df a160 	ldr.w	sl, [pc, #352]	; 401fdc <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401e7c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401fbc <xQueueGenericReceive+0x1ac>
  401e80:	e04b      	b.n	401f1a <xQueueGenericReceive+0x10a>
  401e82:	2600      	movs	r6, #0
  401e84:	e7f7      	b.n	401e76 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401e86:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401e88:	4639      	mov	r1, r7
  401e8a:	4620      	mov	r0, r4
  401e8c:	4b48      	ldr	r3, [pc, #288]	; (401fb0 <xQueueGenericReceive+0x1a0>)
  401e8e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401e90:	f1b8 0f00 	cmp.w	r8, #0
  401e94:	d11d      	bne.n	401ed2 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e98:	3b01      	subs	r3, #1
  401e9a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401e9c:	6823      	ldr	r3, [r4, #0]
  401e9e:	b913      	cbnz	r3, 401ea6 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401ea0:	4b44      	ldr	r3, [pc, #272]	; (401fb4 <xQueueGenericReceive+0x1a4>)
  401ea2:	4798      	blx	r3
  401ea4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ea6:	6923      	ldr	r3, [r4, #16]
  401ea8:	b16b      	cbz	r3, 401ec6 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401eaa:	f104 0010 	add.w	r0, r4, #16
  401eae:	4b42      	ldr	r3, [pc, #264]	; (401fb8 <xQueueGenericReceive+0x1a8>)
  401eb0:	4798      	blx	r3
  401eb2:	2801      	cmp	r0, #1
  401eb4:	d107      	bne.n	401ec6 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401eba:	4b40      	ldr	r3, [pc, #256]	; (401fbc <xQueueGenericReceive+0x1ac>)
  401ebc:	601a      	str	r2, [r3, #0]
  401ebe:	f3bf 8f4f 	dsb	sy
  401ec2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401ec6:	4b3e      	ldr	r3, [pc, #248]	; (401fc0 <xQueueGenericReceive+0x1b0>)
  401ec8:	4798      	blx	r3
				return pdPASS;
  401eca:	2001      	movs	r0, #1
}
  401ecc:	b004      	add	sp, #16
  401ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401ed2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ed6:	2b00      	cmp	r3, #0
  401ed8:	d0f5      	beq.n	401ec6 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401eda:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ede:	4b36      	ldr	r3, [pc, #216]	; (401fb8 <xQueueGenericReceive+0x1a8>)
  401ee0:	4798      	blx	r3
  401ee2:	2800      	cmp	r0, #0
  401ee4:	d0ef      	beq.n	401ec6 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401eea:	4b34      	ldr	r3, [pc, #208]	; (401fbc <xQueueGenericReceive+0x1ac>)
  401eec:	601a      	str	r2, [r3, #0]
  401eee:	f3bf 8f4f 	dsb	sy
  401ef2:	f3bf 8f6f 	isb	sy
  401ef6:	e7e6      	b.n	401ec6 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401ef8:	4b31      	ldr	r3, [pc, #196]	; (401fc0 <xQueueGenericReceive+0x1b0>)
  401efa:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401efc:	2000      	movs	r0, #0
  401efe:	e7e5      	b.n	401ecc <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401f00:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401f02:	6860      	ldr	r0, [r4, #4]
  401f04:	4b2f      	ldr	r3, [pc, #188]	; (401fc4 <xQueueGenericReceive+0x1b4>)
  401f06:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401f08:	4b2d      	ldr	r3, [pc, #180]	; (401fc0 <xQueueGenericReceive+0x1b0>)
  401f0a:	4798      	blx	r3
  401f0c:	e030      	b.n	401f70 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401f0e:	4620      	mov	r0, r4
  401f10:	4b2d      	ldr	r3, [pc, #180]	; (401fc8 <xQueueGenericReceive+0x1b8>)
  401f12:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401f14:	4b2d      	ldr	r3, [pc, #180]	; (401fcc <xQueueGenericReceive+0x1bc>)
  401f16:	4798      	blx	r3
  401f18:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401f1a:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401f1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f1e:	2b00      	cmp	r3, #0
  401f20:	d1b1      	bne.n	401e86 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401f22:	9b01      	ldr	r3, [sp, #4]
  401f24:	2b00      	cmp	r3, #0
  401f26:	d0e7      	beq.n	401ef8 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401f28:	b90e      	cbnz	r6, 401f2e <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401f2a:	a802      	add	r0, sp, #8
  401f2c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401f2e:	4b24      	ldr	r3, [pc, #144]	; (401fc0 <xQueueGenericReceive+0x1b0>)
  401f30:	4798      	blx	r3
		vTaskSuspendAll();
  401f32:	4b27      	ldr	r3, [pc, #156]	; (401fd0 <xQueueGenericReceive+0x1c0>)
  401f34:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401f36:	47a8      	blx	r5
  401f38:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f3e:	d101      	bne.n	401f44 <xQueueGenericReceive+0x134>
  401f40:	2300      	movs	r3, #0
  401f42:	6463      	str	r3, [r4, #68]	; 0x44
  401f44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401f46:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f4a:	d101      	bne.n	401f50 <xQueueGenericReceive+0x140>
  401f4c:	2300      	movs	r3, #0
  401f4e:	64a3      	str	r3, [r4, #72]	; 0x48
  401f50:	4b1b      	ldr	r3, [pc, #108]	; (401fc0 <xQueueGenericReceive+0x1b0>)
  401f52:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401f54:	a901      	add	r1, sp, #4
  401f56:	a802      	add	r0, sp, #8
  401f58:	4b1e      	ldr	r3, [pc, #120]	; (401fd4 <xQueueGenericReceive+0x1c4>)
  401f5a:	4798      	blx	r3
  401f5c:	b9e8      	cbnz	r0, 401f9a <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401f5e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401f60:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401f62:	4b17      	ldr	r3, [pc, #92]	; (401fc0 <xQueueGenericReceive+0x1b0>)
  401f64:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401f66:	2e00      	cmp	r6, #0
  401f68:	d1d1      	bne.n	401f0e <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401f6a:	6823      	ldr	r3, [r4, #0]
  401f6c:	2b00      	cmp	r3, #0
  401f6e:	d0c7      	beq.n	401f00 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401f70:	9901      	ldr	r1, [sp, #4]
  401f72:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f76:	4b18      	ldr	r3, [pc, #96]	; (401fd8 <xQueueGenericReceive+0x1c8>)
  401f78:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401f7a:	4620      	mov	r0, r4
  401f7c:	4b12      	ldr	r3, [pc, #72]	; (401fc8 <xQueueGenericReceive+0x1b8>)
  401f7e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401f80:	4b12      	ldr	r3, [pc, #72]	; (401fcc <xQueueGenericReceive+0x1bc>)
  401f82:	4798      	blx	r3
  401f84:	2800      	cmp	r0, #0
  401f86:	d1c7      	bne.n	401f18 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401f88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401f8c:	f8c9 3000 	str.w	r3, [r9]
  401f90:	f3bf 8f4f 	dsb	sy
  401f94:	f3bf 8f6f 	isb	sy
  401f98:	e7be      	b.n	401f18 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401f9a:	4620      	mov	r0, r4
  401f9c:	4b0a      	ldr	r3, [pc, #40]	; (401fc8 <xQueueGenericReceive+0x1b8>)
  401f9e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401fa0:	4b0a      	ldr	r3, [pc, #40]	; (401fcc <xQueueGenericReceive+0x1bc>)
  401fa2:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401fa4:	2000      	movs	r0, #0
  401fa6:	e791      	b.n	401ecc <xQueueGenericReceive+0xbc>
  401fa8:	00402a0d 	.word	0x00402a0d
  401fac:	00401591 	.word	0x00401591
  401fb0:	00401951 	.word	0x00401951
  401fb4:	00402b8d 	.word	0x00402b8d
  401fb8:	004028a5 	.word	0x004028a5
  401fbc:	e000ed04 	.word	0xe000ed04
  401fc0:	004015dd 	.word	0x004015dd
  401fc4:	00402a2d 	.word	0x00402a2d
  401fc8:	00401979 	.word	0x00401979
  401fcc:	00402519 	.word	0x00402519
  401fd0:	004023b1 	.word	0x004023b1
  401fd4:	0040296d 	.word	0x0040296d
  401fd8:	004027a1 	.word	0x004027a1
  401fdc:	0040293d 	.word	0x0040293d

00401fe0 <vQueueAddToRegistry>:
	{
  401fe0:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401fe2:	4b0b      	ldr	r3, [pc, #44]	; (402010 <vQueueAddToRegistry+0x30>)
  401fe4:	681b      	ldr	r3, [r3, #0]
  401fe6:	b153      	cbz	r3, 401ffe <vQueueAddToRegistry+0x1e>
  401fe8:	2301      	movs	r3, #1
  401fea:	4c09      	ldr	r4, [pc, #36]	; (402010 <vQueueAddToRegistry+0x30>)
  401fec:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401ff0:	b132      	cbz	r2, 402000 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401ff2:	3301      	adds	r3, #1
  401ff4:	2b08      	cmp	r3, #8
  401ff6:	d1f9      	bne.n	401fec <vQueueAddToRegistry+0xc>
	}
  401ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ffc:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401ffe:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402000:	4a03      	ldr	r2, [pc, #12]	; (402010 <vQueueAddToRegistry+0x30>)
  402002:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402006:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40200a:	6058      	str	r0, [r3, #4]
				break;
  40200c:	e7f4      	b.n	401ff8 <vQueueAddToRegistry+0x18>
  40200e:	bf00      	nop
  402010:	20400dec 	.word	0x20400dec

00402014 <vQueueWaitForMessageRestricted>:
	{
  402014:	b570      	push	{r4, r5, r6, lr}
  402016:	4604      	mov	r4, r0
  402018:	460d      	mov	r5, r1
  40201a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  40201c:	4b0f      	ldr	r3, [pc, #60]	; (40205c <vQueueWaitForMessageRestricted+0x48>)
  40201e:	4798      	blx	r3
  402020:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402022:	f1b3 3fff 	cmp.w	r3, #4294967295
  402026:	d00b      	beq.n	402040 <vQueueWaitForMessageRestricted+0x2c>
  402028:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40202a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40202e:	d00a      	beq.n	402046 <vQueueWaitForMessageRestricted+0x32>
  402030:	4b0b      	ldr	r3, [pc, #44]	; (402060 <vQueueWaitForMessageRestricted+0x4c>)
  402032:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402036:	b14b      	cbz	r3, 40204c <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402038:	4620      	mov	r0, r4
  40203a:	4b0a      	ldr	r3, [pc, #40]	; (402064 <vQueueWaitForMessageRestricted+0x50>)
  40203c:	4798      	blx	r3
  40203e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402040:	2300      	movs	r3, #0
  402042:	6463      	str	r3, [r4, #68]	; 0x44
  402044:	e7f0      	b.n	402028 <vQueueWaitForMessageRestricted+0x14>
  402046:	2300      	movs	r3, #0
  402048:	64a3      	str	r3, [r4, #72]	; 0x48
  40204a:	e7f1      	b.n	402030 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40204c:	4632      	mov	r2, r6
  40204e:	4629      	mov	r1, r5
  402050:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402054:	4b04      	ldr	r3, [pc, #16]	; (402068 <vQueueWaitForMessageRestricted+0x54>)
  402056:	4798      	blx	r3
  402058:	e7ee      	b.n	402038 <vQueueWaitForMessageRestricted+0x24>
  40205a:	bf00      	nop
  40205c:	00401591 	.word	0x00401591
  402060:	004015dd 	.word	0x004015dd
  402064:	00401979 	.word	0x00401979
  402068:	00402825 	.word	0x00402825

0040206c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40206c:	4b08      	ldr	r3, [pc, #32]	; (402090 <prvResetNextTaskUnblockTime+0x24>)
  40206e:	681b      	ldr	r3, [r3, #0]
  402070:	681b      	ldr	r3, [r3, #0]
  402072:	b13b      	cbz	r3, 402084 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402074:	4b06      	ldr	r3, [pc, #24]	; (402090 <prvResetNextTaskUnblockTime+0x24>)
  402076:	681b      	ldr	r3, [r3, #0]
  402078:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40207a:	68db      	ldr	r3, [r3, #12]
  40207c:	685a      	ldr	r2, [r3, #4]
  40207e:	4b05      	ldr	r3, [pc, #20]	; (402094 <prvResetNextTaskUnblockTime+0x28>)
  402080:	601a      	str	r2, [r3, #0]
  402082:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402084:	f04f 32ff 	mov.w	r2, #4294967295
  402088:	4b02      	ldr	r3, [pc, #8]	; (402094 <prvResetNextTaskUnblockTime+0x28>)
  40208a:	601a      	str	r2, [r3, #0]
  40208c:	4770      	bx	lr
  40208e:	bf00      	nop
  402090:	20400c78 	.word	0x20400c78
  402094:	20400d24 	.word	0x20400d24

00402098 <prvAddCurrentTaskToDelayedList>:
{
  402098:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40209a:	4b0f      	ldr	r3, [pc, #60]	; (4020d8 <prvAddCurrentTaskToDelayedList+0x40>)
  40209c:	681b      	ldr	r3, [r3, #0]
  40209e:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4020a0:	4b0e      	ldr	r3, [pc, #56]	; (4020dc <prvAddCurrentTaskToDelayedList+0x44>)
  4020a2:	681b      	ldr	r3, [r3, #0]
  4020a4:	4298      	cmp	r0, r3
  4020a6:	d30e      	bcc.n	4020c6 <prvAddCurrentTaskToDelayedList+0x2e>
  4020a8:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4020aa:	4b0d      	ldr	r3, [pc, #52]	; (4020e0 <prvAddCurrentTaskToDelayedList+0x48>)
  4020ac:	6818      	ldr	r0, [r3, #0]
  4020ae:	4b0a      	ldr	r3, [pc, #40]	; (4020d8 <prvAddCurrentTaskToDelayedList+0x40>)
  4020b0:	6819      	ldr	r1, [r3, #0]
  4020b2:	3104      	adds	r1, #4
  4020b4:	4b0b      	ldr	r3, [pc, #44]	; (4020e4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4020b6:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4020b8:	4b0b      	ldr	r3, [pc, #44]	; (4020e8 <prvAddCurrentTaskToDelayedList+0x50>)
  4020ba:	681b      	ldr	r3, [r3, #0]
  4020bc:	429c      	cmp	r4, r3
  4020be:	d201      	bcs.n	4020c4 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4020c0:	4b09      	ldr	r3, [pc, #36]	; (4020e8 <prvAddCurrentTaskToDelayedList+0x50>)
  4020c2:	601c      	str	r4, [r3, #0]
  4020c4:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4020c6:	4b09      	ldr	r3, [pc, #36]	; (4020ec <prvAddCurrentTaskToDelayedList+0x54>)
  4020c8:	6818      	ldr	r0, [r3, #0]
  4020ca:	4b03      	ldr	r3, [pc, #12]	; (4020d8 <prvAddCurrentTaskToDelayedList+0x40>)
  4020cc:	6819      	ldr	r1, [r3, #0]
  4020ce:	3104      	adds	r1, #4
  4020d0:	4b04      	ldr	r3, [pc, #16]	; (4020e4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4020d2:	4798      	blx	r3
  4020d4:	bd10      	pop	{r4, pc}
  4020d6:	bf00      	nop
  4020d8:	20400c74 	.word	0x20400c74
  4020dc:	20400d6c 	.word	0x20400d6c
  4020e0:	20400c78 	.word	0x20400c78
  4020e4:	00401479 	.word	0x00401479
  4020e8:	20400d24 	.word	0x20400d24
  4020ec:	20400c7c 	.word	0x20400c7c

004020f0 <xTaskGenericCreate>:
{
  4020f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020f4:	b083      	sub	sp, #12
  4020f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4020f8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4020fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4020fe:	b160      	cbz	r0, 40211a <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402100:	2d04      	cmp	r5, #4
  402102:	d915      	bls.n	402130 <xTaskGenericCreate+0x40>
  402104:	f04f 0380 	mov.w	r3, #128	; 0x80
  402108:	b672      	cpsid	i
  40210a:	f383 8811 	msr	BASEPRI, r3
  40210e:	f3bf 8f6f 	isb	sy
  402112:	f3bf 8f4f 	dsb	sy
  402116:	b662      	cpsie	i
  402118:	e7fe      	b.n	402118 <xTaskGenericCreate+0x28>
  40211a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40211e:	b672      	cpsid	i
  402120:	f383 8811 	msr	BASEPRI, r3
  402124:	f3bf 8f6f 	isb	sy
  402128:	f3bf 8f4f 	dsb	sy
  40212c:	b662      	cpsie	i
  40212e:	e7fe      	b.n	40212e <xTaskGenericCreate+0x3e>
  402130:	9001      	str	r0, [sp, #4]
  402132:	4698      	mov	r8, r3
  402134:	4691      	mov	r9, r2
  402136:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402138:	b936      	cbnz	r6, 402148 <xTaskGenericCreate+0x58>
  40213a:	0090      	lsls	r0, r2, #2
  40213c:	4b62      	ldr	r3, [pc, #392]	; (4022c8 <xTaskGenericCreate+0x1d8>)
  40213e:	4798      	blx	r3
		if( pxStack != NULL )
  402140:	4606      	mov	r6, r0
  402142:	2800      	cmp	r0, #0
  402144:	f000 809e 	beq.w	402284 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402148:	2058      	movs	r0, #88	; 0x58
  40214a:	4b5f      	ldr	r3, [pc, #380]	; (4022c8 <xTaskGenericCreate+0x1d8>)
  40214c:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40214e:	4604      	mov	r4, r0
  402150:	2800      	cmp	r0, #0
  402152:	f000 8094 	beq.w	40227e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402156:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402158:	ea4f 0289 	mov.w	r2, r9, lsl #2
  40215c:	21a5      	movs	r1, #165	; 0xa5
  40215e:	4630      	mov	r0, r6
  402160:	4b5a      	ldr	r3, [pc, #360]	; (4022cc <xTaskGenericCreate+0x1dc>)
  402162:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402164:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402168:	444e      	add	r6, r9
  40216a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40216c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402170:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402174:	783b      	ldrb	r3, [r7, #0]
  402176:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40217a:	783b      	ldrb	r3, [r7, #0]
  40217c:	2b00      	cmp	r3, #0
  40217e:	f040 8084 	bne.w	40228a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402182:	2700      	movs	r7, #0
  402184:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402188:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40218a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  40218c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40218e:	f104 0904 	add.w	r9, r4, #4
  402192:	4648      	mov	r0, r9
  402194:	f8df b184 	ldr.w	fp, [pc, #388]	; 40231c <xTaskGenericCreate+0x22c>
  402198:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40219a:	f104 0018 	add.w	r0, r4, #24
  40219e:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4021a0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4021a2:	f1c5 0305 	rsb	r3, r5, #5
  4021a6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4021a8:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4021aa:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4021ac:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4021b0:	4642      	mov	r2, r8
  4021b2:	9901      	ldr	r1, [sp, #4]
  4021b4:	4630      	mov	r0, r6
  4021b6:	4b46      	ldr	r3, [pc, #280]	; (4022d0 <xTaskGenericCreate+0x1e0>)
  4021b8:	4798      	blx	r3
  4021ba:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4021bc:	f1ba 0f00 	cmp.w	sl, #0
  4021c0:	d001      	beq.n	4021c6 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4021c2:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4021c6:	4b43      	ldr	r3, [pc, #268]	; (4022d4 <xTaskGenericCreate+0x1e4>)
  4021c8:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4021ca:	4a43      	ldr	r2, [pc, #268]	; (4022d8 <xTaskGenericCreate+0x1e8>)
  4021cc:	6813      	ldr	r3, [r2, #0]
  4021ce:	3301      	adds	r3, #1
  4021d0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4021d2:	4b42      	ldr	r3, [pc, #264]	; (4022dc <xTaskGenericCreate+0x1ec>)
  4021d4:	681b      	ldr	r3, [r3, #0]
  4021d6:	2b00      	cmp	r3, #0
  4021d8:	d166      	bne.n	4022a8 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4021da:	4b40      	ldr	r3, [pc, #256]	; (4022dc <xTaskGenericCreate+0x1ec>)
  4021dc:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4021de:	6813      	ldr	r3, [r2, #0]
  4021e0:	2b01      	cmp	r3, #1
  4021e2:	d121      	bne.n	402228 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4021e4:	4f3e      	ldr	r7, [pc, #248]	; (4022e0 <xTaskGenericCreate+0x1f0>)
  4021e6:	4638      	mov	r0, r7
  4021e8:	4e3e      	ldr	r6, [pc, #248]	; (4022e4 <xTaskGenericCreate+0x1f4>)
  4021ea:	47b0      	blx	r6
  4021ec:	f107 0014 	add.w	r0, r7, #20
  4021f0:	47b0      	blx	r6
  4021f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4021f6:	47b0      	blx	r6
  4021f8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4021fc:	47b0      	blx	r6
  4021fe:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402202:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402204:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402320 <xTaskGenericCreate+0x230>
  402208:	4640      	mov	r0, r8
  40220a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  40220c:	4f36      	ldr	r7, [pc, #216]	; (4022e8 <xTaskGenericCreate+0x1f8>)
  40220e:	4638      	mov	r0, r7
  402210:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402212:	4836      	ldr	r0, [pc, #216]	; (4022ec <xTaskGenericCreate+0x1fc>)
  402214:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402216:	4836      	ldr	r0, [pc, #216]	; (4022f0 <xTaskGenericCreate+0x200>)
  402218:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40221a:	4836      	ldr	r0, [pc, #216]	; (4022f4 <xTaskGenericCreate+0x204>)
  40221c:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  40221e:	4b36      	ldr	r3, [pc, #216]	; (4022f8 <xTaskGenericCreate+0x208>)
  402220:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402224:	4b35      	ldr	r3, [pc, #212]	; (4022fc <xTaskGenericCreate+0x20c>)
  402226:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402228:	4a35      	ldr	r2, [pc, #212]	; (402300 <xTaskGenericCreate+0x210>)
  40222a:	6813      	ldr	r3, [r2, #0]
  40222c:	3301      	adds	r3, #1
  40222e:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402230:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402232:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402234:	4a33      	ldr	r2, [pc, #204]	; (402304 <xTaskGenericCreate+0x214>)
  402236:	6811      	ldr	r1, [r2, #0]
  402238:	2301      	movs	r3, #1
  40223a:	4083      	lsls	r3, r0
  40223c:	430b      	orrs	r3, r1
  40223e:	6013      	str	r3, [r2, #0]
  402240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402244:	4649      	mov	r1, r9
  402246:	4b26      	ldr	r3, [pc, #152]	; (4022e0 <xTaskGenericCreate+0x1f0>)
  402248:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40224c:	4b2e      	ldr	r3, [pc, #184]	; (402308 <xTaskGenericCreate+0x218>)
  40224e:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402250:	4b2e      	ldr	r3, [pc, #184]	; (40230c <xTaskGenericCreate+0x21c>)
  402252:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402254:	4b2e      	ldr	r3, [pc, #184]	; (402310 <xTaskGenericCreate+0x220>)
  402256:	681b      	ldr	r3, [r3, #0]
  402258:	2b00      	cmp	r3, #0
  40225a:	d031      	beq.n	4022c0 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40225c:	4b1f      	ldr	r3, [pc, #124]	; (4022dc <xTaskGenericCreate+0x1ec>)
  40225e:	681b      	ldr	r3, [r3, #0]
  402260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402262:	429d      	cmp	r5, r3
  402264:	d92e      	bls.n	4022c4 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40226a:	4b2a      	ldr	r3, [pc, #168]	; (402314 <xTaskGenericCreate+0x224>)
  40226c:	601a      	str	r2, [r3, #0]
  40226e:	f3bf 8f4f 	dsb	sy
  402272:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402276:	2001      	movs	r0, #1
}
  402278:	b003      	add	sp, #12
  40227a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40227e:	4630      	mov	r0, r6
  402280:	4b25      	ldr	r3, [pc, #148]	; (402318 <xTaskGenericCreate+0x228>)
  402282:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402284:	f04f 30ff 	mov.w	r0, #4294967295
  402288:	e7f6      	b.n	402278 <xTaskGenericCreate+0x188>
  40228a:	463b      	mov	r3, r7
  40228c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402290:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402292:	7859      	ldrb	r1, [r3, #1]
  402294:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402298:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40229c:	2900      	cmp	r1, #0
  40229e:	f43f af70 	beq.w	402182 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4022a2:	42bb      	cmp	r3, r7
  4022a4:	d1f5      	bne.n	402292 <xTaskGenericCreate+0x1a2>
  4022a6:	e76c      	b.n	402182 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  4022a8:	4b19      	ldr	r3, [pc, #100]	; (402310 <xTaskGenericCreate+0x220>)
  4022aa:	681b      	ldr	r3, [r3, #0]
  4022ac:	2b00      	cmp	r3, #0
  4022ae:	d1bb      	bne.n	402228 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4022b0:	4b0a      	ldr	r3, [pc, #40]	; (4022dc <xTaskGenericCreate+0x1ec>)
  4022b2:	681b      	ldr	r3, [r3, #0]
  4022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4022b6:	429d      	cmp	r5, r3
  4022b8:	d3b6      	bcc.n	402228 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  4022ba:	4b08      	ldr	r3, [pc, #32]	; (4022dc <xTaskGenericCreate+0x1ec>)
  4022bc:	601c      	str	r4, [r3, #0]
  4022be:	e7b3      	b.n	402228 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4022c0:	2001      	movs	r0, #1
  4022c2:	e7d9      	b.n	402278 <xTaskGenericCreate+0x188>
  4022c4:	2001      	movs	r0, #1
	return xReturn;
  4022c6:	e7d7      	b.n	402278 <xTaskGenericCreate+0x188>
  4022c8:	004017ed 	.word	0x004017ed
  4022cc:	0040426d 	.word	0x0040426d
  4022d0:	00401545 	.word	0x00401545
  4022d4:	00401591 	.word	0x00401591
  4022d8:	20400ce4 	.word	0x20400ce4
  4022dc:	20400c74 	.word	0x20400c74
  4022e0:	20400c80 	.word	0x20400c80
  4022e4:	00401445 	.word	0x00401445
  4022e8:	20400d10 	.word	0x20400d10
  4022ec:	20400d2c 	.word	0x20400d2c
  4022f0:	20400d58 	.word	0x20400d58
  4022f4:	20400d44 	.word	0x20400d44
  4022f8:	20400c78 	.word	0x20400c78
  4022fc:	20400c7c 	.word	0x20400c7c
  402300:	20400cf0 	.word	0x20400cf0
  402304:	20400cf8 	.word	0x20400cf8
  402308:	00401461 	.word	0x00401461
  40230c:	004015dd 	.word	0x004015dd
  402310:	20400d40 	.word	0x20400d40
  402314:	e000ed04 	.word	0xe000ed04
  402318:	0040181d 	.word	0x0040181d
  40231c:	0040145b 	.word	0x0040145b
  402320:	20400cfc 	.word	0x20400cfc

00402324 <vTaskStartScheduler>:
{
  402324:	b510      	push	{r4, lr}
  402326:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402328:	2300      	movs	r3, #0
  40232a:	9303      	str	r3, [sp, #12]
  40232c:	9302      	str	r3, [sp, #8]
  40232e:	9301      	str	r3, [sp, #4]
  402330:	9300      	str	r3, [sp, #0]
  402332:	2282      	movs	r2, #130	; 0x82
  402334:	4916      	ldr	r1, [pc, #88]	; (402390 <vTaskStartScheduler+0x6c>)
  402336:	4817      	ldr	r0, [pc, #92]	; (402394 <vTaskStartScheduler+0x70>)
  402338:	4c17      	ldr	r4, [pc, #92]	; (402398 <vTaskStartScheduler+0x74>)
  40233a:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40233c:	2801      	cmp	r0, #1
  40233e:	d00b      	beq.n	402358 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402340:	bb20      	cbnz	r0, 40238c <vTaskStartScheduler+0x68>
  402342:	f04f 0380 	mov.w	r3, #128	; 0x80
  402346:	b672      	cpsid	i
  402348:	f383 8811 	msr	BASEPRI, r3
  40234c:	f3bf 8f6f 	isb	sy
  402350:	f3bf 8f4f 	dsb	sy
  402354:	b662      	cpsie	i
  402356:	e7fe      	b.n	402356 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402358:	4b10      	ldr	r3, [pc, #64]	; (40239c <vTaskStartScheduler+0x78>)
  40235a:	4798      	blx	r3
	if( xReturn == pdPASS )
  40235c:	2801      	cmp	r0, #1
  40235e:	d1ef      	bne.n	402340 <vTaskStartScheduler+0x1c>
  402360:	f04f 0380 	mov.w	r3, #128	; 0x80
  402364:	b672      	cpsid	i
  402366:	f383 8811 	msr	BASEPRI, r3
  40236a:	f3bf 8f6f 	isb	sy
  40236e:	f3bf 8f4f 	dsb	sy
  402372:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402374:	f04f 32ff 	mov.w	r2, #4294967295
  402378:	4b09      	ldr	r3, [pc, #36]	; (4023a0 <vTaskStartScheduler+0x7c>)
  40237a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40237c:	2201      	movs	r2, #1
  40237e:	4b09      	ldr	r3, [pc, #36]	; (4023a4 <vTaskStartScheduler+0x80>)
  402380:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402382:	2200      	movs	r2, #0
  402384:	4b08      	ldr	r3, [pc, #32]	; (4023a8 <vTaskStartScheduler+0x84>)
  402386:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402388:	4b08      	ldr	r3, [pc, #32]	; (4023ac <vTaskStartScheduler+0x88>)
  40238a:	4798      	blx	r3
}
  40238c:	b004      	add	sp, #16
  40238e:	bd10      	pop	{r4, pc}
  402390:	00406a9c 	.word	0x00406a9c
  402394:	00402639 	.word	0x00402639
  402398:	004020f1 	.word	0x004020f1
  40239c:	00402c79 	.word	0x00402c79
  4023a0:	20400d24 	.word	0x20400d24
  4023a4:	20400d40 	.word	0x20400d40
  4023a8:	20400d6c 	.word	0x20400d6c
  4023ac:	004016c5 	.word	0x004016c5

004023b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4023b0:	4a02      	ldr	r2, [pc, #8]	; (4023bc <vTaskSuspendAll+0xc>)
  4023b2:	6813      	ldr	r3, [r2, #0]
  4023b4:	3301      	adds	r3, #1
  4023b6:	6013      	str	r3, [r2, #0]
  4023b8:	4770      	bx	lr
  4023ba:	bf00      	nop
  4023bc:	20400cec 	.word	0x20400cec

004023c0 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4023c0:	4b01      	ldr	r3, [pc, #4]	; (4023c8 <xTaskGetTickCount+0x8>)
  4023c2:	6818      	ldr	r0, [r3, #0]
}
  4023c4:	4770      	bx	lr
  4023c6:	bf00      	nop
  4023c8:	20400d6c 	.word	0x20400d6c

004023cc <xTaskIncrementTick>:
{
  4023cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4023d0:	4b42      	ldr	r3, [pc, #264]	; (4024dc <xTaskIncrementTick+0x110>)
  4023d2:	681b      	ldr	r3, [r3, #0]
  4023d4:	2b00      	cmp	r3, #0
  4023d6:	d178      	bne.n	4024ca <xTaskIncrementTick+0xfe>
		++xTickCount;
  4023d8:	4b41      	ldr	r3, [pc, #260]	; (4024e0 <xTaskIncrementTick+0x114>)
  4023da:	681a      	ldr	r2, [r3, #0]
  4023dc:	3201      	adds	r2, #1
  4023de:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4023e0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4023e2:	b9d6      	cbnz	r6, 40241a <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4023e4:	4b3f      	ldr	r3, [pc, #252]	; (4024e4 <xTaskIncrementTick+0x118>)
  4023e6:	681b      	ldr	r3, [r3, #0]
  4023e8:	681b      	ldr	r3, [r3, #0]
  4023ea:	b153      	cbz	r3, 402402 <xTaskIncrementTick+0x36>
  4023ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023f0:	b672      	cpsid	i
  4023f2:	f383 8811 	msr	BASEPRI, r3
  4023f6:	f3bf 8f6f 	isb	sy
  4023fa:	f3bf 8f4f 	dsb	sy
  4023fe:	b662      	cpsie	i
  402400:	e7fe      	b.n	402400 <xTaskIncrementTick+0x34>
  402402:	4a38      	ldr	r2, [pc, #224]	; (4024e4 <xTaskIncrementTick+0x118>)
  402404:	6811      	ldr	r1, [r2, #0]
  402406:	4b38      	ldr	r3, [pc, #224]	; (4024e8 <xTaskIncrementTick+0x11c>)
  402408:	6818      	ldr	r0, [r3, #0]
  40240a:	6010      	str	r0, [r2, #0]
  40240c:	6019      	str	r1, [r3, #0]
  40240e:	4a37      	ldr	r2, [pc, #220]	; (4024ec <xTaskIncrementTick+0x120>)
  402410:	6813      	ldr	r3, [r2, #0]
  402412:	3301      	adds	r3, #1
  402414:	6013      	str	r3, [r2, #0]
  402416:	4b36      	ldr	r3, [pc, #216]	; (4024f0 <xTaskIncrementTick+0x124>)
  402418:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  40241a:	4b36      	ldr	r3, [pc, #216]	; (4024f4 <xTaskIncrementTick+0x128>)
  40241c:	681b      	ldr	r3, [r3, #0]
  40241e:	429e      	cmp	r6, r3
  402420:	d218      	bcs.n	402454 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402422:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402424:	4b34      	ldr	r3, [pc, #208]	; (4024f8 <xTaskIncrementTick+0x12c>)
  402426:	681b      	ldr	r3, [r3, #0]
  402428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40242a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40242e:	4a33      	ldr	r2, [pc, #204]	; (4024fc <xTaskIncrementTick+0x130>)
  402430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402434:	2b02      	cmp	r3, #2
  402436:	bf28      	it	cs
  402438:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40243a:	4b31      	ldr	r3, [pc, #196]	; (402500 <xTaskIncrementTick+0x134>)
  40243c:	681b      	ldr	r3, [r3, #0]
  40243e:	b90b      	cbnz	r3, 402444 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402440:	4b30      	ldr	r3, [pc, #192]	; (402504 <xTaskIncrementTick+0x138>)
  402442:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402444:	4b30      	ldr	r3, [pc, #192]	; (402508 <xTaskIncrementTick+0x13c>)
  402446:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402448:	2b00      	cmp	r3, #0
}
  40244a:	bf0c      	ite	eq
  40244c:	4620      	moveq	r0, r4
  40244e:	2001      	movne	r0, #1
  402450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402454:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402456:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4024e4 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40245a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402514 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40245e:	4f2b      	ldr	r7, [pc, #172]	; (40250c <xTaskIncrementTick+0x140>)
  402460:	e01f      	b.n	4024a2 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402462:	f04f 32ff 	mov.w	r2, #4294967295
  402466:	4b23      	ldr	r3, [pc, #140]	; (4024f4 <xTaskIncrementTick+0x128>)
  402468:	601a      	str	r2, [r3, #0]
						break;
  40246a:	e7db      	b.n	402424 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  40246c:	4a21      	ldr	r2, [pc, #132]	; (4024f4 <xTaskIncrementTick+0x128>)
  40246e:	6013      	str	r3, [r2, #0]
							break;
  402470:	e7d8      	b.n	402424 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402472:	f105 0018 	add.w	r0, r5, #24
  402476:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402478:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40247a:	683a      	ldr	r2, [r7, #0]
  40247c:	2301      	movs	r3, #1
  40247e:	4083      	lsls	r3, r0
  402480:	4313      	orrs	r3, r2
  402482:	603b      	str	r3, [r7, #0]
  402484:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402488:	4651      	mov	r1, sl
  40248a:	4b1c      	ldr	r3, [pc, #112]	; (4024fc <xTaskIncrementTick+0x130>)
  40248c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402490:	4b1f      	ldr	r3, [pc, #124]	; (402510 <xTaskIncrementTick+0x144>)
  402492:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402494:	4b18      	ldr	r3, [pc, #96]	; (4024f8 <xTaskIncrementTick+0x12c>)
  402496:	681b      	ldr	r3, [r3, #0]
  402498:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  40249c:	429a      	cmp	r2, r3
  40249e:	bf28      	it	cs
  4024a0:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4024a2:	f8d9 3000 	ldr.w	r3, [r9]
  4024a6:	681b      	ldr	r3, [r3, #0]
  4024a8:	2b00      	cmp	r3, #0
  4024aa:	d0da      	beq.n	402462 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4024ac:	f8d9 3000 	ldr.w	r3, [r9]
  4024b0:	68db      	ldr	r3, [r3, #12]
  4024b2:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4024b4:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4024b6:	429e      	cmp	r6, r3
  4024b8:	d3d8      	bcc.n	40246c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4024ba:	f105 0a04 	add.w	sl, r5, #4
  4024be:	4650      	mov	r0, sl
  4024c0:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4024c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4024c4:	2b00      	cmp	r3, #0
  4024c6:	d1d4      	bne.n	402472 <xTaskIncrementTick+0xa6>
  4024c8:	e7d6      	b.n	402478 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4024ca:	4a0d      	ldr	r2, [pc, #52]	; (402500 <xTaskIncrementTick+0x134>)
  4024cc:	6813      	ldr	r3, [r2, #0]
  4024ce:	3301      	adds	r3, #1
  4024d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4024d2:	4b0c      	ldr	r3, [pc, #48]	; (402504 <xTaskIncrementTick+0x138>)
  4024d4:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4024d6:	2400      	movs	r4, #0
  4024d8:	e7b4      	b.n	402444 <xTaskIncrementTick+0x78>
  4024da:	bf00      	nop
  4024dc:	20400cec 	.word	0x20400cec
  4024e0:	20400d6c 	.word	0x20400d6c
  4024e4:	20400c78 	.word	0x20400c78
  4024e8:	20400c7c 	.word	0x20400c7c
  4024ec:	20400d28 	.word	0x20400d28
  4024f0:	0040206d 	.word	0x0040206d
  4024f4:	20400d24 	.word	0x20400d24
  4024f8:	20400c74 	.word	0x20400c74
  4024fc:	20400c80 	.word	0x20400c80
  402500:	20400ce8 	.word	0x20400ce8
  402504:	00403245 	.word	0x00403245
  402508:	20400d70 	.word	0x20400d70
  40250c:	20400cf8 	.word	0x20400cf8
  402510:	00401461 	.word	0x00401461
  402514:	004014ad 	.word	0x004014ad

00402518 <xTaskResumeAll>:
{
  402518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  40251c:	4b38      	ldr	r3, [pc, #224]	; (402600 <xTaskResumeAll+0xe8>)
  40251e:	681b      	ldr	r3, [r3, #0]
  402520:	b953      	cbnz	r3, 402538 <xTaskResumeAll+0x20>
  402522:	f04f 0380 	mov.w	r3, #128	; 0x80
  402526:	b672      	cpsid	i
  402528:	f383 8811 	msr	BASEPRI, r3
  40252c:	f3bf 8f6f 	isb	sy
  402530:	f3bf 8f4f 	dsb	sy
  402534:	b662      	cpsie	i
  402536:	e7fe      	b.n	402536 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402538:	4b32      	ldr	r3, [pc, #200]	; (402604 <xTaskResumeAll+0xec>)
  40253a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40253c:	4b30      	ldr	r3, [pc, #192]	; (402600 <xTaskResumeAll+0xe8>)
  40253e:	681a      	ldr	r2, [r3, #0]
  402540:	3a01      	subs	r2, #1
  402542:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402544:	681b      	ldr	r3, [r3, #0]
  402546:	2b00      	cmp	r3, #0
  402548:	d155      	bne.n	4025f6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40254a:	4b2f      	ldr	r3, [pc, #188]	; (402608 <xTaskResumeAll+0xf0>)
  40254c:	681b      	ldr	r3, [r3, #0]
  40254e:	2b00      	cmp	r3, #0
  402550:	d132      	bne.n	4025b8 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402552:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402554:	4b2d      	ldr	r3, [pc, #180]	; (40260c <xTaskResumeAll+0xf4>)
  402556:	4798      	blx	r3
}
  402558:	4620      	mov	r0, r4
  40255a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40255e:	68fb      	ldr	r3, [r7, #12]
  402560:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402562:	f104 0018 	add.w	r0, r4, #24
  402566:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402568:	f104 0804 	add.w	r8, r4, #4
  40256c:	4640      	mov	r0, r8
  40256e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402570:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402572:	682a      	ldr	r2, [r5, #0]
  402574:	2301      	movs	r3, #1
  402576:	4083      	lsls	r3, r0
  402578:	4313      	orrs	r3, r2
  40257a:	602b      	str	r3, [r5, #0]
  40257c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402580:	4641      	mov	r1, r8
  402582:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402586:	4b22      	ldr	r3, [pc, #136]	; (402610 <xTaskResumeAll+0xf8>)
  402588:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40258a:	4b22      	ldr	r3, [pc, #136]	; (402614 <xTaskResumeAll+0xfc>)
  40258c:	681b      	ldr	r3, [r3, #0]
  40258e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402592:	429a      	cmp	r2, r3
  402594:	d20c      	bcs.n	4025b0 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402596:	683b      	ldr	r3, [r7, #0]
  402598:	2b00      	cmp	r3, #0
  40259a:	d1e0      	bne.n	40255e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40259c:	4b1e      	ldr	r3, [pc, #120]	; (402618 <xTaskResumeAll+0x100>)
  40259e:	681b      	ldr	r3, [r3, #0]
  4025a0:	b1db      	cbz	r3, 4025da <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4025a2:	4b1d      	ldr	r3, [pc, #116]	; (402618 <xTaskResumeAll+0x100>)
  4025a4:	681b      	ldr	r3, [r3, #0]
  4025a6:	b1c3      	cbz	r3, 4025da <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4025a8:	4e1c      	ldr	r6, [pc, #112]	; (40261c <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  4025aa:	4d1d      	ldr	r5, [pc, #116]	; (402620 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  4025ac:	4c1a      	ldr	r4, [pc, #104]	; (402618 <xTaskResumeAll+0x100>)
  4025ae:	e00e      	b.n	4025ce <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  4025b0:	2201      	movs	r2, #1
  4025b2:	4b1b      	ldr	r3, [pc, #108]	; (402620 <xTaskResumeAll+0x108>)
  4025b4:	601a      	str	r2, [r3, #0]
  4025b6:	e7ee      	b.n	402596 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4025b8:	4f1a      	ldr	r7, [pc, #104]	; (402624 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4025ba:	4e1b      	ldr	r6, [pc, #108]	; (402628 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  4025bc:	4d1b      	ldr	r5, [pc, #108]	; (40262c <xTaskResumeAll+0x114>)
  4025be:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402634 <xTaskResumeAll+0x11c>
  4025c2:	e7e8      	b.n	402596 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4025c4:	6823      	ldr	r3, [r4, #0]
  4025c6:	3b01      	subs	r3, #1
  4025c8:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4025ca:	6823      	ldr	r3, [r4, #0]
  4025cc:	b12b      	cbz	r3, 4025da <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4025ce:	47b0      	blx	r6
  4025d0:	2800      	cmp	r0, #0
  4025d2:	d0f7      	beq.n	4025c4 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4025d4:	2301      	movs	r3, #1
  4025d6:	602b      	str	r3, [r5, #0]
  4025d8:	e7f4      	b.n	4025c4 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4025da:	4b11      	ldr	r3, [pc, #68]	; (402620 <xTaskResumeAll+0x108>)
  4025dc:	681b      	ldr	r3, [r3, #0]
  4025de:	2b01      	cmp	r3, #1
  4025e0:	d10b      	bne.n	4025fa <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4025e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025e6:	4b12      	ldr	r3, [pc, #72]	; (402630 <xTaskResumeAll+0x118>)
  4025e8:	601a      	str	r2, [r3, #0]
  4025ea:	f3bf 8f4f 	dsb	sy
  4025ee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4025f2:	2401      	movs	r4, #1
  4025f4:	e7ae      	b.n	402554 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4025f6:	2400      	movs	r4, #0
  4025f8:	e7ac      	b.n	402554 <xTaskResumeAll+0x3c>
  4025fa:	2400      	movs	r4, #0
  4025fc:	e7aa      	b.n	402554 <xTaskResumeAll+0x3c>
  4025fe:	bf00      	nop
  402600:	20400cec 	.word	0x20400cec
  402604:	00401591 	.word	0x00401591
  402608:	20400ce4 	.word	0x20400ce4
  40260c:	004015dd 	.word	0x004015dd
  402610:	00401461 	.word	0x00401461
  402614:	20400c74 	.word	0x20400c74
  402618:	20400ce8 	.word	0x20400ce8
  40261c:	004023cd 	.word	0x004023cd
  402620:	20400d70 	.word	0x20400d70
  402624:	20400d2c 	.word	0x20400d2c
  402628:	004014ad 	.word	0x004014ad
  40262c:	20400cf8 	.word	0x20400cf8
  402630:	e000ed04 	.word	0xe000ed04
  402634:	20400c80 	.word	0x20400c80

00402638 <prvIdleTask>:
{
  402638:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40263a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4026c4 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40263e:	4e19      	ldr	r6, [pc, #100]	; (4026a4 <prvIdleTask+0x6c>)
				taskYIELD();
  402640:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4026c8 <prvIdleTask+0x90>
  402644:	e02a      	b.n	40269c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402646:	4b18      	ldr	r3, [pc, #96]	; (4026a8 <prvIdleTask+0x70>)
  402648:	681b      	ldr	r3, [r3, #0]
  40264a:	2b01      	cmp	r3, #1
  40264c:	d81e      	bhi.n	40268c <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40264e:	682b      	ldr	r3, [r5, #0]
  402650:	2b00      	cmp	r3, #0
  402652:	d0f8      	beq.n	402646 <prvIdleTask+0xe>
			vTaskSuspendAll();
  402654:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402656:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402658:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40265a:	2c00      	cmp	r4, #0
  40265c:	d0f7      	beq.n	40264e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40265e:	4b13      	ldr	r3, [pc, #76]	; (4026ac <prvIdleTask+0x74>)
  402660:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402662:	68f3      	ldr	r3, [r6, #12]
  402664:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402666:	1d20      	adds	r0, r4, #4
  402668:	4b11      	ldr	r3, [pc, #68]	; (4026b0 <prvIdleTask+0x78>)
  40266a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40266c:	4a11      	ldr	r2, [pc, #68]	; (4026b4 <prvIdleTask+0x7c>)
  40266e:	6813      	ldr	r3, [r2, #0]
  402670:	3b01      	subs	r3, #1
  402672:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402674:	682b      	ldr	r3, [r5, #0]
  402676:	3b01      	subs	r3, #1
  402678:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  40267a:	4b0f      	ldr	r3, [pc, #60]	; (4026b8 <prvIdleTask+0x80>)
  40267c:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40267e:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402680:	f8df a048 	ldr.w	sl, [pc, #72]	; 4026cc <prvIdleTask+0x94>
  402684:	47d0      	blx	sl
		vPortFree( pxTCB );
  402686:	4620      	mov	r0, r4
  402688:	47d0      	blx	sl
  40268a:	e7e0      	b.n	40264e <prvIdleTask+0x16>
				taskYIELD();
  40268c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402690:	f8c9 3000 	str.w	r3, [r9]
  402694:	f3bf 8f4f 	dsb	sy
  402698:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40269c:	4d07      	ldr	r5, [pc, #28]	; (4026bc <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40269e:	4f08      	ldr	r7, [pc, #32]	; (4026c0 <prvIdleTask+0x88>)
  4026a0:	e7d5      	b.n	40264e <prvIdleTask+0x16>
  4026a2:	bf00      	nop
  4026a4:	20400d58 	.word	0x20400d58
  4026a8:	20400c80 	.word	0x20400c80
  4026ac:	00401591 	.word	0x00401591
  4026b0:	004014ad 	.word	0x004014ad
  4026b4:	20400ce4 	.word	0x20400ce4
  4026b8:	004015dd 	.word	0x004015dd
  4026bc:	20400cf4 	.word	0x20400cf4
  4026c0:	00402519 	.word	0x00402519
  4026c4:	004023b1 	.word	0x004023b1
  4026c8:	e000ed04 	.word	0xe000ed04
  4026cc:	0040181d 	.word	0x0040181d

004026d0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4026d0:	4b2d      	ldr	r3, [pc, #180]	; (402788 <vTaskSwitchContext+0xb8>)
  4026d2:	681b      	ldr	r3, [r3, #0]
  4026d4:	2b00      	cmp	r3, #0
  4026d6:	d12c      	bne.n	402732 <vTaskSwitchContext+0x62>
{
  4026d8:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4026da:	2200      	movs	r2, #0
  4026dc:	4b2b      	ldr	r3, [pc, #172]	; (40278c <vTaskSwitchContext+0xbc>)
  4026de:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4026e0:	4b2b      	ldr	r3, [pc, #172]	; (402790 <vTaskSwitchContext+0xc0>)
  4026e2:	681b      	ldr	r3, [r3, #0]
  4026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026e6:	681a      	ldr	r2, [r3, #0]
  4026e8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4026ec:	d103      	bne.n	4026f6 <vTaskSwitchContext+0x26>
  4026ee:	685a      	ldr	r2, [r3, #4]
  4026f0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4026f4:	d021      	beq.n	40273a <vTaskSwitchContext+0x6a>
  4026f6:	4b26      	ldr	r3, [pc, #152]	; (402790 <vTaskSwitchContext+0xc0>)
  4026f8:	6818      	ldr	r0, [r3, #0]
  4026fa:	6819      	ldr	r1, [r3, #0]
  4026fc:	3134      	adds	r1, #52	; 0x34
  4026fe:	4b25      	ldr	r3, [pc, #148]	; (402794 <vTaskSwitchContext+0xc4>)
  402700:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402702:	4b25      	ldr	r3, [pc, #148]	; (402798 <vTaskSwitchContext+0xc8>)
  402704:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402706:	fab3 f383 	clz	r3, r3
  40270a:	b2db      	uxtb	r3, r3
  40270c:	f1c3 031f 	rsb	r3, r3, #31
  402710:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402714:	4a21      	ldr	r2, [pc, #132]	; (40279c <vTaskSwitchContext+0xcc>)
  402716:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40271a:	b9ba      	cbnz	r2, 40274c <vTaskSwitchContext+0x7c>
	__asm volatile
  40271c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402720:	b672      	cpsid	i
  402722:	f383 8811 	msr	BASEPRI, r3
  402726:	f3bf 8f6f 	isb	sy
  40272a:	f3bf 8f4f 	dsb	sy
  40272e:	b662      	cpsie	i
  402730:	e7fe      	b.n	402730 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402732:	2201      	movs	r2, #1
  402734:	4b15      	ldr	r3, [pc, #84]	; (40278c <vTaskSwitchContext+0xbc>)
  402736:	601a      	str	r2, [r3, #0]
  402738:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40273a:	689a      	ldr	r2, [r3, #8]
  40273c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402740:	d1d9      	bne.n	4026f6 <vTaskSwitchContext+0x26>
  402742:	68db      	ldr	r3, [r3, #12]
  402744:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402748:	d1d5      	bne.n	4026f6 <vTaskSwitchContext+0x26>
  40274a:	e7da      	b.n	402702 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40274c:	4a13      	ldr	r2, [pc, #76]	; (40279c <vTaskSwitchContext+0xcc>)
  40274e:	0099      	lsls	r1, r3, #2
  402750:	18c8      	adds	r0, r1, r3
  402752:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402756:	6844      	ldr	r4, [r0, #4]
  402758:	6864      	ldr	r4, [r4, #4]
  40275a:	6044      	str	r4, [r0, #4]
  40275c:	4419      	add	r1, r3
  40275e:	4602      	mov	r2, r0
  402760:	3208      	adds	r2, #8
  402762:	4294      	cmp	r4, r2
  402764:	d009      	beq.n	40277a <vTaskSwitchContext+0xaa>
  402766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40276a:	4a0c      	ldr	r2, [pc, #48]	; (40279c <vTaskSwitchContext+0xcc>)
  40276c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402770:	685b      	ldr	r3, [r3, #4]
  402772:	68da      	ldr	r2, [r3, #12]
  402774:	4b06      	ldr	r3, [pc, #24]	; (402790 <vTaskSwitchContext+0xc0>)
  402776:	601a      	str	r2, [r3, #0]
  402778:	bd10      	pop	{r4, pc}
  40277a:	6860      	ldr	r0, [r4, #4]
  40277c:	4a07      	ldr	r2, [pc, #28]	; (40279c <vTaskSwitchContext+0xcc>)
  40277e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402782:	6050      	str	r0, [r2, #4]
  402784:	e7ef      	b.n	402766 <vTaskSwitchContext+0x96>
  402786:	bf00      	nop
  402788:	20400cec 	.word	0x20400cec
  40278c:	20400d70 	.word	0x20400d70
  402790:	20400c74 	.word	0x20400c74
  402794:	0040322d 	.word	0x0040322d
  402798:	20400cf8 	.word	0x20400cf8
  40279c:	20400c80 	.word	0x20400c80

004027a0 <vTaskPlaceOnEventList>:
{
  4027a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4027a2:	b1e0      	cbz	r0, 4027de <vTaskPlaceOnEventList+0x3e>
  4027a4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4027a6:	4d17      	ldr	r5, [pc, #92]	; (402804 <vTaskPlaceOnEventList+0x64>)
  4027a8:	6829      	ldr	r1, [r5, #0]
  4027aa:	3118      	adds	r1, #24
  4027ac:	4b16      	ldr	r3, [pc, #88]	; (402808 <vTaskPlaceOnEventList+0x68>)
  4027ae:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4027b0:	6828      	ldr	r0, [r5, #0]
  4027b2:	3004      	adds	r0, #4
  4027b4:	4b15      	ldr	r3, [pc, #84]	; (40280c <vTaskPlaceOnEventList+0x6c>)
  4027b6:	4798      	blx	r3
  4027b8:	b940      	cbnz	r0, 4027cc <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4027ba:	682a      	ldr	r2, [r5, #0]
  4027bc:	4914      	ldr	r1, [pc, #80]	; (402810 <vTaskPlaceOnEventList+0x70>)
  4027be:	680b      	ldr	r3, [r1, #0]
  4027c0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4027c2:	2201      	movs	r2, #1
  4027c4:	4082      	lsls	r2, r0
  4027c6:	ea23 0302 	bic.w	r3, r3, r2
  4027ca:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4027cc:	f1b4 3fff 	cmp.w	r4, #4294967295
  4027d0:	d010      	beq.n	4027f4 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4027d2:	4b10      	ldr	r3, [pc, #64]	; (402814 <vTaskPlaceOnEventList+0x74>)
  4027d4:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4027d6:	4420      	add	r0, r4
  4027d8:	4b0f      	ldr	r3, [pc, #60]	; (402818 <vTaskPlaceOnEventList+0x78>)
  4027da:	4798      	blx	r3
  4027dc:	bd38      	pop	{r3, r4, r5, pc}
  4027de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027e2:	b672      	cpsid	i
  4027e4:	f383 8811 	msr	BASEPRI, r3
  4027e8:	f3bf 8f6f 	isb	sy
  4027ec:	f3bf 8f4f 	dsb	sy
  4027f0:	b662      	cpsie	i
  4027f2:	e7fe      	b.n	4027f2 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4027f4:	4b03      	ldr	r3, [pc, #12]	; (402804 <vTaskPlaceOnEventList+0x64>)
  4027f6:	6819      	ldr	r1, [r3, #0]
  4027f8:	3104      	adds	r1, #4
  4027fa:	4808      	ldr	r0, [pc, #32]	; (40281c <vTaskPlaceOnEventList+0x7c>)
  4027fc:	4b08      	ldr	r3, [pc, #32]	; (402820 <vTaskPlaceOnEventList+0x80>)
  4027fe:	4798      	blx	r3
  402800:	bd38      	pop	{r3, r4, r5, pc}
  402802:	bf00      	nop
  402804:	20400c74 	.word	0x20400c74
  402808:	00401479 	.word	0x00401479
  40280c:	004014ad 	.word	0x004014ad
  402810:	20400cf8 	.word	0x20400cf8
  402814:	20400d6c 	.word	0x20400d6c
  402818:	00402099 	.word	0x00402099
  40281c:	20400d44 	.word	0x20400d44
  402820:	00401461 	.word	0x00401461

00402824 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402824:	b1e8      	cbz	r0, 402862 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402826:	b570      	push	{r4, r5, r6, lr}
  402828:	4615      	mov	r5, r2
  40282a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40282c:	4e16      	ldr	r6, [pc, #88]	; (402888 <vTaskPlaceOnEventListRestricted+0x64>)
  40282e:	6831      	ldr	r1, [r6, #0]
  402830:	3118      	adds	r1, #24
  402832:	4b16      	ldr	r3, [pc, #88]	; (40288c <vTaskPlaceOnEventListRestricted+0x68>)
  402834:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402836:	6830      	ldr	r0, [r6, #0]
  402838:	3004      	adds	r0, #4
  40283a:	4b15      	ldr	r3, [pc, #84]	; (402890 <vTaskPlaceOnEventListRestricted+0x6c>)
  40283c:	4798      	blx	r3
  40283e:	b940      	cbnz	r0, 402852 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402840:	6832      	ldr	r2, [r6, #0]
  402842:	4914      	ldr	r1, [pc, #80]	; (402894 <vTaskPlaceOnEventListRestricted+0x70>)
  402844:	680b      	ldr	r3, [r1, #0]
  402846:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402848:	2201      	movs	r2, #1
  40284a:	4082      	lsls	r2, r0
  40284c:	ea23 0302 	bic.w	r3, r3, r2
  402850:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402852:	2d01      	cmp	r5, #1
  402854:	d010      	beq.n	402878 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402856:	4b10      	ldr	r3, [pc, #64]	; (402898 <vTaskPlaceOnEventListRestricted+0x74>)
  402858:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40285a:	4420      	add	r0, r4
  40285c:	4b0f      	ldr	r3, [pc, #60]	; (40289c <vTaskPlaceOnEventListRestricted+0x78>)
  40285e:	4798      	blx	r3
  402860:	bd70      	pop	{r4, r5, r6, pc}
  402862:	f04f 0380 	mov.w	r3, #128	; 0x80
  402866:	b672      	cpsid	i
  402868:	f383 8811 	msr	BASEPRI, r3
  40286c:	f3bf 8f6f 	isb	sy
  402870:	f3bf 8f4f 	dsb	sy
  402874:	b662      	cpsie	i
  402876:	e7fe      	b.n	402876 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402878:	4b03      	ldr	r3, [pc, #12]	; (402888 <vTaskPlaceOnEventListRestricted+0x64>)
  40287a:	6819      	ldr	r1, [r3, #0]
  40287c:	3104      	adds	r1, #4
  40287e:	4808      	ldr	r0, [pc, #32]	; (4028a0 <vTaskPlaceOnEventListRestricted+0x7c>)
  402880:	4b02      	ldr	r3, [pc, #8]	; (40288c <vTaskPlaceOnEventListRestricted+0x68>)
  402882:	4798      	blx	r3
  402884:	bd70      	pop	{r4, r5, r6, pc}
  402886:	bf00      	nop
  402888:	20400c74 	.word	0x20400c74
  40288c:	00401461 	.word	0x00401461
  402890:	004014ad 	.word	0x004014ad
  402894:	20400cf8 	.word	0x20400cf8
  402898:	20400d6c 	.word	0x20400d6c
  40289c:	00402099 	.word	0x00402099
  4028a0:	20400d44 	.word	0x20400d44

004028a4 <xTaskRemoveFromEventList>:
{
  4028a4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4028a6:	68c3      	ldr	r3, [r0, #12]
  4028a8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4028aa:	b324      	cbz	r4, 4028f6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4028ac:	f104 0518 	add.w	r5, r4, #24
  4028b0:	4628      	mov	r0, r5
  4028b2:	4b1a      	ldr	r3, [pc, #104]	; (40291c <xTaskRemoveFromEventList+0x78>)
  4028b4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4028b6:	4b1a      	ldr	r3, [pc, #104]	; (402920 <xTaskRemoveFromEventList+0x7c>)
  4028b8:	681b      	ldr	r3, [r3, #0]
  4028ba:	bb3b      	cbnz	r3, 40290c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4028bc:	1d25      	adds	r5, r4, #4
  4028be:	4628      	mov	r0, r5
  4028c0:	4b16      	ldr	r3, [pc, #88]	; (40291c <xTaskRemoveFromEventList+0x78>)
  4028c2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4028c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4028c6:	4a17      	ldr	r2, [pc, #92]	; (402924 <xTaskRemoveFromEventList+0x80>)
  4028c8:	6811      	ldr	r1, [r2, #0]
  4028ca:	2301      	movs	r3, #1
  4028cc:	4083      	lsls	r3, r0
  4028ce:	430b      	orrs	r3, r1
  4028d0:	6013      	str	r3, [r2, #0]
  4028d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4028d6:	4629      	mov	r1, r5
  4028d8:	4b13      	ldr	r3, [pc, #76]	; (402928 <xTaskRemoveFromEventList+0x84>)
  4028da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4028de:	4b13      	ldr	r3, [pc, #76]	; (40292c <xTaskRemoveFromEventList+0x88>)
  4028e0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4028e2:	4b13      	ldr	r3, [pc, #76]	; (402930 <xTaskRemoveFromEventList+0x8c>)
  4028e4:	681b      	ldr	r3, [r3, #0]
  4028e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4028ea:	429a      	cmp	r2, r3
  4028ec:	d913      	bls.n	402916 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4028ee:	2001      	movs	r0, #1
  4028f0:	4b10      	ldr	r3, [pc, #64]	; (402934 <xTaskRemoveFromEventList+0x90>)
  4028f2:	6018      	str	r0, [r3, #0]
  4028f4:	bd38      	pop	{r3, r4, r5, pc}
  4028f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028fa:	b672      	cpsid	i
  4028fc:	f383 8811 	msr	BASEPRI, r3
  402900:	f3bf 8f6f 	isb	sy
  402904:	f3bf 8f4f 	dsb	sy
  402908:	b662      	cpsie	i
  40290a:	e7fe      	b.n	40290a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40290c:	4629      	mov	r1, r5
  40290e:	480a      	ldr	r0, [pc, #40]	; (402938 <xTaskRemoveFromEventList+0x94>)
  402910:	4b06      	ldr	r3, [pc, #24]	; (40292c <xTaskRemoveFromEventList+0x88>)
  402912:	4798      	blx	r3
  402914:	e7e5      	b.n	4028e2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402916:	2000      	movs	r0, #0
}
  402918:	bd38      	pop	{r3, r4, r5, pc}
  40291a:	bf00      	nop
  40291c:	004014ad 	.word	0x004014ad
  402920:	20400cec 	.word	0x20400cec
  402924:	20400cf8 	.word	0x20400cf8
  402928:	20400c80 	.word	0x20400c80
  40292c:	00401461 	.word	0x00401461
  402930:	20400c74 	.word	0x20400c74
  402934:	20400d70 	.word	0x20400d70
  402938:	20400d2c 	.word	0x20400d2c

0040293c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  40293c:	b130      	cbz	r0, 40294c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40293e:	4a09      	ldr	r2, [pc, #36]	; (402964 <vTaskSetTimeOutState+0x28>)
  402940:	6812      	ldr	r2, [r2, #0]
  402942:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402944:	4a08      	ldr	r2, [pc, #32]	; (402968 <vTaskSetTimeOutState+0x2c>)
  402946:	6812      	ldr	r2, [r2, #0]
  402948:	6042      	str	r2, [r0, #4]
  40294a:	4770      	bx	lr
  40294c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402950:	b672      	cpsid	i
  402952:	f383 8811 	msr	BASEPRI, r3
  402956:	f3bf 8f6f 	isb	sy
  40295a:	f3bf 8f4f 	dsb	sy
  40295e:	b662      	cpsie	i
  402960:	e7fe      	b.n	402960 <vTaskSetTimeOutState+0x24>
  402962:	bf00      	nop
  402964:	20400d28 	.word	0x20400d28
  402968:	20400d6c 	.word	0x20400d6c

0040296c <xTaskCheckForTimeOut>:
{
  40296c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40296e:	b1c0      	cbz	r0, 4029a2 <xTaskCheckForTimeOut+0x36>
  402970:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402972:	b309      	cbz	r1, 4029b8 <xTaskCheckForTimeOut+0x4c>
  402974:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402976:	4b1d      	ldr	r3, [pc, #116]	; (4029ec <xTaskCheckForTimeOut+0x80>)
  402978:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40297a:	4b1d      	ldr	r3, [pc, #116]	; (4029f0 <xTaskCheckForTimeOut+0x84>)
  40297c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40297e:	682b      	ldr	r3, [r5, #0]
  402980:	f1b3 3fff 	cmp.w	r3, #4294967295
  402984:	d02e      	beq.n	4029e4 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402986:	491b      	ldr	r1, [pc, #108]	; (4029f4 <xTaskCheckForTimeOut+0x88>)
  402988:	6809      	ldr	r1, [r1, #0]
  40298a:	6820      	ldr	r0, [r4, #0]
  40298c:	4288      	cmp	r0, r1
  40298e:	d002      	beq.n	402996 <xTaskCheckForTimeOut+0x2a>
  402990:	6861      	ldr	r1, [r4, #4]
  402992:	428a      	cmp	r2, r1
  402994:	d228      	bcs.n	4029e8 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402996:	6861      	ldr	r1, [r4, #4]
  402998:	1a50      	subs	r0, r2, r1
  40299a:	4283      	cmp	r3, r0
  40299c:	d817      	bhi.n	4029ce <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40299e:	2401      	movs	r4, #1
  4029a0:	e01c      	b.n	4029dc <xTaskCheckForTimeOut+0x70>
  4029a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029a6:	b672      	cpsid	i
  4029a8:	f383 8811 	msr	BASEPRI, r3
  4029ac:	f3bf 8f6f 	isb	sy
  4029b0:	f3bf 8f4f 	dsb	sy
  4029b4:	b662      	cpsie	i
  4029b6:	e7fe      	b.n	4029b6 <xTaskCheckForTimeOut+0x4a>
  4029b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029bc:	b672      	cpsid	i
  4029be:	f383 8811 	msr	BASEPRI, r3
  4029c2:	f3bf 8f6f 	isb	sy
  4029c6:	f3bf 8f4f 	dsb	sy
  4029ca:	b662      	cpsie	i
  4029cc:	e7fe      	b.n	4029cc <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4029ce:	1a9b      	subs	r3, r3, r2
  4029d0:	440b      	add	r3, r1
  4029d2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4029d4:	4620      	mov	r0, r4
  4029d6:	4b08      	ldr	r3, [pc, #32]	; (4029f8 <xTaskCheckForTimeOut+0x8c>)
  4029d8:	4798      	blx	r3
			xReturn = pdFALSE;
  4029da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4029dc:	4b07      	ldr	r3, [pc, #28]	; (4029fc <xTaskCheckForTimeOut+0x90>)
  4029de:	4798      	blx	r3
}
  4029e0:	4620      	mov	r0, r4
  4029e2:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4029e4:	2400      	movs	r4, #0
  4029e6:	e7f9      	b.n	4029dc <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4029e8:	2401      	movs	r4, #1
  4029ea:	e7f7      	b.n	4029dc <xTaskCheckForTimeOut+0x70>
  4029ec:	00401591 	.word	0x00401591
  4029f0:	20400d6c 	.word	0x20400d6c
  4029f4:	20400d28 	.word	0x20400d28
  4029f8:	0040293d 	.word	0x0040293d
  4029fc:	004015dd 	.word	0x004015dd

00402a00 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402a00:	2201      	movs	r2, #1
  402a02:	4b01      	ldr	r3, [pc, #4]	; (402a08 <vTaskMissedYield+0x8>)
  402a04:	601a      	str	r2, [r3, #0]
  402a06:	4770      	bx	lr
  402a08:	20400d70 	.word	0x20400d70

00402a0c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402a0c:	4b05      	ldr	r3, [pc, #20]	; (402a24 <xTaskGetSchedulerState+0x18>)
  402a0e:	681b      	ldr	r3, [r3, #0]
  402a10:	b133      	cbz	r3, 402a20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a12:	4b05      	ldr	r3, [pc, #20]	; (402a28 <xTaskGetSchedulerState+0x1c>)
  402a14:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402a16:	2b00      	cmp	r3, #0
  402a18:	bf0c      	ite	eq
  402a1a:	2002      	moveq	r0, #2
  402a1c:	2000      	movne	r0, #0
  402a1e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402a20:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402a22:	4770      	bx	lr
  402a24:	20400d40 	.word	0x20400d40
  402a28:	20400cec 	.word	0x20400cec

00402a2c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402a2c:	2800      	cmp	r0, #0
  402a2e:	d044      	beq.n	402aba <vTaskPriorityInherit+0x8e>
	{
  402a30:	b538      	push	{r3, r4, r5, lr}
  402a32:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402a34:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402a36:	4921      	ldr	r1, [pc, #132]	; (402abc <vTaskPriorityInherit+0x90>)
  402a38:	6809      	ldr	r1, [r1, #0]
  402a3a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a3c:	428a      	cmp	r2, r1
  402a3e:	d214      	bcs.n	402a6a <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402a40:	6981      	ldr	r1, [r0, #24]
  402a42:	2900      	cmp	r1, #0
  402a44:	db05      	blt.n	402a52 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402a46:	491d      	ldr	r1, [pc, #116]	; (402abc <vTaskPriorityInherit+0x90>)
  402a48:	6809      	ldr	r1, [r1, #0]
  402a4a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a4c:	f1c1 0105 	rsb	r1, r1, #5
  402a50:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402a52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402a56:	491a      	ldr	r1, [pc, #104]	; (402ac0 <vTaskPriorityInherit+0x94>)
  402a58:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402a5c:	6961      	ldr	r1, [r4, #20]
  402a5e:	4291      	cmp	r1, r2
  402a60:	d004      	beq.n	402a6c <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402a62:	4a16      	ldr	r2, [pc, #88]	; (402abc <vTaskPriorityInherit+0x90>)
  402a64:	6812      	ldr	r2, [r2, #0]
  402a66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402a68:	62e2      	str	r2, [r4, #44]	; 0x2c
  402a6a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402a6c:	1d25      	adds	r5, r4, #4
  402a6e:	4628      	mov	r0, r5
  402a70:	4b14      	ldr	r3, [pc, #80]	; (402ac4 <vTaskPriorityInherit+0x98>)
  402a72:	4798      	blx	r3
  402a74:	b970      	cbnz	r0, 402a94 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402a76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402a78:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402a7c:	4a10      	ldr	r2, [pc, #64]	; (402ac0 <vTaskPriorityInherit+0x94>)
  402a7e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402a82:	b93a      	cbnz	r2, 402a94 <vTaskPriorityInherit+0x68>
  402a84:	4810      	ldr	r0, [pc, #64]	; (402ac8 <vTaskPriorityInherit+0x9c>)
  402a86:	6802      	ldr	r2, [r0, #0]
  402a88:	2101      	movs	r1, #1
  402a8a:	fa01 f303 	lsl.w	r3, r1, r3
  402a8e:	ea22 0303 	bic.w	r3, r2, r3
  402a92:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402a94:	4b09      	ldr	r3, [pc, #36]	; (402abc <vTaskPriorityInherit+0x90>)
  402a96:	681b      	ldr	r3, [r3, #0]
  402a98:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402a9a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402a9c:	4a0a      	ldr	r2, [pc, #40]	; (402ac8 <vTaskPriorityInherit+0x9c>)
  402a9e:	6811      	ldr	r1, [r2, #0]
  402aa0:	2301      	movs	r3, #1
  402aa2:	4083      	lsls	r3, r0
  402aa4:	430b      	orrs	r3, r1
  402aa6:	6013      	str	r3, [r2, #0]
  402aa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402aac:	4629      	mov	r1, r5
  402aae:	4b04      	ldr	r3, [pc, #16]	; (402ac0 <vTaskPriorityInherit+0x94>)
  402ab0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ab4:	4b05      	ldr	r3, [pc, #20]	; (402acc <vTaskPriorityInherit+0xa0>)
  402ab6:	4798      	blx	r3
  402ab8:	bd38      	pop	{r3, r4, r5, pc}
  402aba:	4770      	bx	lr
  402abc:	20400c74 	.word	0x20400c74
  402ac0:	20400c80 	.word	0x20400c80
  402ac4:	004014ad 	.word	0x004014ad
  402ac8:	20400cf8 	.word	0x20400cf8
  402acc:	00401461 	.word	0x00401461

00402ad0 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402ad0:	2800      	cmp	r0, #0
  402ad2:	d04d      	beq.n	402b70 <xTaskPriorityDisinherit+0xa0>
	{
  402ad4:	b538      	push	{r3, r4, r5, lr}
  402ad6:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402ad8:	4a27      	ldr	r2, [pc, #156]	; (402b78 <xTaskPriorityDisinherit+0xa8>)
  402ada:	6812      	ldr	r2, [r2, #0]
  402adc:	4290      	cmp	r0, r2
  402ade:	d00a      	beq.n	402af6 <xTaskPriorityDisinherit+0x26>
  402ae0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ae4:	b672      	cpsid	i
  402ae6:	f383 8811 	msr	BASEPRI, r3
  402aea:	f3bf 8f6f 	isb	sy
  402aee:	f3bf 8f4f 	dsb	sy
  402af2:	b662      	cpsie	i
  402af4:	e7fe      	b.n	402af4 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402af6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402af8:	b952      	cbnz	r2, 402b10 <xTaskPriorityDisinherit+0x40>
  402afa:	f04f 0380 	mov.w	r3, #128	; 0x80
  402afe:	b672      	cpsid	i
  402b00:	f383 8811 	msr	BASEPRI, r3
  402b04:	f3bf 8f6f 	isb	sy
  402b08:	f3bf 8f4f 	dsb	sy
  402b0c:	b662      	cpsie	i
  402b0e:	e7fe      	b.n	402b0e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402b10:	3a01      	subs	r2, #1
  402b12:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402b14:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402b16:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402b18:	4288      	cmp	r0, r1
  402b1a:	d02b      	beq.n	402b74 <xTaskPriorityDisinherit+0xa4>
  402b1c:	bb52      	cbnz	r2, 402b74 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b1e:	1d25      	adds	r5, r4, #4
  402b20:	4628      	mov	r0, r5
  402b22:	4b16      	ldr	r3, [pc, #88]	; (402b7c <xTaskPriorityDisinherit+0xac>)
  402b24:	4798      	blx	r3
  402b26:	b968      	cbnz	r0, 402b44 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402b28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402b2a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402b2e:	4b14      	ldr	r3, [pc, #80]	; (402b80 <xTaskPriorityDisinherit+0xb0>)
  402b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402b34:	b933      	cbnz	r3, 402b44 <xTaskPriorityDisinherit+0x74>
  402b36:	4813      	ldr	r0, [pc, #76]	; (402b84 <xTaskPriorityDisinherit+0xb4>)
  402b38:	6803      	ldr	r3, [r0, #0]
  402b3a:	2201      	movs	r2, #1
  402b3c:	408a      	lsls	r2, r1
  402b3e:	ea23 0302 	bic.w	r3, r3, r2
  402b42:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402b44:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402b46:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b48:	f1c0 0305 	rsb	r3, r0, #5
  402b4c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402b4e:	4a0d      	ldr	r2, [pc, #52]	; (402b84 <xTaskPriorityDisinherit+0xb4>)
  402b50:	6811      	ldr	r1, [r2, #0]
  402b52:	2401      	movs	r4, #1
  402b54:	fa04 f300 	lsl.w	r3, r4, r0
  402b58:	430b      	orrs	r3, r1
  402b5a:	6013      	str	r3, [r2, #0]
  402b5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402b60:	4629      	mov	r1, r5
  402b62:	4b07      	ldr	r3, [pc, #28]	; (402b80 <xTaskPriorityDisinherit+0xb0>)
  402b64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402b68:	4b07      	ldr	r3, [pc, #28]	; (402b88 <xTaskPriorityDisinherit+0xb8>)
  402b6a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402b6c:	4620      	mov	r0, r4
  402b6e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402b70:	2000      	movs	r0, #0
  402b72:	4770      	bx	lr
  402b74:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402b76:	bd38      	pop	{r3, r4, r5, pc}
  402b78:	20400c74 	.word	0x20400c74
  402b7c:	004014ad 	.word	0x004014ad
  402b80:	20400c80 	.word	0x20400c80
  402b84:	20400cf8 	.word	0x20400cf8
  402b88:	00401461 	.word	0x00401461

00402b8c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402b8c:	4b05      	ldr	r3, [pc, #20]	; (402ba4 <pvTaskIncrementMutexHeldCount+0x18>)
  402b8e:	681b      	ldr	r3, [r3, #0]
  402b90:	b123      	cbz	r3, 402b9c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402b92:	4b04      	ldr	r3, [pc, #16]	; (402ba4 <pvTaskIncrementMutexHeldCount+0x18>)
  402b94:	681a      	ldr	r2, [r3, #0]
  402b96:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402b98:	3301      	adds	r3, #1
  402b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402b9c:	4b01      	ldr	r3, [pc, #4]	; (402ba4 <pvTaskIncrementMutexHeldCount+0x18>)
  402b9e:	6818      	ldr	r0, [r3, #0]
	}
  402ba0:	4770      	bx	lr
  402ba2:	bf00      	nop
  402ba4:	20400c74 	.word	0x20400c74

00402ba8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402ba8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402baa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402bac:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402bae:	4291      	cmp	r1, r2
  402bb0:	d80c      	bhi.n	402bcc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402bb2:	1ad2      	subs	r2, r2, r3
  402bb4:	6983      	ldr	r3, [r0, #24]
  402bb6:	429a      	cmp	r2, r3
  402bb8:	d301      	bcc.n	402bbe <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402bba:	2001      	movs	r0, #1
  402bbc:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402bbe:	1d01      	adds	r1, r0, #4
  402bc0:	4b09      	ldr	r3, [pc, #36]	; (402be8 <prvInsertTimerInActiveList+0x40>)
  402bc2:	6818      	ldr	r0, [r3, #0]
  402bc4:	4b09      	ldr	r3, [pc, #36]	; (402bec <prvInsertTimerInActiveList+0x44>)
  402bc6:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402bc8:	2000      	movs	r0, #0
  402bca:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402bcc:	429a      	cmp	r2, r3
  402bce:	d203      	bcs.n	402bd8 <prvInsertTimerInActiveList+0x30>
  402bd0:	4299      	cmp	r1, r3
  402bd2:	d301      	bcc.n	402bd8 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402bd4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402bd6:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402bd8:	1d01      	adds	r1, r0, #4
  402bda:	4b05      	ldr	r3, [pc, #20]	; (402bf0 <prvInsertTimerInActiveList+0x48>)
  402bdc:	6818      	ldr	r0, [r3, #0]
  402bde:	4b03      	ldr	r3, [pc, #12]	; (402bec <prvInsertTimerInActiveList+0x44>)
  402be0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402be2:	2000      	movs	r0, #0
  402be4:	bd08      	pop	{r3, pc}
  402be6:	bf00      	nop
  402be8:	20400d78 	.word	0x20400d78
  402bec:	00401479 	.word	0x00401479
  402bf0:	20400d74 	.word	0x20400d74

00402bf4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402bf4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402bf6:	4b15      	ldr	r3, [pc, #84]	; (402c4c <prvCheckForValidListAndQueue+0x58>)
  402bf8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402bfa:	4b15      	ldr	r3, [pc, #84]	; (402c50 <prvCheckForValidListAndQueue+0x5c>)
  402bfc:	681b      	ldr	r3, [r3, #0]
  402bfe:	b113      	cbz	r3, 402c06 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402c00:	4b14      	ldr	r3, [pc, #80]	; (402c54 <prvCheckForValidListAndQueue+0x60>)
  402c02:	4798      	blx	r3
  402c04:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402c06:	4d14      	ldr	r5, [pc, #80]	; (402c58 <prvCheckForValidListAndQueue+0x64>)
  402c08:	4628      	mov	r0, r5
  402c0a:	4e14      	ldr	r6, [pc, #80]	; (402c5c <prvCheckForValidListAndQueue+0x68>)
  402c0c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402c0e:	4c14      	ldr	r4, [pc, #80]	; (402c60 <prvCheckForValidListAndQueue+0x6c>)
  402c10:	4620      	mov	r0, r4
  402c12:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402c14:	4b13      	ldr	r3, [pc, #76]	; (402c64 <prvCheckForValidListAndQueue+0x70>)
  402c16:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402c18:	4b13      	ldr	r3, [pc, #76]	; (402c68 <prvCheckForValidListAndQueue+0x74>)
  402c1a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402c1c:	2200      	movs	r2, #0
  402c1e:	2110      	movs	r1, #16
  402c20:	2005      	movs	r0, #5
  402c22:	4b12      	ldr	r3, [pc, #72]	; (402c6c <prvCheckForValidListAndQueue+0x78>)
  402c24:	4798      	blx	r3
  402c26:	4b0a      	ldr	r3, [pc, #40]	; (402c50 <prvCheckForValidListAndQueue+0x5c>)
  402c28:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402c2a:	b118      	cbz	r0, 402c34 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402c2c:	4910      	ldr	r1, [pc, #64]	; (402c70 <prvCheckForValidListAndQueue+0x7c>)
  402c2e:	4b11      	ldr	r3, [pc, #68]	; (402c74 <prvCheckForValidListAndQueue+0x80>)
  402c30:	4798      	blx	r3
  402c32:	e7e5      	b.n	402c00 <prvCheckForValidListAndQueue+0xc>
  402c34:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c38:	b672      	cpsid	i
  402c3a:	f383 8811 	msr	BASEPRI, r3
  402c3e:	f3bf 8f6f 	isb	sy
  402c42:	f3bf 8f4f 	dsb	sy
  402c46:	b662      	cpsie	i
  402c48:	e7fe      	b.n	402c48 <prvCheckForValidListAndQueue+0x54>
  402c4a:	bf00      	nop
  402c4c:	00401591 	.word	0x00401591
  402c50:	20400da8 	.word	0x20400da8
  402c54:	004015dd 	.word	0x004015dd
  402c58:	20400d7c 	.word	0x20400d7c
  402c5c:	00401445 	.word	0x00401445
  402c60:	20400d90 	.word	0x20400d90
  402c64:	20400d74 	.word	0x20400d74
  402c68:	20400d78 	.word	0x20400d78
  402c6c:	00401ab1 	.word	0x00401ab1
  402c70:	00406aa4 	.word	0x00406aa4
  402c74:	00401fe1 	.word	0x00401fe1

00402c78 <xTimerCreateTimerTask>:
{
  402c78:	b510      	push	{r4, lr}
  402c7a:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402c7c:	4b0f      	ldr	r3, [pc, #60]	; (402cbc <xTimerCreateTimerTask+0x44>)
  402c7e:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402c80:	4b0f      	ldr	r3, [pc, #60]	; (402cc0 <xTimerCreateTimerTask+0x48>)
  402c82:	681b      	ldr	r3, [r3, #0]
  402c84:	b173      	cbz	r3, 402ca4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402c86:	2300      	movs	r3, #0
  402c88:	9303      	str	r3, [sp, #12]
  402c8a:	9302      	str	r3, [sp, #8]
  402c8c:	9301      	str	r3, [sp, #4]
  402c8e:	2204      	movs	r2, #4
  402c90:	9200      	str	r2, [sp, #0]
  402c92:	f44f 7282 	mov.w	r2, #260	; 0x104
  402c96:	490b      	ldr	r1, [pc, #44]	; (402cc4 <xTimerCreateTimerTask+0x4c>)
  402c98:	480b      	ldr	r0, [pc, #44]	; (402cc8 <xTimerCreateTimerTask+0x50>)
  402c9a:	4c0c      	ldr	r4, [pc, #48]	; (402ccc <xTimerCreateTimerTask+0x54>)
  402c9c:	47a0      	blx	r4
	configASSERT( xReturn );
  402c9e:	b108      	cbz	r0, 402ca4 <xTimerCreateTimerTask+0x2c>
}
  402ca0:	b004      	add	sp, #16
  402ca2:	bd10      	pop	{r4, pc}
  402ca4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ca8:	b672      	cpsid	i
  402caa:	f383 8811 	msr	BASEPRI, r3
  402cae:	f3bf 8f6f 	isb	sy
  402cb2:	f3bf 8f4f 	dsb	sy
  402cb6:	b662      	cpsie	i
  402cb8:	e7fe      	b.n	402cb8 <xTimerCreateTimerTask+0x40>
  402cba:	bf00      	nop
  402cbc:	00402bf5 	.word	0x00402bf5
  402cc0:	20400da8 	.word	0x20400da8
  402cc4:	00406aac 	.word	0x00406aac
  402cc8:	00402df9 	.word	0x00402df9
  402ccc:	004020f1 	.word	0x004020f1

00402cd0 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402cd0:	b1d8      	cbz	r0, 402d0a <xTimerGenericCommand+0x3a>
{
  402cd2:	b530      	push	{r4, r5, lr}
  402cd4:	b085      	sub	sp, #20
  402cd6:	4615      	mov	r5, r2
  402cd8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402cda:	4a15      	ldr	r2, [pc, #84]	; (402d30 <xTimerGenericCommand+0x60>)
  402cdc:	6810      	ldr	r0, [r2, #0]
  402cde:	b320      	cbz	r0, 402d2a <xTimerGenericCommand+0x5a>
  402ce0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402ce2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402ce4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402ce6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402ce8:	2905      	cmp	r1, #5
  402cea:	dc19      	bgt.n	402d20 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402cec:	4b11      	ldr	r3, [pc, #68]	; (402d34 <xTimerGenericCommand+0x64>)
  402cee:	4798      	blx	r3
  402cf0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402cf2:	f04f 0300 	mov.w	r3, #0
  402cf6:	bf0c      	ite	eq
  402cf8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402cfa:	461a      	movne	r2, r3
  402cfc:	4669      	mov	r1, sp
  402cfe:	480c      	ldr	r0, [pc, #48]	; (402d30 <xTimerGenericCommand+0x60>)
  402d00:	6800      	ldr	r0, [r0, #0]
  402d02:	4c0d      	ldr	r4, [pc, #52]	; (402d38 <xTimerGenericCommand+0x68>)
  402d04:	47a0      	blx	r4
}
  402d06:	b005      	add	sp, #20
  402d08:	bd30      	pop	{r4, r5, pc}
  402d0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d0e:	b672      	cpsid	i
  402d10:	f383 8811 	msr	BASEPRI, r3
  402d14:	f3bf 8f6f 	isb	sy
  402d18:	f3bf 8f4f 	dsb	sy
  402d1c:	b662      	cpsie	i
  402d1e:	e7fe      	b.n	402d1e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402d20:	2300      	movs	r3, #0
  402d22:	4669      	mov	r1, sp
  402d24:	4c05      	ldr	r4, [pc, #20]	; (402d3c <xTimerGenericCommand+0x6c>)
  402d26:	47a0      	blx	r4
  402d28:	e7ed      	b.n	402d06 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402d2a:	2000      	movs	r0, #0
	return xReturn;
  402d2c:	e7eb      	b.n	402d06 <xTimerGenericCommand+0x36>
  402d2e:	bf00      	nop
  402d30:	20400da8 	.word	0x20400da8
  402d34:	00402a0d 	.word	0x00402a0d
  402d38:	00401b2d 	.word	0x00401b2d
  402d3c:	00401d11 	.word	0x00401d11

00402d40 <prvSampleTimeNow>:
{
  402d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d44:	b082      	sub	sp, #8
  402d46:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402d48:	4b24      	ldr	r3, [pc, #144]	; (402ddc <prvSampleTimeNow+0x9c>)
  402d4a:	4798      	blx	r3
  402d4c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402d4e:	4b24      	ldr	r3, [pc, #144]	; (402de0 <prvSampleTimeNow+0xa0>)
  402d50:	681b      	ldr	r3, [r3, #0]
  402d52:	4298      	cmp	r0, r3
  402d54:	d31b      	bcc.n	402d8e <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402d56:	2300      	movs	r3, #0
  402d58:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402d5c:	4b20      	ldr	r3, [pc, #128]	; (402de0 <prvSampleTimeNow+0xa0>)
  402d5e:	601f      	str	r7, [r3, #0]
}
  402d60:	4638      	mov	r0, r7
  402d62:	b002      	add	sp, #8
  402d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402d68:	2100      	movs	r1, #0
  402d6a:	9100      	str	r1, [sp, #0]
  402d6c:	460b      	mov	r3, r1
  402d6e:	4652      	mov	r2, sl
  402d70:	4620      	mov	r0, r4
  402d72:	4c1c      	ldr	r4, [pc, #112]	; (402de4 <prvSampleTimeNow+0xa4>)
  402d74:	47a0      	blx	r4
				configASSERT( xResult );
  402d76:	b960      	cbnz	r0, 402d92 <prvSampleTimeNow+0x52>
  402d78:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d7c:	b672      	cpsid	i
  402d7e:	f383 8811 	msr	BASEPRI, r3
  402d82:	f3bf 8f6f 	isb	sy
  402d86:	f3bf 8f4f 	dsb	sy
  402d8a:	b662      	cpsie	i
  402d8c:	e7fe      	b.n	402d8c <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402d8e:	4d16      	ldr	r5, [pc, #88]	; (402de8 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402d90:	4e16      	ldr	r6, [pc, #88]	; (402dec <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402d92:	682b      	ldr	r3, [r5, #0]
  402d94:	681a      	ldr	r2, [r3, #0]
  402d96:	b1c2      	cbz	r2, 402dca <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d98:	68db      	ldr	r3, [r3, #12]
  402d9a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402d9e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402da0:	f104 0904 	add.w	r9, r4, #4
  402da4:	4648      	mov	r0, r9
  402da6:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402daa:	4620      	mov	r0, r4
  402dac:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402dae:	69e3      	ldr	r3, [r4, #28]
  402db0:	2b01      	cmp	r3, #1
  402db2:	d1ee      	bne.n	402d92 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402db4:	69a3      	ldr	r3, [r4, #24]
  402db6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402db8:	459a      	cmp	sl, r3
  402dba:	d2d5      	bcs.n	402d68 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402dbc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402dbe:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402dc0:	4649      	mov	r1, r9
  402dc2:	6828      	ldr	r0, [r5, #0]
  402dc4:	4b0a      	ldr	r3, [pc, #40]	; (402df0 <prvSampleTimeNow+0xb0>)
  402dc6:	4798      	blx	r3
  402dc8:	e7e3      	b.n	402d92 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402dca:	4a0a      	ldr	r2, [pc, #40]	; (402df4 <prvSampleTimeNow+0xb4>)
  402dcc:	6810      	ldr	r0, [r2, #0]
  402dce:	4906      	ldr	r1, [pc, #24]	; (402de8 <prvSampleTimeNow+0xa8>)
  402dd0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402dd2:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402dd4:	2301      	movs	r3, #1
  402dd6:	f8c8 3000 	str.w	r3, [r8]
  402dda:	e7bf      	b.n	402d5c <prvSampleTimeNow+0x1c>
  402ddc:	004023c1 	.word	0x004023c1
  402de0:	20400da4 	.word	0x20400da4
  402de4:	00402cd1 	.word	0x00402cd1
  402de8:	20400d74 	.word	0x20400d74
  402dec:	004014ad 	.word	0x004014ad
  402df0:	00401479 	.word	0x00401479
  402df4:	20400d78 	.word	0x20400d78

00402df8 <prvTimerTask>:
{
  402df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402dfc:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402dfe:	4e75      	ldr	r6, [pc, #468]	; (402fd4 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402e00:	4f75      	ldr	r7, [pc, #468]	; (402fd8 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402e02:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403000 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402e06:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403004 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402e0a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402e0c:	681a      	ldr	r2, [r3, #0]
  402e0e:	2a00      	cmp	r2, #0
  402e10:	f000 80ce 	beq.w	402fb0 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402e14:	68db      	ldr	r3, [r3, #12]
  402e16:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402e18:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402e1a:	a804      	add	r0, sp, #16
  402e1c:	4b6f      	ldr	r3, [pc, #444]	; (402fdc <prvTimerTask+0x1e4>)
  402e1e:	4798      	blx	r3
  402e20:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402e22:	9b04      	ldr	r3, [sp, #16]
  402e24:	2b00      	cmp	r3, #0
  402e26:	d144      	bne.n	402eb2 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402e28:	42a0      	cmp	r0, r4
  402e2a:	d212      	bcs.n	402e52 <prvTimerTask+0x5a>
  402e2c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402e2e:	1b61      	subs	r1, r4, r5
  402e30:	4b6b      	ldr	r3, [pc, #428]	; (402fe0 <prvTimerTask+0x1e8>)
  402e32:	6818      	ldr	r0, [r3, #0]
  402e34:	4b6b      	ldr	r3, [pc, #428]	; (402fe4 <prvTimerTask+0x1ec>)
  402e36:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402e38:	4b6b      	ldr	r3, [pc, #428]	; (402fe8 <prvTimerTask+0x1f0>)
  402e3a:	4798      	blx	r3
  402e3c:	2800      	cmp	r0, #0
  402e3e:	d13a      	bne.n	402eb6 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402e44:	f8c9 3000 	str.w	r3, [r9]
  402e48:	f3bf 8f4f 	dsb	sy
  402e4c:	f3bf 8f6f 	isb	sy
  402e50:	e031      	b.n	402eb6 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402e52:	4b65      	ldr	r3, [pc, #404]	; (402fe8 <prvTimerTask+0x1f0>)
  402e54:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402e56:	6833      	ldr	r3, [r6, #0]
  402e58:	68db      	ldr	r3, [r3, #12]
  402e5a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402e5e:	f10a 0004 	add.w	r0, sl, #4
  402e62:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402e64:	f8da 301c 	ldr.w	r3, [sl, #28]
  402e68:	2b01      	cmp	r3, #1
  402e6a:	d004      	beq.n	402e76 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402e6c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402e70:	4650      	mov	r0, sl
  402e72:	4798      	blx	r3
  402e74:	e01f      	b.n	402eb6 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402e76:	f8da 1018 	ldr.w	r1, [sl, #24]
  402e7a:	4623      	mov	r3, r4
  402e7c:	462a      	mov	r2, r5
  402e7e:	4421      	add	r1, r4
  402e80:	4650      	mov	r0, sl
  402e82:	4d5a      	ldr	r5, [pc, #360]	; (402fec <prvTimerTask+0x1f4>)
  402e84:	47a8      	blx	r5
  402e86:	2801      	cmp	r0, #1
  402e88:	d1f0      	bne.n	402e6c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402e8a:	2100      	movs	r1, #0
  402e8c:	9100      	str	r1, [sp, #0]
  402e8e:	460b      	mov	r3, r1
  402e90:	4622      	mov	r2, r4
  402e92:	4650      	mov	r0, sl
  402e94:	4c56      	ldr	r4, [pc, #344]	; (402ff0 <prvTimerTask+0x1f8>)
  402e96:	47a0      	blx	r4
			configASSERT( xResult );
  402e98:	2800      	cmp	r0, #0
  402e9a:	d1e7      	bne.n	402e6c <prvTimerTask+0x74>
  402e9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ea0:	b672      	cpsid	i
  402ea2:	f383 8811 	msr	BASEPRI, r3
  402ea6:	f3bf 8f6f 	isb	sy
  402eaa:	f3bf 8f4f 	dsb	sy
  402eae:	b662      	cpsie	i
  402eb0:	e7fe      	b.n	402eb0 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402eb2:	4b4d      	ldr	r3, [pc, #308]	; (402fe8 <prvTimerTask+0x1f0>)
  402eb4:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402eb6:	4d4a      	ldr	r5, [pc, #296]	; (402fe0 <prvTimerTask+0x1e8>)
  402eb8:	4c4e      	ldr	r4, [pc, #312]	; (402ff4 <prvTimerTask+0x1fc>)
  402eba:	e006      	b.n	402eca <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402ebc:	9907      	ldr	r1, [sp, #28]
  402ebe:	9806      	ldr	r0, [sp, #24]
  402ec0:	9b05      	ldr	r3, [sp, #20]
  402ec2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402ec4:	9b04      	ldr	r3, [sp, #16]
  402ec6:	2b00      	cmp	r3, #0
  402ec8:	da09      	bge.n	402ede <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402eca:	2300      	movs	r3, #0
  402ecc:	461a      	mov	r2, r3
  402ece:	a904      	add	r1, sp, #16
  402ed0:	6828      	ldr	r0, [r5, #0]
  402ed2:	47a0      	blx	r4
  402ed4:	2800      	cmp	r0, #0
  402ed6:	d098      	beq.n	402e0a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402ed8:	9b04      	ldr	r3, [sp, #16]
  402eda:	2b00      	cmp	r3, #0
  402edc:	dbee      	blt.n	402ebc <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402ede:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402ee2:	f8da 3014 	ldr.w	r3, [sl, #20]
  402ee6:	b113      	cbz	r3, 402eee <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402ee8:	f10a 0004 	add.w	r0, sl, #4
  402eec:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402eee:	a803      	add	r0, sp, #12
  402ef0:	4b3a      	ldr	r3, [pc, #232]	; (402fdc <prvTimerTask+0x1e4>)
  402ef2:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402ef4:	9b04      	ldr	r3, [sp, #16]
  402ef6:	2b09      	cmp	r3, #9
  402ef8:	d8e7      	bhi.n	402eca <prvTimerTask+0xd2>
  402efa:	a201      	add	r2, pc, #4	; (adr r2, 402f00 <prvTimerTask+0x108>)
  402efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402f00:	00402f29 	.word	0x00402f29
  402f04:	00402f29 	.word	0x00402f29
  402f08:	00402f29 	.word	0x00402f29
  402f0c:	00402ecb 	.word	0x00402ecb
  402f10:	00402f7d 	.word	0x00402f7d
  402f14:	00402fa9 	.word	0x00402fa9
  402f18:	00402f29 	.word	0x00402f29
  402f1c:	00402f29 	.word	0x00402f29
  402f20:	00402ecb 	.word	0x00402ecb
  402f24:	00402f7d 	.word	0x00402f7d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402f28:	9c05      	ldr	r4, [sp, #20]
  402f2a:	f8da 1018 	ldr.w	r1, [sl, #24]
  402f2e:	4623      	mov	r3, r4
  402f30:	4602      	mov	r2, r0
  402f32:	4421      	add	r1, r4
  402f34:	4650      	mov	r0, sl
  402f36:	4c2d      	ldr	r4, [pc, #180]	; (402fec <prvTimerTask+0x1f4>)
  402f38:	47a0      	blx	r4
  402f3a:	2801      	cmp	r0, #1
  402f3c:	d1bc      	bne.n	402eb8 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402f3e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402f42:	4650      	mov	r0, sl
  402f44:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402f46:	f8da 301c 	ldr.w	r3, [sl, #28]
  402f4a:	2b01      	cmp	r3, #1
  402f4c:	d1b4      	bne.n	402eb8 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402f4e:	f8da 2018 	ldr.w	r2, [sl, #24]
  402f52:	2100      	movs	r1, #0
  402f54:	9100      	str	r1, [sp, #0]
  402f56:	460b      	mov	r3, r1
  402f58:	9805      	ldr	r0, [sp, #20]
  402f5a:	4402      	add	r2, r0
  402f5c:	4650      	mov	r0, sl
  402f5e:	4c24      	ldr	r4, [pc, #144]	; (402ff0 <prvTimerTask+0x1f8>)
  402f60:	47a0      	blx	r4
							configASSERT( xResult );
  402f62:	2800      	cmp	r0, #0
  402f64:	d1a8      	bne.n	402eb8 <prvTimerTask+0xc0>
  402f66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f6a:	b672      	cpsid	i
  402f6c:	f383 8811 	msr	BASEPRI, r3
  402f70:	f3bf 8f6f 	isb	sy
  402f74:	f3bf 8f4f 	dsb	sy
  402f78:	b662      	cpsie	i
  402f7a:	e7fe      	b.n	402f7a <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402f7c:	9905      	ldr	r1, [sp, #20]
  402f7e:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402f82:	b131      	cbz	r1, 402f92 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402f84:	4603      	mov	r3, r0
  402f86:	4602      	mov	r2, r0
  402f88:	4401      	add	r1, r0
  402f8a:	4650      	mov	r0, sl
  402f8c:	4c17      	ldr	r4, [pc, #92]	; (402fec <prvTimerTask+0x1f4>)
  402f8e:	47a0      	blx	r4
  402f90:	e792      	b.n	402eb8 <prvTimerTask+0xc0>
  402f92:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f96:	b672      	cpsid	i
  402f98:	f383 8811 	msr	BASEPRI, r3
  402f9c:	f3bf 8f6f 	isb	sy
  402fa0:	f3bf 8f4f 	dsb	sy
  402fa4:	b662      	cpsie	i
  402fa6:	e7fe      	b.n	402fa6 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402fa8:	4650      	mov	r0, sl
  402faa:	4b13      	ldr	r3, [pc, #76]	; (402ff8 <prvTimerTask+0x200>)
  402fac:	4798      	blx	r3
  402fae:	e783      	b.n	402eb8 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402fb0:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402fb2:	a804      	add	r0, sp, #16
  402fb4:	4b09      	ldr	r3, [pc, #36]	; (402fdc <prvTimerTask+0x1e4>)
  402fb6:	4798      	blx	r3
  402fb8:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402fba:	9b04      	ldr	r3, [sp, #16]
  402fbc:	2b00      	cmp	r3, #0
  402fbe:	f47f af78 	bne.w	402eb2 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402fc2:	4b0e      	ldr	r3, [pc, #56]	; (402ffc <prvTimerTask+0x204>)
  402fc4:	681b      	ldr	r3, [r3, #0]
  402fc6:	681a      	ldr	r2, [r3, #0]
  402fc8:	fab2 f282 	clz	r2, r2
  402fcc:	0952      	lsrs	r2, r2, #5
  402fce:	2400      	movs	r4, #0
  402fd0:	e72d      	b.n	402e2e <prvTimerTask+0x36>
  402fd2:	bf00      	nop
  402fd4:	20400d74 	.word	0x20400d74
  402fd8:	004023b1 	.word	0x004023b1
  402fdc:	00402d41 	.word	0x00402d41
  402fe0:	20400da8 	.word	0x20400da8
  402fe4:	00402015 	.word	0x00402015
  402fe8:	00402519 	.word	0x00402519
  402fec:	00402ba9 	.word	0x00402ba9
  402ff0:	00402cd1 	.word	0x00402cd1
  402ff4:	00401e11 	.word	0x00401e11
  402ff8:	0040181d 	.word	0x0040181d
  402ffc:	20400d78 	.word	0x20400d78
  403000:	e000ed04 	.word	0xe000ed04
  403004:	004014ad 	.word	0x004014ad

00403008 <but1_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but1_callback(void) {
  403008:	b510      	push	{r4, lr}
  40300a:	b082      	sub	sp, #8
	int x1 = 0;
  40300c:	2300      	movs	r3, #0
  40300e:	9301      	str	r3, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403010:	aa02      	add	r2, sp, #8
  403012:	f842 3d08 	str.w	r3, [r2, #-8]!
	xQueueSendFromISR(xQueueBtn, &x1, &xHigherPriorityTaskWoken);
  403016:	a901      	add	r1, sp, #4
  403018:	4802      	ldr	r0, [pc, #8]	; (403024 <but1_callback+0x1c>)
  40301a:	6800      	ldr	r0, [r0, #0]
  40301c:	4c02      	ldr	r4, [pc, #8]	; (403028 <but1_callback+0x20>)
  40301e:	47a0      	blx	r4
}
  403020:	b002      	add	sp, #8
  403022:	bd10      	pop	{r4, pc}
  403024:	20400e2c 	.word	0x20400e2c
  403028:	00401d11 	.word	0x00401d11

0040302c <but2_callback>:

void but2_callback(void) {
  40302c:	b510      	push	{r4, lr}
  40302e:	b082      	sub	sp, #8
	int x1 = 1;
  403030:	2301      	movs	r3, #1
  403032:	9301      	str	r3, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403034:	2300      	movs	r3, #0
  403036:	aa02      	add	r2, sp, #8
  403038:	f842 3d08 	str.w	r3, [r2, #-8]!
	xQueueSendFromISR(xQueueBtn, &x1, &xHigherPriorityTaskWoken);
  40303c:	a901      	add	r1, sp, #4
  40303e:	4803      	ldr	r0, [pc, #12]	; (40304c <but2_callback+0x20>)
  403040:	6800      	ldr	r0, [r0, #0]
  403042:	4c03      	ldr	r4, [pc, #12]	; (403050 <but2_callback+0x24>)
  403044:	47a0      	blx	r4
}
  403046:	b002      	add	sp, #8
  403048:	bd10      	pop	{r4, pc}
  40304a:	bf00      	nop
  40304c:	20400e2c 	.word	0x20400e2c
  403050:	00401d11 	.word	0x00401d11

00403054 <but3_callback>:

void but3_callback(void) {
  403054:	b510      	push	{r4, lr}
  403056:	b082      	sub	sp, #8
	int x1 = 2;
  403058:	2302      	movs	r3, #2
  40305a:	9301      	str	r3, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  40305c:	2300      	movs	r3, #0
  40305e:	aa02      	add	r2, sp, #8
  403060:	f842 3d08 	str.w	r3, [r2, #-8]!
	xQueueSendFromISR(xQueueBtn, &x1, &xHigherPriorityTaskWoken);
  403064:	a901      	add	r1, sp, #4
  403066:	4803      	ldr	r0, [pc, #12]	; (403074 <but3_callback+0x20>)
  403068:	6800      	ldr	r0, [r0, #0]
  40306a:	4c03      	ldr	r4, [pc, #12]	; (403078 <but3_callback+0x24>)
  40306c:	47a0      	blx	r4
}
  40306e:	b002      	add	sp, #8
  403070:	bd10      	pop	{r4, pc}
  403072:	bf00      	nop
  403074:	20400e2c 	.word	0x20400e2c
  403078:	00401d11 	.word	0x00401d11

0040307c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40307c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40307e:	b083      	sub	sp, #12
  403080:	4605      	mov	r5, r0
  403082:	460c      	mov	r4, r1
	uint32_t val = 0;
  403084:	2300      	movs	r3, #0
  403086:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403088:	4b2a      	ldr	r3, [pc, #168]	; (403134 <usart_serial_getchar+0xb8>)
  40308a:	4298      	cmp	r0, r3
  40308c:	d013      	beq.n	4030b6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40308e:	4b2a      	ldr	r3, [pc, #168]	; (403138 <usart_serial_getchar+0xbc>)
  403090:	4298      	cmp	r0, r3
  403092:	d018      	beq.n	4030c6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403094:	4b29      	ldr	r3, [pc, #164]	; (40313c <usart_serial_getchar+0xc0>)
  403096:	4298      	cmp	r0, r3
  403098:	d01d      	beq.n	4030d6 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40309a:	4b29      	ldr	r3, [pc, #164]	; (403140 <usart_serial_getchar+0xc4>)
  40309c:	429d      	cmp	r5, r3
  40309e:	d022      	beq.n	4030e6 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4030a0:	4b28      	ldr	r3, [pc, #160]	; (403144 <usart_serial_getchar+0xc8>)
  4030a2:	429d      	cmp	r5, r3
  4030a4:	d027      	beq.n	4030f6 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4030a6:	4b28      	ldr	r3, [pc, #160]	; (403148 <usart_serial_getchar+0xcc>)
  4030a8:	429d      	cmp	r5, r3
  4030aa:	d02e      	beq.n	40310a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4030ac:	4b27      	ldr	r3, [pc, #156]	; (40314c <usart_serial_getchar+0xd0>)
  4030ae:	429d      	cmp	r5, r3
  4030b0:	d035      	beq.n	40311e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4030b2:	b003      	add	sp, #12
  4030b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4030b6:	461f      	mov	r7, r3
  4030b8:	4e25      	ldr	r6, [pc, #148]	; (403150 <usart_serial_getchar+0xd4>)
  4030ba:	4621      	mov	r1, r4
  4030bc:	4638      	mov	r0, r7
  4030be:	47b0      	blx	r6
  4030c0:	2800      	cmp	r0, #0
  4030c2:	d1fa      	bne.n	4030ba <usart_serial_getchar+0x3e>
  4030c4:	e7e9      	b.n	40309a <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4030c6:	461f      	mov	r7, r3
  4030c8:	4e21      	ldr	r6, [pc, #132]	; (403150 <usart_serial_getchar+0xd4>)
  4030ca:	4621      	mov	r1, r4
  4030cc:	4638      	mov	r0, r7
  4030ce:	47b0      	blx	r6
  4030d0:	2800      	cmp	r0, #0
  4030d2:	d1fa      	bne.n	4030ca <usart_serial_getchar+0x4e>
  4030d4:	e7e4      	b.n	4030a0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  4030d6:	461f      	mov	r7, r3
  4030d8:	4e1d      	ldr	r6, [pc, #116]	; (403150 <usart_serial_getchar+0xd4>)
  4030da:	4621      	mov	r1, r4
  4030dc:	4638      	mov	r0, r7
  4030de:	47b0      	blx	r6
  4030e0:	2800      	cmp	r0, #0
  4030e2:	d1fa      	bne.n	4030da <usart_serial_getchar+0x5e>
  4030e4:	e7df      	b.n	4030a6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4030e6:	461f      	mov	r7, r3
  4030e8:	4e19      	ldr	r6, [pc, #100]	; (403150 <usart_serial_getchar+0xd4>)
  4030ea:	4621      	mov	r1, r4
  4030ec:	4638      	mov	r0, r7
  4030ee:	47b0      	blx	r6
  4030f0:	2800      	cmp	r0, #0
  4030f2:	d1fa      	bne.n	4030ea <usart_serial_getchar+0x6e>
  4030f4:	e7da      	b.n	4030ac <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4030f6:	461e      	mov	r6, r3
  4030f8:	4d16      	ldr	r5, [pc, #88]	; (403154 <usart_serial_getchar+0xd8>)
  4030fa:	a901      	add	r1, sp, #4
  4030fc:	4630      	mov	r0, r6
  4030fe:	47a8      	blx	r5
  403100:	2800      	cmp	r0, #0
  403102:	d1fa      	bne.n	4030fa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403104:	9b01      	ldr	r3, [sp, #4]
  403106:	7023      	strb	r3, [r4, #0]
  403108:	e7d3      	b.n	4030b2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40310a:	461e      	mov	r6, r3
  40310c:	4d11      	ldr	r5, [pc, #68]	; (403154 <usart_serial_getchar+0xd8>)
  40310e:	a901      	add	r1, sp, #4
  403110:	4630      	mov	r0, r6
  403112:	47a8      	blx	r5
  403114:	2800      	cmp	r0, #0
  403116:	d1fa      	bne.n	40310e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403118:	9b01      	ldr	r3, [sp, #4]
  40311a:	7023      	strb	r3, [r4, #0]
  40311c:	e7c9      	b.n	4030b2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40311e:	461e      	mov	r6, r3
  403120:	4d0c      	ldr	r5, [pc, #48]	; (403154 <usart_serial_getchar+0xd8>)
  403122:	a901      	add	r1, sp, #4
  403124:	4630      	mov	r0, r6
  403126:	47a8      	blx	r5
  403128:	2800      	cmp	r0, #0
  40312a:	d1fa      	bne.n	403122 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40312c:	9b01      	ldr	r3, [sp, #4]
  40312e:	7023      	strb	r3, [r4, #0]
}
  403130:	e7bf      	b.n	4030b2 <usart_serial_getchar+0x36>
  403132:	bf00      	nop
  403134:	400e0800 	.word	0x400e0800
  403138:	400e0a00 	.word	0x400e0a00
  40313c:	400e1a00 	.word	0x400e1a00
  403140:	400e1c00 	.word	0x400e1c00
  403144:	40024000 	.word	0x40024000
  403148:	40028000 	.word	0x40028000
  40314c:	4002c000 	.word	0x4002c000
  403150:	0040106f 	.word	0x0040106f
  403154:	0040117b 	.word	0x0040117b

00403158 <usart_serial_putchar>:
{
  403158:	b570      	push	{r4, r5, r6, lr}
  40315a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40315c:	4b2a      	ldr	r3, [pc, #168]	; (403208 <usart_serial_putchar+0xb0>)
  40315e:	4298      	cmp	r0, r3
  403160:	d013      	beq.n	40318a <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403162:	4b2a      	ldr	r3, [pc, #168]	; (40320c <usart_serial_putchar+0xb4>)
  403164:	4298      	cmp	r0, r3
  403166:	d019      	beq.n	40319c <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403168:	4b29      	ldr	r3, [pc, #164]	; (403210 <usart_serial_putchar+0xb8>)
  40316a:	4298      	cmp	r0, r3
  40316c:	d01f      	beq.n	4031ae <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40316e:	4b29      	ldr	r3, [pc, #164]	; (403214 <usart_serial_putchar+0xbc>)
  403170:	4298      	cmp	r0, r3
  403172:	d025      	beq.n	4031c0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403174:	4b28      	ldr	r3, [pc, #160]	; (403218 <usart_serial_putchar+0xc0>)
  403176:	4298      	cmp	r0, r3
  403178:	d02b      	beq.n	4031d2 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40317a:	4b28      	ldr	r3, [pc, #160]	; (40321c <usart_serial_putchar+0xc4>)
  40317c:	4298      	cmp	r0, r3
  40317e:	d031      	beq.n	4031e4 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403180:	4b27      	ldr	r3, [pc, #156]	; (403220 <usart_serial_putchar+0xc8>)
  403182:	4298      	cmp	r0, r3
  403184:	d037      	beq.n	4031f6 <usart_serial_putchar+0x9e>
	return 0;
  403186:	2000      	movs	r0, #0
}
  403188:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40318a:	461e      	mov	r6, r3
  40318c:	4d25      	ldr	r5, [pc, #148]	; (403224 <usart_serial_putchar+0xcc>)
  40318e:	4621      	mov	r1, r4
  403190:	4630      	mov	r0, r6
  403192:	47a8      	blx	r5
  403194:	2800      	cmp	r0, #0
  403196:	d1fa      	bne.n	40318e <usart_serial_putchar+0x36>
		return 1;
  403198:	2001      	movs	r0, #1
  40319a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40319c:	461e      	mov	r6, r3
  40319e:	4d21      	ldr	r5, [pc, #132]	; (403224 <usart_serial_putchar+0xcc>)
  4031a0:	4621      	mov	r1, r4
  4031a2:	4630      	mov	r0, r6
  4031a4:	47a8      	blx	r5
  4031a6:	2800      	cmp	r0, #0
  4031a8:	d1fa      	bne.n	4031a0 <usart_serial_putchar+0x48>
		return 1;
  4031aa:	2001      	movs	r0, #1
  4031ac:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4031ae:	461e      	mov	r6, r3
  4031b0:	4d1c      	ldr	r5, [pc, #112]	; (403224 <usart_serial_putchar+0xcc>)
  4031b2:	4621      	mov	r1, r4
  4031b4:	4630      	mov	r0, r6
  4031b6:	47a8      	blx	r5
  4031b8:	2800      	cmp	r0, #0
  4031ba:	d1fa      	bne.n	4031b2 <usart_serial_putchar+0x5a>
		return 1;
  4031bc:	2001      	movs	r0, #1
  4031be:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4031c0:	461e      	mov	r6, r3
  4031c2:	4d18      	ldr	r5, [pc, #96]	; (403224 <usart_serial_putchar+0xcc>)
  4031c4:	4621      	mov	r1, r4
  4031c6:	4630      	mov	r0, r6
  4031c8:	47a8      	blx	r5
  4031ca:	2800      	cmp	r0, #0
  4031cc:	d1fa      	bne.n	4031c4 <usart_serial_putchar+0x6c>
		return 1;
  4031ce:	2001      	movs	r0, #1
  4031d0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4031d2:	461e      	mov	r6, r3
  4031d4:	4d14      	ldr	r5, [pc, #80]	; (403228 <usart_serial_putchar+0xd0>)
  4031d6:	4621      	mov	r1, r4
  4031d8:	4630      	mov	r0, r6
  4031da:	47a8      	blx	r5
  4031dc:	2800      	cmp	r0, #0
  4031de:	d1fa      	bne.n	4031d6 <usart_serial_putchar+0x7e>
		return 1;
  4031e0:	2001      	movs	r0, #1
  4031e2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4031e4:	461e      	mov	r6, r3
  4031e6:	4d10      	ldr	r5, [pc, #64]	; (403228 <usart_serial_putchar+0xd0>)
  4031e8:	4621      	mov	r1, r4
  4031ea:	4630      	mov	r0, r6
  4031ec:	47a8      	blx	r5
  4031ee:	2800      	cmp	r0, #0
  4031f0:	d1fa      	bne.n	4031e8 <usart_serial_putchar+0x90>
		return 1;
  4031f2:	2001      	movs	r0, #1
  4031f4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4031f6:	461e      	mov	r6, r3
  4031f8:	4d0b      	ldr	r5, [pc, #44]	; (403228 <usart_serial_putchar+0xd0>)
  4031fa:	4621      	mov	r1, r4
  4031fc:	4630      	mov	r0, r6
  4031fe:	47a8      	blx	r5
  403200:	2800      	cmp	r0, #0
  403202:	d1fa      	bne.n	4031fa <usart_serial_putchar+0xa2>
		return 1;
  403204:	2001      	movs	r0, #1
  403206:	bd70      	pop	{r4, r5, r6, pc}
  403208:	400e0800 	.word	0x400e0800
  40320c:	400e0a00 	.word	0x400e0a00
  403210:	400e1a00 	.word	0x400e1a00
  403214:	400e1c00 	.word	0x400e1c00
  403218:	40024000 	.word	0x40024000
  40321c:	40028000 	.word	0x40028000
  403220:	4002c000 	.word	0x4002c000
  403224:	0040105d 	.word	0x0040105d
  403228:	00401165 	.word	0x00401165

0040322c <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  40322c:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40322e:	460a      	mov	r2, r1
  403230:	4601      	mov	r1, r0
  403232:	4802      	ldr	r0, [pc, #8]	; (40323c <vApplicationStackOverflowHook+0x10>)
  403234:	4b02      	ldr	r3, [pc, #8]	; (403240 <vApplicationStackOverflowHook+0x14>)
  403236:	4798      	blx	r3
  403238:	e7fe      	b.n	403238 <vApplicationStackOverflowHook+0xc>
  40323a:	bf00      	nop
  40323c:	00406b38 	.word	0x00406b38
  403240:	00403b91 	.word	0x00403b91

00403244 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  403244:	4770      	bx	lr

00403246 <vApplicationMallocFailedHook>:
  403246:	f04f 0380 	mov.w	r3, #128	; 0x80
  40324a:	b672      	cpsid	i
  40324c:	f383 8811 	msr	BASEPRI, r3
  403250:	f3bf 8f6f 	isb	sy
  403254:	f3bf 8f4f 	dsb	sy
  403258:	b662      	cpsie	i
  40325a:	e7fe      	b.n	40325a <vApplicationMallocFailedHook+0x14>

0040325c <io_init>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void io_init(void) {
  40325c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40325e:	b083      	sub	sp, #12
	pmc_enable_periph_clk(LED1_PIO_ID);
  403260:	200a      	movs	r0, #10
  403262:	4c48      	ldr	r4, [pc, #288]	; (403384 <io_init+0x128>)
  403264:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  403266:	200c      	movs	r0, #12
  403268:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  40326a:	200b      	movs	r0, #11
  40326c:	47a0      	blx	r4
	pmc_enable_periph_clk(BUZZER_PIO_ID);
  40326e:	200c      	movs	r0, #12
  403270:	47a0      	blx	r4
	
	pmc_enable_periph_clk(BUT1_PIO_ID);
  403272:	2010      	movs	r0, #16
  403274:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT2_PIO_ID);
  403276:	200c      	movs	r0, #12
  403278:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT3_PIO_ID);
  40327a:	200a      	movs	r0, #10
  40327c:	47a0      	blx	r4

	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  40327e:	4e42      	ldr	r6, [pc, #264]	; (403388 <io_init+0x12c>)
  403280:	2300      	movs	r3, #0
  403282:	2201      	movs	r2, #1
  403284:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403288:	4630      	mov	r0, r6
  40328a:	4d40      	ldr	r5, [pc, #256]	; (40338c <io_init+0x130>)
  40328c:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  40328e:	4c40      	ldr	r4, [pc, #256]	; (403390 <io_init+0x134>)
  403290:	2300      	movs	r3, #0
  403292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403296:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40329a:	4620      	mov	r0, r4
  40329c:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  40329e:	2300      	movs	r3, #0
  4032a0:	2204      	movs	r2, #4
  4032a2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4032a6:	483b      	ldr	r0, [pc, #236]	; (403394 <io_init+0x138>)
  4032a8:	47a8      	blx	r5
	pio_configure(BUZZER_PIO, PIO_OUTPUT_0, BUZZER_PIO_IDX_MASK, PIO_DEFAULT);
  4032aa:	2300      	movs	r3, #0
  4032ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4032b0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4032b4:	4620      	mov	r0, r4
  4032b6:	47a8      	blx	r5
	
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  4032b8:	4f37      	ldr	r7, [pc, #220]	; (403398 <io_init+0x13c>)
  4032ba:	2309      	movs	r3, #9
  4032bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4032c0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4032c4:	4638      	mov	r0, r7
  4032c6:	47a8      	blx	r5
	pio_configure(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  4032c8:	2309      	movs	r3, #9
  4032ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4032ce:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4032d2:	4620      	mov	r0, r4
  4032d4:	47a8      	blx	r5
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  4032d6:	2309      	movs	r3, #9
  4032d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4032dc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4032e0:	4630      	mov	r0, r6
  4032e2:	47a8      	blx	r5
	
	
	pio_set_debounce_filter(BUT1_PIO, BUT1_PIO_IDX_MASK, 40);
  4032e4:	2228      	movs	r2, #40	; 0x28
  4032e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4032ea:	4638      	mov	r0, r7
  4032ec:	4d2b      	ldr	r5, [pc, #172]	; (40339c <io_init+0x140>)
  4032ee:	47a8      	blx	r5
	pio_set_debounce_filter(BUT2_PIO, BUT2_PIO_IDX_MASK, 40);
  4032f0:	2228      	movs	r2, #40	; 0x28
  4032f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4032f6:	4620      	mov	r0, r4
  4032f8:	47a8      	blx	r5
	pio_set_debounce_filter(BUT3_PIO, BUT3_PIO_IDX_MASK, 40);
  4032fa:	2228      	movs	r2, #40	; 0x28
  4032fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403300:	4630      	mov	r0, r6
  403302:	47a8      	blx	r5
	
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but1_callback);
  403304:	4b26      	ldr	r3, [pc, #152]	; (4033a0 <io_init+0x144>)
  403306:	9300      	str	r3, [sp, #0]
  403308:	2350      	movs	r3, #80	; 0x50
  40330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40330e:	2110      	movs	r1, #16
  403310:	4638      	mov	r0, r7
  403312:	4d24      	ldr	r5, [pc, #144]	; (4033a4 <io_init+0x148>)
  403314:	47a8      	blx	r5
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but2_callback);
  403316:	4b24      	ldr	r3, [pc, #144]	; (4033a8 <io_init+0x14c>)
  403318:	9300      	str	r3, [sp, #0]
  40331a:	2350      	movs	r3, #80	; 0x50
  40331c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403320:	210c      	movs	r1, #12
  403322:	4620      	mov	r0, r4
  403324:	47a8      	blx	r5
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but3_callback);
  403326:	4b21      	ldr	r3, [pc, #132]	; (4033ac <io_init+0x150>)
  403328:	9300      	str	r3, [sp, #0]
  40332a:	2350      	movs	r3, #80	; 0x50
  40332c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403330:	210a      	movs	r1, #10
  403332:	4630      	mov	r0, r6
  403334:	47a8      	blx	r5


	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  403336:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40333a:	4638      	mov	r0, r7
  40333c:	4d1c      	ldr	r5, [pc, #112]	; (4033b0 <io_init+0x154>)
  40333e:	47a8      	blx	r5
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  403340:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403344:	4620      	mov	r0, r4
  403346:	47a8      	blx	r5
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  403348:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40334c:	4630      	mov	r0, r6
  40334e:	47a8      	blx	r5

	pio_get_interrupt_status(BUT1_PIO);
  403350:	4638      	mov	r0, r7
  403352:	4d18      	ldr	r5, [pc, #96]	; (4033b4 <io_init+0x158>)
  403354:	47a8      	blx	r5
	pio_get_interrupt_status(BUT2_PIO);
  403356:	4620      	mov	r0, r4
  403358:	47a8      	blx	r5
	pio_get_interrupt_status(BUT3_PIO);
  40335a:	4630      	mov	r0, r6
  40335c:	47a8      	blx	r5
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40335e:	4b16      	ldr	r3, [pc, #88]	; (4033b8 <io_init+0x15c>)
  403360:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403364:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403366:	2280      	movs	r2, #128	; 0x80
  403368:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40336c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403370:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403372:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403376:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40337a:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40337c:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC_EnableIRQ(BUT2_PIO_ID);
	NVIC_SetPriority(BUT2_PIO_ID, 4);
	
	NVIC_EnableIRQ(BUT3_PIO_ID);
	NVIC_SetPriority(BUT3_PIO_ID, 4);
}
  403380:	b003      	add	sp, #12
  403382:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403384:	00401009 	.word	0x00401009
  403388:	400e0e00 	.word	0x400e0e00
  40338c:	00400ce9 	.word	0x00400ce9
  403390:	400e1200 	.word	0x400e1200
  403394:	400e1000 	.word	0x400e1000
  403398:	400e1400 	.word	0x400e1400
  40339c:	00400bd5 	.word	0x00400bd5
  4033a0:	00403009 	.word	0x00403009
  4033a4:	00400e15 	.word	0x00400e15
  4033a8:	0040302d 	.word	0x0040302d
  4033ac:	00403055 	.word	0x00403055
  4033b0:	00400db7 	.word	0x00400db7
  4033b4:	00400dbb 	.word	0x00400dbb
  4033b8:	e000e100 	.word	0xe000e100

004033bc <genius_get_sequence>:

int genius_get_sequence(int level, int *sequence){
  4033bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int n = level + 3;
  4033c0:	f100 0903 	add.w	r9, r0, #3

	for (int i=0; i< n ; i++) {
  4033c4:	f1b9 0f00 	cmp.w	r9, #0
  4033c8:	dd12      	ble.n	4033f0 <genius_get_sequence+0x34>
  4033ca:	1f0d      	subs	r5, r1, #4
  4033cc:	464e      	mov	r6, r9
  4033ce:	2400      	movs	r4, #0
		*(sequence + i) = rand() % 3;
  4033d0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4033fc <genius_get_sequence+0x40>
  4033d4:	4f08      	ldr	r7, [pc, #32]	; (4033f8 <genius_get_sequence+0x3c>)
  4033d6:	47c0      	blx	r8
  4033d8:	fb87 2300 	smull	r2, r3, r7, r0
  4033dc:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  4033e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4033e4:	1ac3      	subs	r3, r0, r3
  4033e6:	f845 3f04 	str.w	r3, [r5, #4]!
	for (int i=0; i< n ; i++) {
  4033ea:	3401      	adds	r4, #1
  4033ec:	42b4      	cmp	r4, r6
  4033ee:	d1f2      	bne.n	4033d6 <genius_get_sequence+0x1a>
	}

	return n;
}
  4033f0:	4648      	mov	r0, r9
  4033f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4033f6:	bf00      	nop
  4033f8:	55555556 	.word	0x55555556
  4033fc:	00404321 	.word	0x00404321

00403400 <pin_toggle>:

void pin_toggle(Pio *pio, uint32_t mask) {
  403400:	b538      	push	{r3, r4, r5, lr}
  403402:	4604      	mov	r4, r0
  403404:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  403406:	4b06      	ldr	r3, [pc, #24]	; (403420 <pin_toggle+0x20>)
  403408:	4798      	blx	r3
  40340a:	b920      	cbnz	r0, 403416 <pin_toggle+0x16>
	pio_clear(pio, mask);
	else
	pio_set(pio,mask);
  40340c:	4629      	mov	r1, r5
  40340e:	4620      	mov	r0, r4
  403410:	4b04      	ldr	r3, [pc, #16]	; (403424 <pin_toggle+0x24>)
  403412:	4798      	blx	r3
  403414:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  403416:	4629      	mov	r1, r5
  403418:	4620      	mov	r0, r4
  40341a:	4b03      	ldr	r3, [pc, #12]	; (403428 <pin_toggle+0x28>)
  40341c:	4798      	blx	r3
  40341e:	bd38      	pop	{r3, r4, r5, pc}
  403420:	00400d79 	.word	0x00400d79
  403424:	00400bef 	.word	0x00400bef
  403428:	00400bf3 	.word	0x00400bf3

0040342c <TC0_Handler>:
void TC0_Handler(void) {
  40342c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40342e:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 0);
  403430:	2100      	movs	r1, #0
  403432:	4808      	ldr	r0, [pc, #32]	; (403454 <TC0_Handler+0x28>)
  403434:	4b08      	ldr	r3, [pc, #32]	; (403458 <TC0_Handler+0x2c>)
  403436:	4798      	blx	r3
  403438:	9001      	str	r0, [sp, #4]
  40343a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		pin_toggle(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  40343e:	4f07      	ldr	r7, [pc, #28]	; (40345c <TC0_Handler+0x30>)
  403440:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  403444:	4d06      	ldr	r5, [pc, #24]	; (403460 <TC0_Handler+0x34>)
  403446:	4631      	mov	r1, r6
  403448:	4638      	mov	r0, r7
  40344a:	47a8      	blx	r5
	for (int i = 0; i < pulsos; i++) {
  40344c:	3c01      	subs	r4, #1
  40344e:	d1fa      	bne.n	403446 <TC0_Handler+0x1a>
}
  403450:	b003      	add	sp, #12
  403452:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403454:	4000c000 	.word	0x4000c000
  403458:	00400331 	.word	0x00400331
  40345c:	400e1200 	.word	0x400e1200
  403460:	00403401 	.word	0x00403401

00403464 <TC_init>:
	delay_us(t/2);
	clear_buzzer(); // 0
	delay_us(t/2);
}

void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq) {
  403464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403468:	b085      	sub	sp, #20
  40346a:	4606      	mov	r6, r0
  40346c:	460c      	mov	r4, r1
  40346e:	4617      	mov	r7, r2
  403470:	4698      	mov	r8, r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configura o PMC */
	pmc_enable_periph_clk(ID_TC);
  403472:	4608      	mov	r0, r1
  403474:	4b1c      	ldr	r3, [pc, #112]	; (4034e8 <TC_init+0x84>)
  403476:	4798      	blx	r3

	/** Configura o TC para operar em  freq hz e interrupçcão no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  403478:	4d1c      	ldr	r5, [pc, #112]	; (4034ec <TC_init+0x88>)
  40347a:	9500      	str	r5, [sp, #0]
  40347c:	ab02      	add	r3, sp, #8
  40347e:	aa03      	add	r2, sp, #12
  403480:	4629      	mov	r1, r5
  403482:	4640      	mov	r0, r8
  403484:	f8df 9080 	ldr.w	r9, [pc, #128]	; 403508 <TC_init+0xa4>
  403488:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  40348a:	9a02      	ldr	r2, [sp, #8]
  40348c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403490:	4639      	mov	r1, r7
  403492:	4630      	mov	r0, r6
  403494:	4b16      	ldr	r3, [pc, #88]	; (4034f0 <TC_init+0x8c>)
  403496:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  403498:	9a03      	ldr	r2, [sp, #12]
  40349a:	fbb5 f2f2 	udiv	r2, r5, r2
  40349e:	fbb2 f2f8 	udiv	r2, r2, r8
  4034a2:	4639      	mov	r1, r7
  4034a4:	4630      	mov	r0, r6
  4034a6:	4b13      	ldr	r3, [pc, #76]	; (4034f4 <TC_init+0x90>)
  4034a8:	4798      	blx	r3

	/* Configura NVIC*/
	NVIC_SetPriority(ID_TC, 4);
  4034aa:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  4034ac:	2b00      	cmp	r3, #0
  4034ae:	db13      	blt.n	4034d8 <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034b0:	4a11      	ldr	r2, [pc, #68]	; (4034f8 <TC_init+0x94>)
  4034b2:	2180      	movs	r1, #128	; 0x80
  4034b4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034b6:	095b      	lsrs	r3, r3, #5
  4034b8:	f004 041f 	and.w	r4, r4, #31
  4034bc:	2201      	movs	r2, #1
  4034be:	fa02 f404 	lsl.w	r4, r2, r4
  4034c2:	4a0e      	ldr	r2, [pc, #56]	; (4034fc <TC_init+0x98>)
  4034c4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4034c8:	2210      	movs	r2, #16
  4034ca:	4639      	mov	r1, r7
  4034cc:	4630      	mov	r0, r6
  4034ce:	4b0c      	ldr	r3, [pc, #48]	; (403500 <TC_init+0x9c>)
  4034d0:	4798      	blx	r3
}
  4034d2:	b005      	add	sp, #20
  4034d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4034d8:	f004 010f 	and.w	r1, r4, #15
  4034dc:	4a09      	ldr	r2, [pc, #36]	; (403504 <TC_init+0xa0>)
  4034de:	440a      	add	r2, r1
  4034e0:	2180      	movs	r1, #128	; 0x80
  4034e2:	7611      	strb	r1, [r2, #24]
  4034e4:	e7e7      	b.n	4034b6 <TC_init+0x52>
  4034e6:	bf00      	nop
  4034e8:	00401009 	.word	0x00401009
  4034ec:	11e1a300 	.word	0x11e1a300
  4034f0:	004002f7 	.word	0x004002f7
  4034f4:	00400321 	.word	0x00400321
  4034f8:	e000e400 	.word	0xe000e400
  4034fc:	e000e100 	.word	0xe000e100
  403500:	00400329 	.word	0x00400329
  403504:	e000ecfc 	.word	0xe000ecfc
  403508:	00400339 	.word	0x00400339

0040350c <task_game>:
static void task_game(void *pvParameters) {
  40350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403510:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
	io_init();
  403514:	4b69      	ldr	r3, [pc, #420]	; (4036bc <task_game+0x1b0>)
  403516:	4798      	blx	r3
	gfx_mono_ssd1306_init();
  403518:	4b69      	ldr	r3, [pc, #420]	; (4036c0 <task_game+0x1b4>)
  40351a:	4798      	blx	r3
	gfx_mono_draw_string("Level: 0", 0, 0, &sysfont);
  40351c:	4b69      	ldr	r3, [pc, #420]	; (4036c4 <task_game+0x1b8>)
  40351e:	2200      	movs	r2, #0
  403520:	4611      	mov	r1, r2
  403522:	4869      	ldr	r0, [pc, #420]	; (4036c8 <task_game+0x1bc>)
  403524:	4c69      	ldr	r4, [pc, #420]	; (4036cc <task_game+0x1c0>)
  403526:	47a0      	blx	r4
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403528:	2101      	movs	r1, #1
  40352a:	4869      	ldr	r0, [pc, #420]	; (4036d0 <task_game+0x1c4>)
  40352c:	4c69      	ldr	r4, [pc, #420]	; (4036d4 <task_game+0x1c8>)
  40352e:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403530:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403534:	4868      	ldr	r0, [pc, #416]	; (4036d8 <task_game+0x1cc>)
  403536:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  403538:	2104      	movs	r1, #4
  40353a:	4868      	ldr	r0, [pc, #416]	; (4036dc <task_game+0x1d0>)
  40353c:	47a0      	blx	r4
	int level = 0;
  40353e:	2300      	movs	r3, #0
  403540:	9301      	str	r3, [sp, #4]
				delay_ms(500);
  403542:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 403718 <task_game+0x20c>
  403546:	e09e      	b.n	403686 <task_game+0x17a>
  403548:	3404      	adds	r4, #4
  40354a:	4627      	mov	r7, r4
			if (sequence[i]==1) {
  40354c:	6823      	ldr	r3, [r4, #0]
  40354e:	2b01      	cmp	r3, #1
  403550:	d026      	beq.n	4035a0 <task_game+0x94>
			if (sequence[i]==2) {
  403552:	683b      	ldr	r3, [r7, #0]
  403554:	2b02      	cmp	r3, #2
  403556:	d042      	beq.n	4035de <task_game+0xd2>
			delay_ms(1000);
  403558:	4861      	ldr	r0, [pc, #388]	; (4036e0 <task_game+0x1d4>)
  40355a:	47b0      	blx	r6
		for (int i=0; i<nSequence; i++) {
  40355c:	3501      	adds	r5, #1
  40355e:	45aa      	cmp	sl, r5
  403560:	f000 80a4 	beq.w	4036ac <task_game+0x1a0>
			if (sequence[i]==0) {
  403564:	6863      	ldr	r3, [r4, #4]
  403566:	2b00      	cmp	r3, #0
  403568:	d1ee      	bne.n	403548 <task_game+0x3c>
				TC_init(TC0, ID_TC0, 0, 1000);
  40356a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40356e:	2200      	movs	r2, #0
  403570:	2117      	movs	r1, #23
  403572:	4640      	mov	r0, r8
  403574:	4f5b      	ldr	r7, [pc, #364]	; (4036e4 <task_game+0x1d8>)
  403576:	47b8      	blx	r7
				tc_start(TC0, 0);
  403578:	2100      	movs	r1, #0
  40357a:	4640      	mov	r0, r8
  40357c:	4b5a      	ldr	r3, [pc, #360]	; (4036e8 <task_game+0x1dc>)
  40357e:	4798      	blx	r3
				pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  403580:	2101      	movs	r1, #1
  403582:	4853      	ldr	r0, [pc, #332]	; (4036d0 <task_game+0x1c4>)
  403584:	4f59      	ldr	r7, [pc, #356]	; (4036ec <task_game+0x1e0>)
  403586:	47b8      	blx	r7
				delay_ms(500);
  403588:	4648      	mov	r0, r9
  40358a:	47b0      	blx	r6
				pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  40358c:	2101      	movs	r1, #1
  40358e:	4850      	ldr	r0, [pc, #320]	; (4036d0 <task_game+0x1c4>)
  403590:	47b8      	blx	r7
				delay_ms(500);
  403592:	4648      	mov	r0, r9
  403594:	47b0      	blx	r6
				tc_stop(TC0, 0);
  403596:	2100      	movs	r1, #0
  403598:	4640      	mov	r0, r8
  40359a:	4b55      	ldr	r3, [pc, #340]	; (4036f0 <task_game+0x1e4>)
  40359c:	4798      	blx	r3
  40359e:	e7d3      	b.n	403548 <task_game+0x3c>
				TC_init(TC0, ID_TC0, 0, 1500);
  4035a0:	f240 53dc 	movw	r3, #1500	; 0x5dc
  4035a4:	2200      	movs	r2, #0
  4035a6:	2117      	movs	r1, #23
  4035a8:	4640      	mov	r0, r8
  4035aa:	f8df b138 	ldr.w	fp, [pc, #312]	; 4036e4 <task_game+0x1d8>
  4035ae:	47d8      	blx	fp
				tc_start(TC0, 0);
  4035b0:	2100      	movs	r1, #0
  4035b2:	4640      	mov	r0, r8
  4035b4:	4b4c      	ldr	r3, [pc, #304]	; (4036e8 <task_game+0x1dc>)
  4035b6:	4798      	blx	r3
				pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);
  4035b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4035bc:	4846      	ldr	r0, [pc, #280]	; (4036d8 <task_game+0x1cc>)
  4035be:	f8df b12c 	ldr.w	fp, [pc, #300]	; 4036ec <task_game+0x1e0>
  4035c2:	47d8      	blx	fp
				delay_ms(500);
  4035c4:	4648      	mov	r0, r9
  4035c6:	47b0      	blx	r6
				pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);
  4035c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4035cc:	4842      	ldr	r0, [pc, #264]	; (4036d8 <task_game+0x1cc>)
  4035ce:	47d8      	blx	fp
				delay_ms(500);
  4035d0:	4648      	mov	r0, r9
  4035d2:	47b0      	blx	r6
				tc_stop(TC0, 0);
  4035d4:	2100      	movs	r1, #0
  4035d6:	4640      	mov	r0, r8
  4035d8:	4b45      	ldr	r3, [pc, #276]	; (4036f0 <task_game+0x1e4>)
  4035da:	4798      	blx	r3
  4035dc:	e7b9      	b.n	403552 <task_game+0x46>
				TC_init(TC0, ID_TC0, 0, 2000);
  4035de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  4035e2:	2200      	movs	r2, #0
  4035e4:	2117      	movs	r1, #23
  4035e6:	4640      	mov	r0, r8
  4035e8:	4f3e      	ldr	r7, [pc, #248]	; (4036e4 <task_game+0x1d8>)
  4035ea:	47b8      	blx	r7
				tc_start(TC0, 0);
  4035ec:	2100      	movs	r1, #0
  4035ee:	4640      	mov	r0, r8
  4035f0:	4b3d      	ldr	r3, [pc, #244]	; (4036e8 <task_game+0x1dc>)
  4035f2:	4798      	blx	r3
				pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  4035f4:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 4036dc <task_game+0x1d0>
  4035f8:	2104      	movs	r1, #4
  4035fa:	4658      	mov	r0, fp
  4035fc:	4f3b      	ldr	r7, [pc, #236]	; (4036ec <task_game+0x1e0>)
  4035fe:	47b8      	blx	r7
				delay_ms(500);
  403600:	4648      	mov	r0, r9
  403602:	47b0      	blx	r6
				pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  403604:	2104      	movs	r1, #4
  403606:	4658      	mov	r0, fp
  403608:	47b8      	blx	r7
				delay_ms(500);
  40360a:	4648      	mov	r0, r9
  40360c:	47b0      	blx	r6
				tc_stop(TC0, 0);
  40360e:	2100      	movs	r1, #0
  403610:	4640      	mov	r0, r8
  403612:	4b37      	ldr	r3, [pc, #220]	; (4036f0 <task_game+0x1e4>)
  403614:	4798      	blx	r3
  403616:	e79f      	b.n	403558 <task_game+0x4c>
		for (int i=0; i<nSequence; i++) {
  403618:	3401      	adds	r4, #1
  40361a:	42ac      	cmp	r4, r5
  40361c:	d030      	beq.n	403680 <task_game+0x174>
			if (xQueueReceive(xQueueBtn, &num, 1000)) {
  40361e:	2300      	movs	r3, #0
  403620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403624:	a903      	add	r1, sp, #12
  403626:	6838      	ldr	r0, [r7, #0]
  403628:	47b0      	blx	r6
  40362a:	2800      	cmp	r0, #0
  40362c:	d0f4      	beq.n	403618 <task_game+0x10c>
				printf("Num %d \n", num);
  40362e:	9903      	ldr	r1, [sp, #12]
  403630:	4830      	ldr	r0, [pc, #192]	; (4036f4 <task_game+0x1e8>)
  403632:	4b31      	ldr	r3, [pc, #196]	; (4036f8 <task_game+0x1ec>)
  403634:	4798      	blx	r3
				if (num != sequence[i]) {
  403636:	ab04      	add	r3, sp, #16
  403638:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
  40363c:	9b03      	ldr	r3, [sp, #12]
  40363e:	4299      	cmp	r1, r3
  403640:	d0ea      	beq.n	403618 <task_game+0x10c>
					printf("Seq %d \n", sequence[i]);
  403642:	482e      	ldr	r0, [pc, #184]	; (4036fc <task_game+0x1f0>)
  403644:	4b2c      	ldr	r3, [pc, #176]	; (4036f8 <task_game+0x1ec>)
  403646:	4798      	blx	r3
					gfx_mono_draw_string("             ", 0,10, &sysfont);
  403648:	f8df a078 	ldr.w	sl, [pc, #120]	; 4036c4 <task_game+0x1b8>
  40364c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 40371c <task_game+0x210>
  403650:	4653      	mov	r3, sl
  403652:	220a      	movs	r2, #10
  403654:	2100      	movs	r1, #0
  403656:	4658      	mov	r0, fp
  403658:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4036cc <task_game+0x1c0>
  40365c:	47c0      	blx	r8
					gfx_mono_draw_string("ERROU", 0,10, &sysfont);
  40365e:	4653      	mov	r3, sl
  403660:	220a      	movs	r2, #10
  403662:	2100      	movs	r1, #0
  403664:	4826      	ldr	r0, [pc, #152]	; (403700 <task_game+0x1f4>)
  403666:	47c0      	blx	r8
					delay_ms(1000);
  403668:	481d      	ldr	r0, [pc, #116]	; (4036e0 <task_game+0x1d4>)
  40366a:	4b26      	ldr	r3, [pc, #152]	; (403704 <task_game+0x1f8>)
  40366c:	4798      	blx	r3
					gfx_mono_draw_string("             ", 0,10, &sysfont);
  40366e:	4653      	mov	r3, sl
  403670:	220a      	movs	r2, #10
  403672:	2100      	movs	r1, #0
  403674:	4658      	mov	r0, fp
  403676:	47c0      	blx	r8
  403678:	e7ce      	b.n	403618 <task_game+0x10c>
		delay_ms(1000);
  40367a:	4819      	ldr	r0, [pc, #100]	; (4036e0 <task_game+0x1d4>)
  40367c:	4b21      	ldr	r3, [pc, #132]	; (403704 <task_game+0x1f8>)
  40367e:	4798      	blx	r3
		level++;
  403680:	9b01      	ldr	r3, [sp, #4]
  403682:	3301      	adds	r3, #1
  403684:	9301      	str	r3, [sp, #4]
		nSequence = genius_get_sequence(level, sequence);
  403686:	a904      	add	r1, sp, #16
  403688:	9801      	ldr	r0, [sp, #4]
  40368a:	4b1f      	ldr	r3, [pc, #124]	; (403708 <task_game+0x1fc>)
  40368c:	4798      	blx	r3
  40368e:	4682      	mov	sl, r0
		xQueueReset(xQueueBtn);
  403690:	2100      	movs	r1, #0
  403692:	4b1e      	ldr	r3, [pc, #120]	; (40370c <task_game+0x200>)
  403694:	6818      	ldr	r0, [r3, #0]
  403696:	4b1e      	ldr	r3, [pc, #120]	; (403710 <task_game+0x204>)
  403698:	4798      	blx	r3
		for (int i=0; i<nSequence; i++) {
  40369a:	f1ba 0f00 	cmp.w	sl, #0
  40369e:	ddec      	ble.n	40367a <task_game+0x16e>
  4036a0:	ac03      	add	r4, sp, #12
  4036a2:	2500      	movs	r5, #0
				TC_init(TC0, ID_TC0, 0, 1000);
  4036a4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 403720 <task_game+0x214>
				delay_ms(500);
  4036a8:	4e16      	ldr	r6, [pc, #88]	; (403704 <task_game+0x1f8>)
  4036aa:	e75b      	b.n	403564 <task_game+0x58>
		delay_ms(1000);
  4036ac:	480c      	ldr	r0, [pc, #48]	; (4036e0 <task_game+0x1d4>)
  4036ae:	4b15      	ldr	r3, [pc, #84]	; (403704 <task_game+0x1f8>)
  4036b0:	4798      	blx	r3
  4036b2:	2400      	movs	r4, #0
			if (xQueueReceive(xQueueBtn, &num, 1000)) {
  4036b4:	4f15      	ldr	r7, [pc, #84]	; (40370c <task_game+0x200>)
  4036b6:	4e17      	ldr	r6, [pc, #92]	; (403714 <task_game+0x208>)
  4036b8:	e7b1      	b.n	40361e <task_game+0x112>
  4036ba:	bf00      	nop
  4036bc:	0040325d 	.word	0x0040325d
  4036c0:	00400621 	.word	0x00400621
  4036c4:	2040000c 	.word	0x2040000c
  4036c8:	00406afc 	.word	0x00406afc
  4036cc:	00400589 	.word	0x00400589
  4036d0:	400e0e00 	.word	0x400e0e00
  4036d4:	00400bef 	.word	0x00400bef
  4036d8:	400e1200 	.word	0x400e1200
  4036dc:	400e1000 	.word	0x400e1000
  4036e0:	0303af6b 	.word	0x0303af6b
  4036e4:	00403465 	.word	0x00403465
  4036e8:	00400311 	.word	0x00400311
  4036ec:	00403401 	.word	0x00403401
  4036f0:	00400319 	.word	0x00400319
  4036f4:	00406b08 	.word	0x00406b08
  4036f8:	00403b91 	.word	0x00403b91
  4036fc:	00406b14 	.word	0x00406b14
  403700:	00406b30 	.word	0x00406b30
  403704:	20400001 	.word	0x20400001
  403708:	004033bd 	.word	0x004033bd
  40370c:	20400e2c 	.word	0x20400e2c
  403710:	00401a1d 	.word	0x00401a1d
  403714:	00401e11 	.word	0x00401e11
  403718:	0181d7b6 	.word	0x0181d7b6
  40371c:	00406b20 	.word	0x00406b20
  403720:	4000c000 	.word	0x4000c000

00403724 <main>:
}

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  403724:	b500      	push	{lr}
  403726:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  403728:	4b29      	ldr	r3, [pc, #164]	; (4037d0 <main+0xac>)
  40372a:	4798      	blx	r3
	board_init();
  40372c:	4b29      	ldr	r3, [pc, #164]	; (4037d4 <main+0xb0>)
  40372e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403730:	4d29      	ldr	r5, [pc, #164]	; (4037d8 <main+0xb4>)
  403732:	4b2a      	ldr	r3, [pc, #168]	; (4037dc <main+0xb8>)
  403734:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403736:	4a2a      	ldr	r2, [pc, #168]	; (4037e0 <main+0xbc>)
  403738:	4b2a      	ldr	r3, [pc, #168]	; (4037e4 <main+0xc0>)
  40373a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40373c:	4a2a      	ldr	r2, [pc, #168]	; (4037e8 <main+0xc4>)
  40373e:	4b2b      	ldr	r3, [pc, #172]	; (4037ec <main+0xc8>)
  403740:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403742:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403746:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403748:	23c0      	movs	r3, #192	; 0xc0
  40374a:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  40374c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403750:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403752:	2400      	movs	r4, #0
  403754:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403756:	9408      	str	r4, [sp, #32]
  403758:	200e      	movs	r0, #14
  40375a:	4b25      	ldr	r3, [pc, #148]	; (4037f0 <main+0xcc>)
  40375c:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40375e:	4a25      	ldr	r2, [pc, #148]	; (4037f4 <main+0xd0>)
  403760:	a904      	add	r1, sp, #16
  403762:	4628      	mov	r0, r5
  403764:	4b24      	ldr	r3, [pc, #144]	; (4037f8 <main+0xd4>)
  403766:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403768:	4628      	mov	r0, r5
  40376a:	4b24      	ldr	r3, [pc, #144]	; (4037fc <main+0xd8>)
  40376c:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40376e:	4628      	mov	r0, r5
  403770:	4b23      	ldr	r3, [pc, #140]	; (403800 <main+0xdc>)
  403772:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403774:	4e23      	ldr	r6, [pc, #140]	; (403804 <main+0xe0>)
  403776:	6833      	ldr	r3, [r6, #0]
  403778:	4621      	mov	r1, r4
  40377a:	6898      	ldr	r0, [r3, #8]
  40377c:	4d22      	ldr	r5, [pc, #136]	; (403808 <main+0xe4>)
  40377e:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403780:	6833      	ldr	r3, [r6, #0]
  403782:	4621      	mov	r1, r4
  403784:	6858      	ldr	r0, [r3, #4]
  403786:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403788:	6833      	ldr	r3, [r6, #0]
  40378a:	4621      	mov	r1, r4
  40378c:	6898      	ldr	r0, [r3, #8]
  40378e:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Create task to control oled */
	if (xTaskCreate(task_game, "game", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  403790:	9403      	str	r4, [sp, #12]
  403792:	9402      	str	r4, [sp, #8]
  403794:	9401      	str	r4, [sp, #4]
  403796:	9400      	str	r4, [sp, #0]
  403798:	4623      	mov	r3, r4
  40379a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40379e:	491b      	ldr	r1, [pc, #108]	; (40380c <main+0xe8>)
  4037a0:	481b      	ldr	r0, [pc, #108]	; (403810 <main+0xec>)
  4037a2:	4c1c      	ldr	r4, [pc, #112]	; (403814 <main+0xf0>)
  4037a4:	47a0      	blx	r4
  4037a6:	2801      	cmp	r0, #1
  4037a8:	d002      	beq.n	4037b0 <main+0x8c>
		printf("Failed to create game task\r\n");
  4037aa:	481b      	ldr	r0, [pc, #108]	; (403818 <main+0xf4>)
  4037ac:	4b1b      	ldr	r3, [pc, #108]	; (40381c <main+0xf8>)
  4037ae:	4798      	blx	r3
	}
	
	/* Create Queue to control oled */
	xQueueBtn = xQueueCreate(100, sizeof(int));
  4037b0:	2200      	movs	r2, #0
  4037b2:	2104      	movs	r1, #4
  4037b4:	2064      	movs	r0, #100	; 0x64
  4037b6:	4b1a      	ldr	r3, [pc, #104]	; (403820 <main+0xfc>)
  4037b8:	4798      	blx	r3
  4037ba:	4b1a      	ldr	r3, [pc, #104]	; (403824 <main+0x100>)
  4037bc:	6018      	str	r0, [r3, #0]
	if (xQueueBtn == NULL)
  4037be:	b110      	cbz	r0, 4037c6 <main+0xa2>
	printf("falha em criar a queue RGB \n");

	/* Start the scheduler. */
	vTaskStartScheduler();
  4037c0:	4b19      	ldr	r3, [pc, #100]	; (403828 <main+0x104>)
  4037c2:	4798      	blx	r3
  4037c4:	e7fe      	b.n	4037c4 <main+0xa0>
	printf("falha em criar a queue RGB \n");
  4037c6:	4819      	ldr	r0, [pc, #100]	; (40382c <main+0x108>)
  4037c8:	4b14      	ldr	r3, [pc, #80]	; (40381c <main+0xf8>)
  4037ca:	4798      	blx	r3
  4037cc:	e7f8      	b.n	4037c0 <main+0x9c>
  4037ce:	bf00      	nop
  4037d0:	00400941 	.word	0x00400941
  4037d4:	00400a3d 	.word	0x00400a3d
  4037d8:	40028000 	.word	0x40028000
  4037dc:	20400de8 	.word	0x20400de8
  4037e0:	00403159 	.word	0x00403159
  4037e4:	20400de4 	.word	0x20400de4
  4037e8:	0040307d 	.word	0x0040307d
  4037ec:	20400de0 	.word	0x20400de0
  4037f0:	00401009 	.word	0x00401009
  4037f4:	08f0d180 	.word	0x08f0d180
  4037f8:	00401105 	.word	0x00401105
  4037fc:	00401159 	.word	0x00401159
  403800:	0040115f 	.word	0x0040115f
  403804:	20400024 	.word	0x20400024
  403808:	00404385 	.word	0x00404385
  40380c:	00406ab4 	.word	0x00406ab4
  403810:	0040350d 	.word	0x0040350d
  403814:	004020f1 	.word	0x004020f1
  403818:	00406abc 	.word	0x00406abc
  40381c:	00403b91 	.word	0x00403b91
  403820:	00401ab1 	.word	0x00401ab1
  403824:	20400e2c 	.word	0x20400e2c
  403828:	00402325 	.word	0x00402325
  40382c:	00406adc 	.word	0x00406adc

00403830 <__aeabi_uldivmod>:
  403830:	b953      	cbnz	r3, 403848 <__aeabi_uldivmod+0x18>
  403832:	b94a      	cbnz	r2, 403848 <__aeabi_uldivmod+0x18>
  403834:	2900      	cmp	r1, #0
  403836:	bf08      	it	eq
  403838:	2800      	cmpeq	r0, #0
  40383a:	bf1c      	itt	ne
  40383c:	f04f 31ff 	movne.w	r1, #4294967295
  403840:	f04f 30ff 	movne.w	r0, #4294967295
  403844:	f000 b97a 	b.w	403b3c <__aeabi_idiv0>
  403848:	f1ad 0c08 	sub.w	ip, sp, #8
  40384c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403850:	f000 f806 	bl	403860 <__udivmoddi4>
  403854:	f8dd e004 	ldr.w	lr, [sp, #4]
  403858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40385c:	b004      	add	sp, #16
  40385e:	4770      	bx	lr

00403860 <__udivmoddi4>:
  403860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403864:	468c      	mov	ip, r1
  403866:	460d      	mov	r5, r1
  403868:	4604      	mov	r4, r0
  40386a:	9e08      	ldr	r6, [sp, #32]
  40386c:	2b00      	cmp	r3, #0
  40386e:	d151      	bne.n	403914 <__udivmoddi4+0xb4>
  403870:	428a      	cmp	r2, r1
  403872:	4617      	mov	r7, r2
  403874:	d96d      	bls.n	403952 <__udivmoddi4+0xf2>
  403876:	fab2 fe82 	clz	lr, r2
  40387a:	f1be 0f00 	cmp.w	lr, #0
  40387e:	d00b      	beq.n	403898 <__udivmoddi4+0x38>
  403880:	f1ce 0c20 	rsb	ip, lr, #32
  403884:	fa01 f50e 	lsl.w	r5, r1, lr
  403888:	fa20 fc0c 	lsr.w	ip, r0, ip
  40388c:	fa02 f70e 	lsl.w	r7, r2, lr
  403890:	ea4c 0c05 	orr.w	ip, ip, r5
  403894:	fa00 f40e 	lsl.w	r4, r0, lr
  403898:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40389c:	0c25      	lsrs	r5, r4, #16
  40389e:	fbbc f8fa 	udiv	r8, ip, sl
  4038a2:	fa1f f987 	uxth.w	r9, r7
  4038a6:	fb0a cc18 	mls	ip, sl, r8, ip
  4038aa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4038ae:	fb08 f309 	mul.w	r3, r8, r9
  4038b2:	42ab      	cmp	r3, r5
  4038b4:	d90a      	bls.n	4038cc <__udivmoddi4+0x6c>
  4038b6:	19ed      	adds	r5, r5, r7
  4038b8:	f108 32ff 	add.w	r2, r8, #4294967295
  4038bc:	f080 8123 	bcs.w	403b06 <__udivmoddi4+0x2a6>
  4038c0:	42ab      	cmp	r3, r5
  4038c2:	f240 8120 	bls.w	403b06 <__udivmoddi4+0x2a6>
  4038c6:	f1a8 0802 	sub.w	r8, r8, #2
  4038ca:	443d      	add	r5, r7
  4038cc:	1aed      	subs	r5, r5, r3
  4038ce:	b2a4      	uxth	r4, r4
  4038d0:	fbb5 f0fa 	udiv	r0, r5, sl
  4038d4:	fb0a 5510 	mls	r5, sl, r0, r5
  4038d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4038dc:	fb00 f909 	mul.w	r9, r0, r9
  4038e0:	45a1      	cmp	r9, r4
  4038e2:	d909      	bls.n	4038f8 <__udivmoddi4+0x98>
  4038e4:	19e4      	adds	r4, r4, r7
  4038e6:	f100 33ff 	add.w	r3, r0, #4294967295
  4038ea:	f080 810a 	bcs.w	403b02 <__udivmoddi4+0x2a2>
  4038ee:	45a1      	cmp	r9, r4
  4038f0:	f240 8107 	bls.w	403b02 <__udivmoddi4+0x2a2>
  4038f4:	3802      	subs	r0, #2
  4038f6:	443c      	add	r4, r7
  4038f8:	eba4 0409 	sub.w	r4, r4, r9
  4038fc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403900:	2100      	movs	r1, #0
  403902:	2e00      	cmp	r6, #0
  403904:	d061      	beq.n	4039ca <__udivmoddi4+0x16a>
  403906:	fa24 f40e 	lsr.w	r4, r4, lr
  40390a:	2300      	movs	r3, #0
  40390c:	6034      	str	r4, [r6, #0]
  40390e:	6073      	str	r3, [r6, #4]
  403910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403914:	428b      	cmp	r3, r1
  403916:	d907      	bls.n	403928 <__udivmoddi4+0xc8>
  403918:	2e00      	cmp	r6, #0
  40391a:	d054      	beq.n	4039c6 <__udivmoddi4+0x166>
  40391c:	2100      	movs	r1, #0
  40391e:	e886 0021 	stmia.w	r6, {r0, r5}
  403922:	4608      	mov	r0, r1
  403924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403928:	fab3 f183 	clz	r1, r3
  40392c:	2900      	cmp	r1, #0
  40392e:	f040 808e 	bne.w	403a4e <__udivmoddi4+0x1ee>
  403932:	42ab      	cmp	r3, r5
  403934:	d302      	bcc.n	40393c <__udivmoddi4+0xdc>
  403936:	4282      	cmp	r2, r0
  403938:	f200 80fa 	bhi.w	403b30 <__udivmoddi4+0x2d0>
  40393c:	1a84      	subs	r4, r0, r2
  40393e:	eb65 0503 	sbc.w	r5, r5, r3
  403942:	2001      	movs	r0, #1
  403944:	46ac      	mov	ip, r5
  403946:	2e00      	cmp	r6, #0
  403948:	d03f      	beq.n	4039ca <__udivmoddi4+0x16a>
  40394a:	e886 1010 	stmia.w	r6, {r4, ip}
  40394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403952:	b912      	cbnz	r2, 40395a <__udivmoddi4+0xfa>
  403954:	2701      	movs	r7, #1
  403956:	fbb7 f7f2 	udiv	r7, r7, r2
  40395a:	fab7 fe87 	clz	lr, r7
  40395e:	f1be 0f00 	cmp.w	lr, #0
  403962:	d134      	bne.n	4039ce <__udivmoddi4+0x16e>
  403964:	1beb      	subs	r3, r5, r7
  403966:	0c3a      	lsrs	r2, r7, #16
  403968:	fa1f fc87 	uxth.w	ip, r7
  40396c:	2101      	movs	r1, #1
  40396e:	fbb3 f8f2 	udiv	r8, r3, r2
  403972:	0c25      	lsrs	r5, r4, #16
  403974:	fb02 3318 	mls	r3, r2, r8, r3
  403978:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40397c:	fb0c f308 	mul.w	r3, ip, r8
  403980:	42ab      	cmp	r3, r5
  403982:	d907      	bls.n	403994 <__udivmoddi4+0x134>
  403984:	19ed      	adds	r5, r5, r7
  403986:	f108 30ff 	add.w	r0, r8, #4294967295
  40398a:	d202      	bcs.n	403992 <__udivmoddi4+0x132>
  40398c:	42ab      	cmp	r3, r5
  40398e:	f200 80d1 	bhi.w	403b34 <__udivmoddi4+0x2d4>
  403992:	4680      	mov	r8, r0
  403994:	1aed      	subs	r5, r5, r3
  403996:	b2a3      	uxth	r3, r4
  403998:	fbb5 f0f2 	udiv	r0, r5, r2
  40399c:	fb02 5510 	mls	r5, r2, r0, r5
  4039a0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4039a4:	fb0c fc00 	mul.w	ip, ip, r0
  4039a8:	45a4      	cmp	ip, r4
  4039aa:	d907      	bls.n	4039bc <__udivmoddi4+0x15c>
  4039ac:	19e4      	adds	r4, r4, r7
  4039ae:	f100 33ff 	add.w	r3, r0, #4294967295
  4039b2:	d202      	bcs.n	4039ba <__udivmoddi4+0x15a>
  4039b4:	45a4      	cmp	ip, r4
  4039b6:	f200 80b8 	bhi.w	403b2a <__udivmoddi4+0x2ca>
  4039ba:	4618      	mov	r0, r3
  4039bc:	eba4 040c 	sub.w	r4, r4, ip
  4039c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4039c4:	e79d      	b.n	403902 <__udivmoddi4+0xa2>
  4039c6:	4631      	mov	r1, r6
  4039c8:	4630      	mov	r0, r6
  4039ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4039ce:	f1ce 0420 	rsb	r4, lr, #32
  4039d2:	fa05 f30e 	lsl.w	r3, r5, lr
  4039d6:	fa07 f70e 	lsl.w	r7, r7, lr
  4039da:	fa20 f804 	lsr.w	r8, r0, r4
  4039de:	0c3a      	lsrs	r2, r7, #16
  4039e0:	fa25 f404 	lsr.w	r4, r5, r4
  4039e4:	ea48 0803 	orr.w	r8, r8, r3
  4039e8:	fbb4 f1f2 	udiv	r1, r4, r2
  4039ec:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4039f0:	fb02 4411 	mls	r4, r2, r1, r4
  4039f4:	fa1f fc87 	uxth.w	ip, r7
  4039f8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4039fc:	fb01 f30c 	mul.w	r3, r1, ip
  403a00:	42ab      	cmp	r3, r5
  403a02:	fa00 f40e 	lsl.w	r4, r0, lr
  403a06:	d909      	bls.n	403a1c <__udivmoddi4+0x1bc>
  403a08:	19ed      	adds	r5, r5, r7
  403a0a:	f101 30ff 	add.w	r0, r1, #4294967295
  403a0e:	f080 808a 	bcs.w	403b26 <__udivmoddi4+0x2c6>
  403a12:	42ab      	cmp	r3, r5
  403a14:	f240 8087 	bls.w	403b26 <__udivmoddi4+0x2c6>
  403a18:	3902      	subs	r1, #2
  403a1a:	443d      	add	r5, r7
  403a1c:	1aeb      	subs	r3, r5, r3
  403a1e:	fa1f f588 	uxth.w	r5, r8
  403a22:	fbb3 f0f2 	udiv	r0, r3, r2
  403a26:	fb02 3310 	mls	r3, r2, r0, r3
  403a2a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403a2e:	fb00 f30c 	mul.w	r3, r0, ip
  403a32:	42ab      	cmp	r3, r5
  403a34:	d907      	bls.n	403a46 <__udivmoddi4+0x1e6>
  403a36:	19ed      	adds	r5, r5, r7
  403a38:	f100 38ff 	add.w	r8, r0, #4294967295
  403a3c:	d26f      	bcs.n	403b1e <__udivmoddi4+0x2be>
  403a3e:	42ab      	cmp	r3, r5
  403a40:	d96d      	bls.n	403b1e <__udivmoddi4+0x2be>
  403a42:	3802      	subs	r0, #2
  403a44:	443d      	add	r5, r7
  403a46:	1aeb      	subs	r3, r5, r3
  403a48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403a4c:	e78f      	b.n	40396e <__udivmoddi4+0x10e>
  403a4e:	f1c1 0720 	rsb	r7, r1, #32
  403a52:	fa22 f807 	lsr.w	r8, r2, r7
  403a56:	408b      	lsls	r3, r1
  403a58:	fa05 f401 	lsl.w	r4, r5, r1
  403a5c:	ea48 0303 	orr.w	r3, r8, r3
  403a60:	fa20 fe07 	lsr.w	lr, r0, r7
  403a64:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403a68:	40fd      	lsrs	r5, r7
  403a6a:	ea4e 0e04 	orr.w	lr, lr, r4
  403a6e:	fbb5 f9fc 	udiv	r9, r5, ip
  403a72:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403a76:	fb0c 5519 	mls	r5, ip, r9, r5
  403a7a:	fa1f f883 	uxth.w	r8, r3
  403a7e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403a82:	fb09 f408 	mul.w	r4, r9, r8
  403a86:	42ac      	cmp	r4, r5
  403a88:	fa02 f201 	lsl.w	r2, r2, r1
  403a8c:	fa00 fa01 	lsl.w	sl, r0, r1
  403a90:	d908      	bls.n	403aa4 <__udivmoddi4+0x244>
  403a92:	18ed      	adds	r5, r5, r3
  403a94:	f109 30ff 	add.w	r0, r9, #4294967295
  403a98:	d243      	bcs.n	403b22 <__udivmoddi4+0x2c2>
  403a9a:	42ac      	cmp	r4, r5
  403a9c:	d941      	bls.n	403b22 <__udivmoddi4+0x2c2>
  403a9e:	f1a9 0902 	sub.w	r9, r9, #2
  403aa2:	441d      	add	r5, r3
  403aa4:	1b2d      	subs	r5, r5, r4
  403aa6:	fa1f fe8e 	uxth.w	lr, lr
  403aaa:	fbb5 f0fc 	udiv	r0, r5, ip
  403aae:	fb0c 5510 	mls	r5, ip, r0, r5
  403ab2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403ab6:	fb00 f808 	mul.w	r8, r0, r8
  403aba:	45a0      	cmp	r8, r4
  403abc:	d907      	bls.n	403ace <__udivmoddi4+0x26e>
  403abe:	18e4      	adds	r4, r4, r3
  403ac0:	f100 35ff 	add.w	r5, r0, #4294967295
  403ac4:	d229      	bcs.n	403b1a <__udivmoddi4+0x2ba>
  403ac6:	45a0      	cmp	r8, r4
  403ac8:	d927      	bls.n	403b1a <__udivmoddi4+0x2ba>
  403aca:	3802      	subs	r0, #2
  403acc:	441c      	add	r4, r3
  403ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403ad2:	eba4 0408 	sub.w	r4, r4, r8
  403ad6:	fba0 8902 	umull	r8, r9, r0, r2
  403ada:	454c      	cmp	r4, r9
  403adc:	46c6      	mov	lr, r8
  403ade:	464d      	mov	r5, r9
  403ae0:	d315      	bcc.n	403b0e <__udivmoddi4+0x2ae>
  403ae2:	d012      	beq.n	403b0a <__udivmoddi4+0x2aa>
  403ae4:	b156      	cbz	r6, 403afc <__udivmoddi4+0x29c>
  403ae6:	ebba 030e 	subs.w	r3, sl, lr
  403aea:	eb64 0405 	sbc.w	r4, r4, r5
  403aee:	fa04 f707 	lsl.w	r7, r4, r7
  403af2:	40cb      	lsrs	r3, r1
  403af4:	431f      	orrs	r7, r3
  403af6:	40cc      	lsrs	r4, r1
  403af8:	6037      	str	r7, [r6, #0]
  403afa:	6074      	str	r4, [r6, #4]
  403afc:	2100      	movs	r1, #0
  403afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403b02:	4618      	mov	r0, r3
  403b04:	e6f8      	b.n	4038f8 <__udivmoddi4+0x98>
  403b06:	4690      	mov	r8, r2
  403b08:	e6e0      	b.n	4038cc <__udivmoddi4+0x6c>
  403b0a:	45c2      	cmp	sl, r8
  403b0c:	d2ea      	bcs.n	403ae4 <__udivmoddi4+0x284>
  403b0e:	ebb8 0e02 	subs.w	lr, r8, r2
  403b12:	eb69 0503 	sbc.w	r5, r9, r3
  403b16:	3801      	subs	r0, #1
  403b18:	e7e4      	b.n	403ae4 <__udivmoddi4+0x284>
  403b1a:	4628      	mov	r0, r5
  403b1c:	e7d7      	b.n	403ace <__udivmoddi4+0x26e>
  403b1e:	4640      	mov	r0, r8
  403b20:	e791      	b.n	403a46 <__udivmoddi4+0x1e6>
  403b22:	4681      	mov	r9, r0
  403b24:	e7be      	b.n	403aa4 <__udivmoddi4+0x244>
  403b26:	4601      	mov	r1, r0
  403b28:	e778      	b.n	403a1c <__udivmoddi4+0x1bc>
  403b2a:	3802      	subs	r0, #2
  403b2c:	443c      	add	r4, r7
  403b2e:	e745      	b.n	4039bc <__udivmoddi4+0x15c>
  403b30:	4608      	mov	r0, r1
  403b32:	e708      	b.n	403946 <__udivmoddi4+0xe6>
  403b34:	f1a8 0802 	sub.w	r8, r8, #2
  403b38:	443d      	add	r5, r7
  403b3a:	e72b      	b.n	403994 <__udivmoddi4+0x134>

00403b3c <__aeabi_idiv0>:
  403b3c:	4770      	bx	lr
  403b3e:	bf00      	nop

00403b40 <__libc_init_array>:
  403b40:	b570      	push	{r4, r5, r6, lr}
  403b42:	4e0f      	ldr	r6, [pc, #60]	; (403b80 <__libc_init_array+0x40>)
  403b44:	4d0f      	ldr	r5, [pc, #60]	; (403b84 <__libc_init_array+0x44>)
  403b46:	1b76      	subs	r6, r6, r5
  403b48:	10b6      	asrs	r6, r6, #2
  403b4a:	bf18      	it	ne
  403b4c:	2400      	movne	r4, #0
  403b4e:	d005      	beq.n	403b5c <__libc_init_array+0x1c>
  403b50:	3401      	adds	r4, #1
  403b52:	f855 3b04 	ldr.w	r3, [r5], #4
  403b56:	4798      	blx	r3
  403b58:	42a6      	cmp	r6, r4
  403b5a:	d1f9      	bne.n	403b50 <__libc_init_array+0x10>
  403b5c:	4e0a      	ldr	r6, [pc, #40]	; (403b88 <__libc_init_array+0x48>)
  403b5e:	4d0b      	ldr	r5, [pc, #44]	; (403b8c <__libc_init_array+0x4c>)
  403b60:	1b76      	subs	r6, r6, r5
  403b62:	f003 f8a9 	bl	406cb8 <_init>
  403b66:	10b6      	asrs	r6, r6, #2
  403b68:	bf18      	it	ne
  403b6a:	2400      	movne	r4, #0
  403b6c:	d006      	beq.n	403b7c <__libc_init_array+0x3c>
  403b6e:	3401      	adds	r4, #1
  403b70:	f855 3b04 	ldr.w	r3, [r5], #4
  403b74:	4798      	blx	r3
  403b76:	42a6      	cmp	r6, r4
  403b78:	d1f9      	bne.n	403b6e <__libc_init_array+0x2e>
  403b7a:	bd70      	pop	{r4, r5, r6, pc}
  403b7c:	bd70      	pop	{r4, r5, r6, pc}
  403b7e:	bf00      	nop
  403b80:	00406cc4 	.word	0x00406cc4
  403b84:	00406cc4 	.word	0x00406cc4
  403b88:	00406ccc 	.word	0x00406ccc
  403b8c:	00406cc4 	.word	0x00406cc4

00403b90 <iprintf>:
  403b90:	b40f      	push	{r0, r1, r2, r3}
  403b92:	b500      	push	{lr}
  403b94:	4907      	ldr	r1, [pc, #28]	; (403bb4 <iprintf+0x24>)
  403b96:	b083      	sub	sp, #12
  403b98:	ab04      	add	r3, sp, #16
  403b9a:	6808      	ldr	r0, [r1, #0]
  403b9c:	f853 2b04 	ldr.w	r2, [r3], #4
  403ba0:	6881      	ldr	r1, [r0, #8]
  403ba2:	9301      	str	r3, [sp, #4]
  403ba4:	f000 fd7a 	bl	40469c <_vfiprintf_r>
  403ba8:	b003      	add	sp, #12
  403baa:	f85d eb04 	ldr.w	lr, [sp], #4
  403bae:	b004      	add	sp, #16
  403bb0:	4770      	bx	lr
  403bb2:	bf00      	nop
  403bb4:	20400024 	.word	0x20400024

00403bb8 <malloc>:
  403bb8:	4b02      	ldr	r3, [pc, #8]	; (403bc4 <malloc+0xc>)
  403bba:	4601      	mov	r1, r0
  403bbc:	6818      	ldr	r0, [r3, #0]
  403bbe:	f000 b80b 	b.w	403bd8 <_malloc_r>
  403bc2:	bf00      	nop
  403bc4:	20400024 	.word	0x20400024

00403bc8 <free>:
  403bc8:	4b02      	ldr	r3, [pc, #8]	; (403bd4 <free+0xc>)
  403bca:	4601      	mov	r1, r0
  403bcc:	6818      	ldr	r0, [r3, #0]
  403bce:	f001 be81 	b.w	4058d4 <_free_r>
  403bd2:	bf00      	nop
  403bd4:	20400024 	.word	0x20400024

00403bd8 <_malloc_r>:
  403bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403bdc:	f101 060b 	add.w	r6, r1, #11
  403be0:	2e16      	cmp	r6, #22
  403be2:	b083      	sub	sp, #12
  403be4:	4605      	mov	r5, r0
  403be6:	f240 809e 	bls.w	403d26 <_malloc_r+0x14e>
  403bea:	f036 0607 	bics.w	r6, r6, #7
  403bee:	f100 80bd 	bmi.w	403d6c <_malloc_r+0x194>
  403bf2:	42b1      	cmp	r1, r6
  403bf4:	f200 80ba 	bhi.w	403d6c <_malloc_r+0x194>
  403bf8:	f000 fb86 	bl	404308 <__malloc_lock>
  403bfc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403c00:	f0c0 8293 	bcc.w	40412a <_malloc_r+0x552>
  403c04:	0a73      	lsrs	r3, r6, #9
  403c06:	f000 80b8 	beq.w	403d7a <_malloc_r+0x1a2>
  403c0a:	2b04      	cmp	r3, #4
  403c0c:	f200 8179 	bhi.w	403f02 <_malloc_r+0x32a>
  403c10:	09b3      	lsrs	r3, r6, #6
  403c12:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403c16:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403c1a:	00c3      	lsls	r3, r0, #3
  403c1c:	4fbf      	ldr	r7, [pc, #764]	; (403f1c <_malloc_r+0x344>)
  403c1e:	443b      	add	r3, r7
  403c20:	f1a3 0108 	sub.w	r1, r3, #8
  403c24:	685c      	ldr	r4, [r3, #4]
  403c26:	42a1      	cmp	r1, r4
  403c28:	d106      	bne.n	403c38 <_malloc_r+0x60>
  403c2a:	e00c      	b.n	403c46 <_malloc_r+0x6e>
  403c2c:	2a00      	cmp	r2, #0
  403c2e:	f280 80aa 	bge.w	403d86 <_malloc_r+0x1ae>
  403c32:	68e4      	ldr	r4, [r4, #12]
  403c34:	42a1      	cmp	r1, r4
  403c36:	d006      	beq.n	403c46 <_malloc_r+0x6e>
  403c38:	6863      	ldr	r3, [r4, #4]
  403c3a:	f023 0303 	bic.w	r3, r3, #3
  403c3e:	1b9a      	subs	r2, r3, r6
  403c40:	2a0f      	cmp	r2, #15
  403c42:	ddf3      	ble.n	403c2c <_malloc_r+0x54>
  403c44:	4670      	mov	r0, lr
  403c46:	693c      	ldr	r4, [r7, #16]
  403c48:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403f30 <_malloc_r+0x358>
  403c4c:	4574      	cmp	r4, lr
  403c4e:	f000 81ab 	beq.w	403fa8 <_malloc_r+0x3d0>
  403c52:	6863      	ldr	r3, [r4, #4]
  403c54:	f023 0303 	bic.w	r3, r3, #3
  403c58:	1b9a      	subs	r2, r3, r6
  403c5a:	2a0f      	cmp	r2, #15
  403c5c:	f300 8190 	bgt.w	403f80 <_malloc_r+0x3a8>
  403c60:	2a00      	cmp	r2, #0
  403c62:	f8c7 e014 	str.w	lr, [r7, #20]
  403c66:	f8c7 e010 	str.w	lr, [r7, #16]
  403c6a:	f280 809d 	bge.w	403da8 <_malloc_r+0x1d0>
  403c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403c72:	f080 8161 	bcs.w	403f38 <_malloc_r+0x360>
  403c76:	08db      	lsrs	r3, r3, #3
  403c78:	f103 0c01 	add.w	ip, r3, #1
  403c7c:	1099      	asrs	r1, r3, #2
  403c7e:	687a      	ldr	r2, [r7, #4]
  403c80:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403c84:	f8c4 8008 	str.w	r8, [r4, #8]
  403c88:	2301      	movs	r3, #1
  403c8a:	408b      	lsls	r3, r1
  403c8c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403c90:	4313      	orrs	r3, r2
  403c92:	3908      	subs	r1, #8
  403c94:	60e1      	str	r1, [r4, #12]
  403c96:	607b      	str	r3, [r7, #4]
  403c98:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403c9c:	f8c8 400c 	str.w	r4, [r8, #12]
  403ca0:	1082      	asrs	r2, r0, #2
  403ca2:	2401      	movs	r4, #1
  403ca4:	4094      	lsls	r4, r2
  403ca6:	429c      	cmp	r4, r3
  403ca8:	f200 808b 	bhi.w	403dc2 <_malloc_r+0x1ea>
  403cac:	421c      	tst	r4, r3
  403cae:	d106      	bne.n	403cbe <_malloc_r+0xe6>
  403cb0:	f020 0003 	bic.w	r0, r0, #3
  403cb4:	0064      	lsls	r4, r4, #1
  403cb6:	421c      	tst	r4, r3
  403cb8:	f100 0004 	add.w	r0, r0, #4
  403cbc:	d0fa      	beq.n	403cb4 <_malloc_r+0xdc>
  403cbe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403cc2:	46cc      	mov	ip, r9
  403cc4:	4680      	mov	r8, r0
  403cc6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403cca:	459c      	cmp	ip, r3
  403ccc:	d107      	bne.n	403cde <_malloc_r+0x106>
  403cce:	e16d      	b.n	403fac <_malloc_r+0x3d4>
  403cd0:	2a00      	cmp	r2, #0
  403cd2:	f280 817b 	bge.w	403fcc <_malloc_r+0x3f4>
  403cd6:	68db      	ldr	r3, [r3, #12]
  403cd8:	459c      	cmp	ip, r3
  403cda:	f000 8167 	beq.w	403fac <_malloc_r+0x3d4>
  403cde:	6859      	ldr	r1, [r3, #4]
  403ce0:	f021 0103 	bic.w	r1, r1, #3
  403ce4:	1b8a      	subs	r2, r1, r6
  403ce6:	2a0f      	cmp	r2, #15
  403ce8:	ddf2      	ble.n	403cd0 <_malloc_r+0xf8>
  403cea:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403cee:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403cf2:	9300      	str	r3, [sp, #0]
  403cf4:	199c      	adds	r4, r3, r6
  403cf6:	4628      	mov	r0, r5
  403cf8:	f046 0601 	orr.w	r6, r6, #1
  403cfc:	f042 0501 	orr.w	r5, r2, #1
  403d00:	605e      	str	r6, [r3, #4]
  403d02:	f8c8 c00c 	str.w	ip, [r8, #12]
  403d06:	f8cc 8008 	str.w	r8, [ip, #8]
  403d0a:	617c      	str	r4, [r7, #20]
  403d0c:	613c      	str	r4, [r7, #16]
  403d0e:	f8c4 e00c 	str.w	lr, [r4, #12]
  403d12:	f8c4 e008 	str.w	lr, [r4, #8]
  403d16:	6065      	str	r5, [r4, #4]
  403d18:	505a      	str	r2, [r3, r1]
  403d1a:	f000 fafb 	bl	404314 <__malloc_unlock>
  403d1e:	9b00      	ldr	r3, [sp, #0]
  403d20:	f103 0408 	add.w	r4, r3, #8
  403d24:	e01e      	b.n	403d64 <_malloc_r+0x18c>
  403d26:	2910      	cmp	r1, #16
  403d28:	d820      	bhi.n	403d6c <_malloc_r+0x194>
  403d2a:	f000 faed 	bl	404308 <__malloc_lock>
  403d2e:	2610      	movs	r6, #16
  403d30:	2318      	movs	r3, #24
  403d32:	2002      	movs	r0, #2
  403d34:	4f79      	ldr	r7, [pc, #484]	; (403f1c <_malloc_r+0x344>)
  403d36:	443b      	add	r3, r7
  403d38:	f1a3 0208 	sub.w	r2, r3, #8
  403d3c:	685c      	ldr	r4, [r3, #4]
  403d3e:	4294      	cmp	r4, r2
  403d40:	f000 813d 	beq.w	403fbe <_malloc_r+0x3e6>
  403d44:	6863      	ldr	r3, [r4, #4]
  403d46:	68e1      	ldr	r1, [r4, #12]
  403d48:	68a6      	ldr	r6, [r4, #8]
  403d4a:	f023 0303 	bic.w	r3, r3, #3
  403d4e:	4423      	add	r3, r4
  403d50:	4628      	mov	r0, r5
  403d52:	685a      	ldr	r2, [r3, #4]
  403d54:	60f1      	str	r1, [r6, #12]
  403d56:	f042 0201 	orr.w	r2, r2, #1
  403d5a:	608e      	str	r6, [r1, #8]
  403d5c:	605a      	str	r2, [r3, #4]
  403d5e:	f000 fad9 	bl	404314 <__malloc_unlock>
  403d62:	3408      	adds	r4, #8
  403d64:	4620      	mov	r0, r4
  403d66:	b003      	add	sp, #12
  403d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d6c:	2400      	movs	r4, #0
  403d6e:	230c      	movs	r3, #12
  403d70:	4620      	mov	r0, r4
  403d72:	602b      	str	r3, [r5, #0]
  403d74:	b003      	add	sp, #12
  403d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d7a:	2040      	movs	r0, #64	; 0x40
  403d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
  403d80:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403d84:	e74a      	b.n	403c1c <_malloc_r+0x44>
  403d86:	4423      	add	r3, r4
  403d88:	68e1      	ldr	r1, [r4, #12]
  403d8a:	685a      	ldr	r2, [r3, #4]
  403d8c:	68a6      	ldr	r6, [r4, #8]
  403d8e:	f042 0201 	orr.w	r2, r2, #1
  403d92:	60f1      	str	r1, [r6, #12]
  403d94:	4628      	mov	r0, r5
  403d96:	608e      	str	r6, [r1, #8]
  403d98:	605a      	str	r2, [r3, #4]
  403d9a:	f000 fabb 	bl	404314 <__malloc_unlock>
  403d9e:	3408      	adds	r4, #8
  403da0:	4620      	mov	r0, r4
  403da2:	b003      	add	sp, #12
  403da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403da8:	4423      	add	r3, r4
  403daa:	4628      	mov	r0, r5
  403dac:	685a      	ldr	r2, [r3, #4]
  403dae:	f042 0201 	orr.w	r2, r2, #1
  403db2:	605a      	str	r2, [r3, #4]
  403db4:	f000 faae 	bl	404314 <__malloc_unlock>
  403db8:	3408      	adds	r4, #8
  403dba:	4620      	mov	r0, r4
  403dbc:	b003      	add	sp, #12
  403dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dc2:	68bc      	ldr	r4, [r7, #8]
  403dc4:	6863      	ldr	r3, [r4, #4]
  403dc6:	f023 0803 	bic.w	r8, r3, #3
  403dca:	45b0      	cmp	r8, r6
  403dcc:	d304      	bcc.n	403dd8 <_malloc_r+0x200>
  403dce:	eba8 0306 	sub.w	r3, r8, r6
  403dd2:	2b0f      	cmp	r3, #15
  403dd4:	f300 8085 	bgt.w	403ee2 <_malloc_r+0x30a>
  403dd8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403f34 <_malloc_r+0x35c>
  403ddc:	4b50      	ldr	r3, [pc, #320]	; (403f20 <_malloc_r+0x348>)
  403dde:	f8d9 2000 	ldr.w	r2, [r9]
  403de2:	681b      	ldr	r3, [r3, #0]
  403de4:	3201      	adds	r2, #1
  403de6:	4433      	add	r3, r6
  403de8:	eb04 0a08 	add.w	sl, r4, r8
  403dec:	f000 8155 	beq.w	40409a <_malloc_r+0x4c2>
  403df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403df4:	330f      	adds	r3, #15
  403df6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403dfa:	f02b 0b0f 	bic.w	fp, fp, #15
  403dfe:	4659      	mov	r1, fp
  403e00:	4628      	mov	r0, r5
  403e02:	f000 faad 	bl	404360 <_sbrk_r>
  403e06:	1c41      	adds	r1, r0, #1
  403e08:	4602      	mov	r2, r0
  403e0a:	f000 80fc 	beq.w	404006 <_malloc_r+0x42e>
  403e0e:	4582      	cmp	sl, r0
  403e10:	f200 80f7 	bhi.w	404002 <_malloc_r+0x42a>
  403e14:	4b43      	ldr	r3, [pc, #268]	; (403f24 <_malloc_r+0x34c>)
  403e16:	6819      	ldr	r1, [r3, #0]
  403e18:	4459      	add	r1, fp
  403e1a:	6019      	str	r1, [r3, #0]
  403e1c:	f000 814d 	beq.w	4040ba <_malloc_r+0x4e2>
  403e20:	f8d9 0000 	ldr.w	r0, [r9]
  403e24:	3001      	adds	r0, #1
  403e26:	bf1b      	ittet	ne
  403e28:	eba2 0a0a 	subne.w	sl, r2, sl
  403e2c:	4451      	addne	r1, sl
  403e2e:	f8c9 2000 	streq.w	r2, [r9]
  403e32:	6019      	strne	r1, [r3, #0]
  403e34:	f012 0107 	ands.w	r1, r2, #7
  403e38:	f000 8115 	beq.w	404066 <_malloc_r+0x48e>
  403e3c:	f1c1 0008 	rsb	r0, r1, #8
  403e40:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403e44:	4402      	add	r2, r0
  403e46:	3108      	adds	r1, #8
  403e48:	eb02 090b 	add.w	r9, r2, fp
  403e4c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403e50:	eba1 0909 	sub.w	r9, r1, r9
  403e54:	4649      	mov	r1, r9
  403e56:	4628      	mov	r0, r5
  403e58:	9301      	str	r3, [sp, #4]
  403e5a:	9200      	str	r2, [sp, #0]
  403e5c:	f000 fa80 	bl	404360 <_sbrk_r>
  403e60:	1c43      	adds	r3, r0, #1
  403e62:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403e66:	f000 8143 	beq.w	4040f0 <_malloc_r+0x518>
  403e6a:	1a80      	subs	r0, r0, r2
  403e6c:	4448      	add	r0, r9
  403e6e:	f040 0001 	orr.w	r0, r0, #1
  403e72:	6819      	ldr	r1, [r3, #0]
  403e74:	60ba      	str	r2, [r7, #8]
  403e76:	4449      	add	r1, r9
  403e78:	42bc      	cmp	r4, r7
  403e7a:	6050      	str	r0, [r2, #4]
  403e7c:	6019      	str	r1, [r3, #0]
  403e7e:	d017      	beq.n	403eb0 <_malloc_r+0x2d8>
  403e80:	f1b8 0f0f 	cmp.w	r8, #15
  403e84:	f240 80fb 	bls.w	40407e <_malloc_r+0x4a6>
  403e88:	6860      	ldr	r0, [r4, #4]
  403e8a:	f1a8 020c 	sub.w	r2, r8, #12
  403e8e:	f022 0207 	bic.w	r2, r2, #7
  403e92:	eb04 0e02 	add.w	lr, r4, r2
  403e96:	f000 0001 	and.w	r0, r0, #1
  403e9a:	f04f 0c05 	mov.w	ip, #5
  403e9e:	4310      	orrs	r0, r2
  403ea0:	2a0f      	cmp	r2, #15
  403ea2:	6060      	str	r0, [r4, #4]
  403ea4:	f8ce c004 	str.w	ip, [lr, #4]
  403ea8:	f8ce c008 	str.w	ip, [lr, #8]
  403eac:	f200 8117 	bhi.w	4040de <_malloc_r+0x506>
  403eb0:	4b1d      	ldr	r3, [pc, #116]	; (403f28 <_malloc_r+0x350>)
  403eb2:	68bc      	ldr	r4, [r7, #8]
  403eb4:	681a      	ldr	r2, [r3, #0]
  403eb6:	4291      	cmp	r1, r2
  403eb8:	bf88      	it	hi
  403eba:	6019      	strhi	r1, [r3, #0]
  403ebc:	4b1b      	ldr	r3, [pc, #108]	; (403f2c <_malloc_r+0x354>)
  403ebe:	681a      	ldr	r2, [r3, #0]
  403ec0:	4291      	cmp	r1, r2
  403ec2:	6862      	ldr	r2, [r4, #4]
  403ec4:	bf88      	it	hi
  403ec6:	6019      	strhi	r1, [r3, #0]
  403ec8:	f022 0203 	bic.w	r2, r2, #3
  403ecc:	4296      	cmp	r6, r2
  403ece:	eba2 0306 	sub.w	r3, r2, r6
  403ed2:	d801      	bhi.n	403ed8 <_malloc_r+0x300>
  403ed4:	2b0f      	cmp	r3, #15
  403ed6:	dc04      	bgt.n	403ee2 <_malloc_r+0x30a>
  403ed8:	4628      	mov	r0, r5
  403eda:	f000 fa1b 	bl	404314 <__malloc_unlock>
  403ede:	2400      	movs	r4, #0
  403ee0:	e740      	b.n	403d64 <_malloc_r+0x18c>
  403ee2:	19a2      	adds	r2, r4, r6
  403ee4:	f043 0301 	orr.w	r3, r3, #1
  403ee8:	f046 0601 	orr.w	r6, r6, #1
  403eec:	6066      	str	r6, [r4, #4]
  403eee:	4628      	mov	r0, r5
  403ef0:	60ba      	str	r2, [r7, #8]
  403ef2:	6053      	str	r3, [r2, #4]
  403ef4:	f000 fa0e 	bl	404314 <__malloc_unlock>
  403ef8:	3408      	adds	r4, #8
  403efa:	4620      	mov	r0, r4
  403efc:	b003      	add	sp, #12
  403efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f02:	2b14      	cmp	r3, #20
  403f04:	d971      	bls.n	403fea <_malloc_r+0x412>
  403f06:	2b54      	cmp	r3, #84	; 0x54
  403f08:	f200 80a3 	bhi.w	404052 <_malloc_r+0x47a>
  403f0c:	0b33      	lsrs	r3, r6, #12
  403f0e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403f12:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403f16:	00c3      	lsls	r3, r0, #3
  403f18:	e680      	b.n	403c1c <_malloc_r+0x44>
  403f1a:	bf00      	nop
  403f1c:	20400450 	.word	0x20400450
  403f20:	20400ddc 	.word	0x20400ddc
  403f24:	20400dac 	.word	0x20400dac
  403f28:	20400dd4 	.word	0x20400dd4
  403f2c:	20400dd8 	.word	0x20400dd8
  403f30:	20400458 	.word	0x20400458
  403f34:	20400858 	.word	0x20400858
  403f38:	0a5a      	lsrs	r2, r3, #9
  403f3a:	2a04      	cmp	r2, #4
  403f3c:	d95b      	bls.n	403ff6 <_malloc_r+0x41e>
  403f3e:	2a14      	cmp	r2, #20
  403f40:	f200 80ae 	bhi.w	4040a0 <_malloc_r+0x4c8>
  403f44:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403f48:	00c9      	lsls	r1, r1, #3
  403f4a:	325b      	adds	r2, #91	; 0x5b
  403f4c:	eb07 0c01 	add.w	ip, r7, r1
  403f50:	5879      	ldr	r1, [r7, r1]
  403f52:	f1ac 0c08 	sub.w	ip, ip, #8
  403f56:	458c      	cmp	ip, r1
  403f58:	f000 8088 	beq.w	40406c <_malloc_r+0x494>
  403f5c:	684a      	ldr	r2, [r1, #4]
  403f5e:	f022 0203 	bic.w	r2, r2, #3
  403f62:	4293      	cmp	r3, r2
  403f64:	d273      	bcs.n	40404e <_malloc_r+0x476>
  403f66:	6889      	ldr	r1, [r1, #8]
  403f68:	458c      	cmp	ip, r1
  403f6a:	d1f7      	bne.n	403f5c <_malloc_r+0x384>
  403f6c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403f70:	687b      	ldr	r3, [r7, #4]
  403f72:	60e2      	str	r2, [r4, #12]
  403f74:	f8c4 c008 	str.w	ip, [r4, #8]
  403f78:	6094      	str	r4, [r2, #8]
  403f7a:	f8cc 400c 	str.w	r4, [ip, #12]
  403f7e:	e68f      	b.n	403ca0 <_malloc_r+0xc8>
  403f80:	19a1      	adds	r1, r4, r6
  403f82:	f046 0c01 	orr.w	ip, r6, #1
  403f86:	f042 0601 	orr.w	r6, r2, #1
  403f8a:	f8c4 c004 	str.w	ip, [r4, #4]
  403f8e:	4628      	mov	r0, r5
  403f90:	6179      	str	r1, [r7, #20]
  403f92:	6139      	str	r1, [r7, #16]
  403f94:	f8c1 e00c 	str.w	lr, [r1, #12]
  403f98:	f8c1 e008 	str.w	lr, [r1, #8]
  403f9c:	604e      	str	r6, [r1, #4]
  403f9e:	50e2      	str	r2, [r4, r3]
  403fa0:	f000 f9b8 	bl	404314 <__malloc_unlock>
  403fa4:	3408      	adds	r4, #8
  403fa6:	e6dd      	b.n	403d64 <_malloc_r+0x18c>
  403fa8:	687b      	ldr	r3, [r7, #4]
  403faa:	e679      	b.n	403ca0 <_malloc_r+0xc8>
  403fac:	f108 0801 	add.w	r8, r8, #1
  403fb0:	f018 0f03 	tst.w	r8, #3
  403fb4:	f10c 0c08 	add.w	ip, ip, #8
  403fb8:	f47f ae85 	bne.w	403cc6 <_malloc_r+0xee>
  403fbc:	e02d      	b.n	40401a <_malloc_r+0x442>
  403fbe:	68dc      	ldr	r4, [r3, #12]
  403fc0:	42a3      	cmp	r3, r4
  403fc2:	bf08      	it	eq
  403fc4:	3002      	addeq	r0, #2
  403fc6:	f43f ae3e 	beq.w	403c46 <_malloc_r+0x6e>
  403fca:	e6bb      	b.n	403d44 <_malloc_r+0x16c>
  403fcc:	4419      	add	r1, r3
  403fce:	461c      	mov	r4, r3
  403fd0:	684a      	ldr	r2, [r1, #4]
  403fd2:	68db      	ldr	r3, [r3, #12]
  403fd4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403fd8:	f042 0201 	orr.w	r2, r2, #1
  403fdc:	604a      	str	r2, [r1, #4]
  403fde:	4628      	mov	r0, r5
  403fe0:	60f3      	str	r3, [r6, #12]
  403fe2:	609e      	str	r6, [r3, #8]
  403fe4:	f000 f996 	bl	404314 <__malloc_unlock>
  403fe8:	e6bc      	b.n	403d64 <_malloc_r+0x18c>
  403fea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403fee:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403ff2:	00c3      	lsls	r3, r0, #3
  403ff4:	e612      	b.n	403c1c <_malloc_r+0x44>
  403ff6:	099a      	lsrs	r2, r3, #6
  403ff8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403ffc:	00c9      	lsls	r1, r1, #3
  403ffe:	3238      	adds	r2, #56	; 0x38
  404000:	e7a4      	b.n	403f4c <_malloc_r+0x374>
  404002:	42bc      	cmp	r4, r7
  404004:	d054      	beq.n	4040b0 <_malloc_r+0x4d8>
  404006:	68bc      	ldr	r4, [r7, #8]
  404008:	6862      	ldr	r2, [r4, #4]
  40400a:	f022 0203 	bic.w	r2, r2, #3
  40400e:	e75d      	b.n	403ecc <_malloc_r+0x2f4>
  404010:	f859 3908 	ldr.w	r3, [r9], #-8
  404014:	4599      	cmp	r9, r3
  404016:	f040 8086 	bne.w	404126 <_malloc_r+0x54e>
  40401a:	f010 0f03 	tst.w	r0, #3
  40401e:	f100 30ff 	add.w	r0, r0, #4294967295
  404022:	d1f5      	bne.n	404010 <_malloc_r+0x438>
  404024:	687b      	ldr	r3, [r7, #4]
  404026:	ea23 0304 	bic.w	r3, r3, r4
  40402a:	607b      	str	r3, [r7, #4]
  40402c:	0064      	lsls	r4, r4, #1
  40402e:	429c      	cmp	r4, r3
  404030:	f63f aec7 	bhi.w	403dc2 <_malloc_r+0x1ea>
  404034:	2c00      	cmp	r4, #0
  404036:	f43f aec4 	beq.w	403dc2 <_malloc_r+0x1ea>
  40403a:	421c      	tst	r4, r3
  40403c:	4640      	mov	r0, r8
  40403e:	f47f ae3e 	bne.w	403cbe <_malloc_r+0xe6>
  404042:	0064      	lsls	r4, r4, #1
  404044:	421c      	tst	r4, r3
  404046:	f100 0004 	add.w	r0, r0, #4
  40404a:	d0fa      	beq.n	404042 <_malloc_r+0x46a>
  40404c:	e637      	b.n	403cbe <_malloc_r+0xe6>
  40404e:	468c      	mov	ip, r1
  404050:	e78c      	b.n	403f6c <_malloc_r+0x394>
  404052:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404056:	d815      	bhi.n	404084 <_malloc_r+0x4ac>
  404058:	0bf3      	lsrs	r3, r6, #15
  40405a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40405e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404062:	00c3      	lsls	r3, r0, #3
  404064:	e5da      	b.n	403c1c <_malloc_r+0x44>
  404066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40406a:	e6ed      	b.n	403e48 <_malloc_r+0x270>
  40406c:	687b      	ldr	r3, [r7, #4]
  40406e:	1092      	asrs	r2, r2, #2
  404070:	2101      	movs	r1, #1
  404072:	fa01 f202 	lsl.w	r2, r1, r2
  404076:	4313      	orrs	r3, r2
  404078:	607b      	str	r3, [r7, #4]
  40407a:	4662      	mov	r2, ip
  40407c:	e779      	b.n	403f72 <_malloc_r+0x39a>
  40407e:	2301      	movs	r3, #1
  404080:	6053      	str	r3, [r2, #4]
  404082:	e729      	b.n	403ed8 <_malloc_r+0x300>
  404084:	f240 5254 	movw	r2, #1364	; 0x554
  404088:	4293      	cmp	r3, r2
  40408a:	d822      	bhi.n	4040d2 <_malloc_r+0x4fa>
  40408c:	0cb3      	lsrs	r3, r6, #18
  40408e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404092:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404096:	00c3      	lsls	r3, r0, #3
  404098:	e5c0      	b.n	403c1c <_malloc_r+0x44>
  40409a:	f103 0b10 	add.w	fp, r3, #16
  40409e:	e6ae      	b.n	403dfe <_malloc_r+0x226>
  4040a0:	2a54      	cmp	r2, #84	; 0x54
  4040a2:	d829      	bhi.n	4040f8 <_malloc_r+0x520>
  4040a4:	0b1a      	lsrs	r2, r3, #12
  4040a6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4040aa:	00c9      	lsls	r1, r1, #3
  4040ac:	326e      	adds	r2, #110	; 0x6e
  4040ae:	e74d      	b.n	403f4c <_malloc_r+0x374>
  4040b0:	4b20      	ldr	r3, [pc, #128]	; (404134 <_malloc_r+0x55c>)
  4040b2:	6819      	ldr	r1, [r3, #0]
  4040b4:	4459      	add	r1, fp
  4040b6:	6019      	str	r1, [r3, #0]
  4040b8:	e6b2      	b.n	403e20 <_malloc_r+0x248>
  4040ba:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4040be:	2800      	cmp	r0, #0
  4040c0:	f47f aeae 	bne.w	403e20 <_malloc_r+0x248>
  4040c4:	eb08 030b 	add.w	r3, r8, fp
  4040c8:	68ba      	ldr	r2, [r7, #8]
  4040ca:	f043 0301 	orr.w	r3, r3, #1
  4040ce:	6053      	str	r3, [r2, #4]
  4040d0:	e6ee      	b.n	403eb0 <_malloc_r+0x2d8>
  4040d2:	207f      	movs	r0, #127	; 0x7f
  4040d4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4040d8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4040dc:	e59e      	b.n	403c1c <_malloc_r+0x44>
  4040de:	f104 0108 	add.w	r1, r4, #8
  4040e2:	4628      	mov	r0, r5
  4040e4:	9300      	str	r3, [sp, #0]
  4040e6:	f001 fbf5 	bl	4058d4 <_free_r>
  4040ea:	9b00      	ldr	r3, [sp, #0]
  4040ec:	6819      	ldr	r1, [r3, #0]
  4040ee:	e6df      	b.n	403eb0 <_malloc_r+0x2d8>
  4040f0:	2001      	movs	r0, #1
  4040f2:	f04f 0900 	mov.w	r9, #0
  4040f6:	e6bc      	b.n	403e72 <_malloc_r+0x29a>
  4040f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4040fc:	d805      	bhi.n	40410a <_malloc_r+0x532>
  4040fe:	0bda      	lsrs	r2, r3, #15
  404100:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404104:	00c9      	lsls	r1, r1, #3
  404106:	3277      	adds	r2, #119	; 0x77
  404108:	e720      	b.n	403f4c <_malloc_r+0x374>
  40410a:	f240 5154 	movw	r1, #1364	; 0x554
  40410e:	428a      	cmp	r2, r1
  404110:	d805      	bhi.n	40411e <_malloc_r+0x546>
  404112:	0c9a      	lsrs	r2, r3, #18
  404114:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404118:	00c9      	lsls	r1, r1, #3
  40411a:	327c      	adds	r2, #124	; 0x7c
  40411c:	e716      	b.n	403f4c <_malloc_r+0x374>
  40411e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404122:	227e      	movs	r2, #126	; 0x7e
  404124:	e712      	b.n	403f4c <_malloc_r+0x374>
  404126:	687b      	ldr	r3, [r7, #4]
  404128:	e780      	b.n	40402c <_malloc_r+0x454>
  40412a:	08f0      	lsrs	r0, r6, #3
  40412c:	f106 0308 	add.w	r3, r6, #8
  404130:	e600      	b.n	403d34 <_malloc_r+0x15c>
  404132:	bf00      	nop
  404134:	20400dac 	.word	0x20400dac

00404138 <memcpy>:
  404138:	4684      	mov	ip, r0
  40413a:	ea41 0300 	orr.w	r3, r1, r0
  40413e:	f013 0303 	ands.w	r3, r3, #3
  404142:	d16d      	bne.n	404220 <memcpy+0xe8>
  404144:	3a40      	subs	r2, #64	; 0x40
  404146:	d341      	bcc.n	4041cc <memcpy+0x94>
  404148:	f851 3b04 	ldr.w	r3, [r1], #4
  40414c:	f840 3b04 	str.w	r3, [r0], #4
  404150:	f851 3b04 	ldr.w	r3, [r1], #4
  404154:	f840 3b04 	str.w	r3, [r0], #4
  404158:	f851 3b04 	ldr.w	r3, [r1], #4
  40415c:	f840 3b04 	str.w	r3, [r0], #4
  404160:	f851 3b04 	ldr.w	r3, [r1], #4
  404164:	f840 3b04 	str.w	r3, [r0], #4
  404168:	f851 3b04 	ldr.w	r3, [r1], #4
  40416c:	f840 3b04 	str.w	r3, [r0], #4
  404170:	f851 3b04 	ldr.w	r3, [r1], #4
  404174:	f840 3b04 	str.w	r3, [r0], #4
  404178:	f851 3b04 	ldr.w	r3, [r1], #4
  40417c:	f840 3b04 	str.w	r3, [r0], #4
  404180:	f851 3b04 	ldr.w	r3, [r1], #4
  404184:	f840 3b04 	str.w	r3, [r0], #4
  404188:	f851 3b04 	ldr.w	r3, [r1], #4
  40418c:	f840 3b04 	str.w	r3, [r0], #4
  404190:	f851 3b04 	ldr.w	r3, [r1], #4
  404194:	f840 3b04 	str.w	r3, [r0], #4
  404198:	f851 3b04 	ldr.w	r3, [r1], #4
  40419c:	f840 3b04 	str.w	r3, [r0], #4
  4041a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041a4:	f840 3b04 	str.w	r3, [r0], #4
  4041a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041ac:	f840 3b04 	str.w	r3, [r0], #4
  4041b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041b4:	f840 3b04 	str.w	r3, [r0], #4
  4041b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041bc:	f840 3b04 	str.w	r3, [r0], #4
  4041c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041c4:	f840 3b04 	str.w	r3, [r0], #4
  4041c8:	3a40      	subs	r2, #64	; 0x40
  4041ca:	d2bd      	bcs.n	404148 <memcpy+0x10>
  4041cc:	3230      	adds	r2, #48	; 0x30
  4041ce:	d311      	bcc.n	4041f4 <memcpy+0xbc>
  4041d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041d4:	f840 3b04 	str.w	r3, [r0], #4
  4041d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041dc:	f840 3b04 	str.w	r3, [r0], #4
  4041e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041e4:	f840 3b04 	str.w	r3, [r0], #4
  4041e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041ec:	f840 3b04 	str.w	r3, [r0], #4
  4041f0:	3a10      	subs	r2, #16
  4041f2:	d2ed      	bcs.n	4041d0 <memcpy+0x98>
  4041f4:	320c      	adds	r2, #12
  4041f6:	d305      	bcc.n	404204 <memcpy+0xcc>
  4041f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041fc:	f840 3b04 	str.w	r3, [r0], #4
  404200:	3a04      	subs	r2, #4
  404202:	d2f9      	bcs.n	4041f8 <memcpy+0xc0>
  404204:	3204      	adds	r2, #4
  404206:	d008      	beq.n	40421a <memcpy+0xe2>
  404208:	07d2      	lsls	r2, r2, #31
  40420a:	bf1c      	itt	ne
  40420c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404210:	f800 3b01 	strbne.w	r3, [r0], #1
  404214:	d301      	bcc.n	40421a <memcpy+0xe2>
  404216:	880b      	ldrh	r3, [r1, #0]
  404218:	8003      	strh	r3, [r0, #0]
  40421a:	4660      	mov	r0, ip
  40421c:	4770      	bx	lr
  40421e:	bf00      	nop
  404220:	2a08      	cmp	r2, #8
  404222:	d313      	bcc.n	40424c <memcpy+0x114>
  404224:	078b      	lsls	r3, r1, #30
  404226:	d08d      	beq.n	404144 <memcpy+0xc>
  404228:	f010 0303 	ands.w	r3, r0, #3
  40422c:	d08a      	beq.n	404144 <memcpy+0xc>
  40422e:	f1c3 0304 	rsb	r3, r3, #4
  404232:	1ad2      	subs	r2, r2, r3
  404234:	07db      	lsls	r3, r3, #31
  404236:	bf1c      	itt	ne
  404238:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40423c:	f800 3b01 	strbne.w	r3, [r0], #1
  404240:	d380      	bcc.n	404144 <memcpy+0xc>
  404242:	f831 3b02 	ldrh.w	r3, [r1], #2
  404246:	f820 3b02 	strh.w	r3, [r0], #2
  40424a:	e77b      	b.n	404144 <memcpy+0xc>
  40424c:	3a04      	subs	r2, #4
  40424e:	d3d9      	bcc.n	404204 <memcpy+0xcc>
  404250:	3a01      	subs	r2, #1
  404252:	f811 3b01 	ldrb.w	r3, [r1], #1
  404256:	f800 3b01 	strb.w	r3, [r0], #1
  40425a:	d2f9      	bcs.n	404250 <memcpy+0x118>
  40425c:	780b      	ldrb	r3, [r1, #0]
  40425e:	7003      	strb	r3, [r0, #0]
  404260:	784b      	ldrb	r3, [r1, #1]
  404262:	7043      	strb	r3, [r0, #1]
  404264:	788b      	ldrb	r3, [r1, #2]
  404266:	7083      	strb	r3, [r0, #2]
  404268:	4660      	mov	r0, ip
  40426a:	4770      	bx	lr

0040426c <memset>:
  40426c:	b470      	push	{r4, r5, r6}
  40426e:	0786      	lsls	r6, r0, #30
  404270:	d046      	beq.n	404300 <memset+0x94>
  404272:	1e54      	subs	r4, r2, #1
  404274:	2a00      	cmp	r2, #0
  404276:	d041      	beq.n	4042fc <memset+0x90>
  404278:	b2ca      	uxtb	r2, r1
  40427a:	4603      	mov	r3, r0
  40427c:	e002      	b.n	404284 <memset+0x18>
  40427e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404282:	d33b      	bcc.n	4042fc <memset+0x90>
  404284:	f803 2b01 	strb.w	r2, [r3], #1
  404288:	079d      	lsls	r5, r3, #30
  40428a:	d1f8      	bne.n	40427e <memset+0x12>
  40428c:	2c03      	cmp	r4, #3
  40428e:	d92e      	bls.n	4042ee <memset+0x82>
  404290:	b2cd      	uxtb	r5, r1
  404292:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404296:	2c0f      	cmp	r4, #15
  404298:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40429c:	d919      	bls.n	4042d2 <memset+0x66>
  40429e:	f103 0210 	add.w	r2, r3, #16
  4042a2:	4626      	mov	r6, r4
  4042a4:	3e10      	subs	r6, #16
  4042a6:	2e0f      	cmp	r6, #15
  4042a8:	f842 5c10 	str.w	r5, [r2, #-16]
  4042ac:	f842 5c0c 	str.w	r5, [r2, #-12]
  4042b0:	f842 5c08 	str.w	r5, [r2, #-8]
  4042b4:	f842 5c04 	str.w	r5, [r2, #-4]
  4042b8:	f102 0210 	add.w	r2, r2, #16
  4042bc:	d8f2      	bhi.n	4042a4 <memset+0x38>
  4042be:	f1a4 0210 	sub.w	r2, r4, #16
  4042c2:	f022 020f 	bic.w	r2, r2, #15
  4042c6:	f004 040f 	and.w	r4, r4, #15
  4042ca:	3210      	adds	r2, #16
  4042cc:	2c03      	cmp	r4, #3
  4042ce:	4413      	add	r3, r2
  4042d0:	d90d      	bls.n	4042ee <memset+0x82>
  4042d2:	461e      	mov	r6, r3
  4042d4:	4622      	mov	r2, r4
  4042d6:	3a04      	subs	r2, #4
  4042d8:	2a03      	cmp	r2, #3
  4042da:	f846 5b04 	str.w	r5, [r6], #4
  4042de:	d8fa      	bhi.n	4042d6 <memset+0x6a>
  4042e0:	1f22      	subs	r2, r4, #4
  4042e2:	f022 0203 	bic.w	r2, r2, #3
  4042e6:	3204      	adds	r2, #4
  4042e8:	4413      	add	r3, r2
  4042ea:	f004 0403 	and.w	r4, r4, #3
  4042ee:	b12c      	cbz	r4, 4042fc <memset+0x90>
  4042f0:	b2c9      	uxtb	r1, r1
  4042f2:	441c      	add	r4, r3
  4042f4:	f803 1b01 	strb.w	r1, [r3], #1
  4042f8:	429c      	cmp	r4, r3
  4042fa:	d1fb      	bne.n	4042f4 <memset+0x88>
  4042fc:	bc70      	pop	{r4, r5, r6}
  4042fe:	4770      	bx	lr
  404300:	4614      	mov	r4, r2
  404302:	4603      	mov	r3, r0
  404304:	e7c2      	b.n	40428c <memset+0x20>
  404306:	bf00      	nop

00404308 <__malloc_lock>:
  404308:	4801      	ldr	r0, [pc, #4]	; (404310 <__malloc_lock+0x8>)
  40430a:	f001 bd7d 	b.w	405e08 <__retarget_lock_acquire_recursive>
  40430e:	bf00      	nop
  404310:	20400e40 	.word	0x20400e40

00404314 <__malloc_unlock>:
  404314:	4801      	ldr	r0, [pc, #4]	; (40431c <__malloc_unlock+0x8>)
  404316:	f001 bd79 	b.w	405e0c <__retarget_lock_release_recursive>
  40431a:	bf00      	nop
  40431c:	20400e40 	.word	0x20400e40

00404320 <rand>:
  404320:	b410      	push	{r4}
  404322:	4b0c      	ldr	r3, [pc, #48]	; (404354 <rand+0x34>)
  404324:	480c      	ldr	r0, [pc, #48]	; (404358 <rand+0x38>)
  404326:	6819      	ldr	r1, [r3, #0]
  404328:	4c0c      	ldr	r4, [pc, #48]	; (40435c <rand+0x3c>)
  40432a:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  40432e:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  404332:	fb00 f002 	mul.w	r0, r0, r2
  404336:	fb04 0003 	mla	r0, r4, r3, r0
  40433a:	fba2 2304 	umull	r2, r3, r2, r4
  40433e:	4403      	add	r3, r0
  404340:	3201      	adds	r2, #1
  404342:	f143 0300 	adc.w	r3, r3, #0
  404346:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  40434a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  40434e:	bc10      	pop	{r4}
  404350:	4770      	bx	lr
  404352:	bf00      	nop
  404354:	20400024 	.word	0x20400024
  404358:	5851f42d 	.word	0x5851f42d
  40435c:	4c957f2d 	.word	0x4c957f2d

00404360 <_sbrk_r>:
  404360:	b538      	push	{r3, r4, r5, lr}
  404362:	4c07      	ldr	r4, [pc, #28]	; (404380 <_sbrk_r+0x20>)
  404364:	2300      	movs	r3, #0
  404366:	4605      	mov	r5, r0
  404368:	4608      	mov	r0, r1
  40436a:	6023      	str	r3, [r4, #0]
  40436c:	f7fd f842 	bl	4013f4 <_sbrk>
  404370:	1c43      	adds	r3, r0, #1
  404372:	d000      	beq.n	404376 <_sbrk_r+0x16>
  404374:	bd38      	pop	{r3, r4, r5, pc}
  404376:	6823      	ldr	r3, [r4, #0]
  404378:	2b00      	cmp	r3, #0
  40437a:	d0fb      	beq.n	404374 <_sbrk_r+0x14>
  40437c:	602b      	str	r3, [r5, #0]
  40437e:	bd38      	pop	{r3, r4, r5, pc}
  404380:	20400e54 	.word	0x20400e54

00404384 <setbuf>:
  404384:	2900      	cmp	r1, #0
  404386:	bf0c      	ite	eq
  404388:	2202      	moveq	r2, #2
  40438a:	2200      	movne	r2, #0
  40438c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404390:	f000 b800 	b.w	404394 <setvbuf>

00404394 <setvbuf>:
  404394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404398:	4c61      	ldr	r4, [pc, #388]	; (404520 <setvbuf+0x18c>)
  40439a:	6825      	ldr	r5, [r4, #0]
  40439c:	b083      	sub	sp, #12
  40439e:	4604      	mov	r4, r0
  4043a0:	460f      	mov	r7, r1
  4043a2:	4690      	mov	r8, r2
  4043a4:	461e      	mov	r6, r3
  4043a6:	b115      	cbz	r5, 4043ae <setvbuf+0x1a>
  4043a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4043aa:	2b00      	cmp	r3, #0
  4043ac:	d064      	beq.n	404478 <setvbuf+0xe4>
  4043ae:	f1b8 0f02 	cmp.w	r8, #2
  4043b2:	d006      	beq.n	4043c2 <setvbuf+0x2e>
  4043b4:	f1b8 0f01 	cmp.w	r8, #1
  4043b8:	f200 809f 	bhi.w	4044fa <setvbuf+0x166>
  4043bc:	2e00      	cmp	r6, #0
  4043be:	f2c0 809c 	blt.w	4044fa <setvbuf+0x166>
  4043c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4043c4:	07d8      	lsls	r0, r3, #31
  4043c6:	d534      	bpl.n	404432 <setvbuf+0x9e>
  4043c8:	4621      	mov	r1, r4
  4043ca:	4628      	mov	r0, r5
  4043cc:	f001 f904 	bl	4055d8 <_fflush_r>
  4043d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4043d2:	b141      	cbz	r1, 4043e6 <setvbuf+0x52>
  4043d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4043d8:	4299      	cmp	r1, r3
  4043da:	d002      	beq.n	4043e2 <setvbuf+0x4e>
  4043dc:	4628      	mov	r0, r5
  4043de:	f001 fa79 	bl	4058d4 <_free_r>
  4043e2:	2300      	movs	r3, #0
  4043e4:	6323      	str	r3, [r4, #48]	; 0x30
  4043e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043ea:	2200      	movs	r2, #0
  4043ec:	61a2      	str	r2, [r4, #24]
  4043ee:	6062      	str	r2, [r4, #4]
  4043f0:	061a      	lsls	r2, r3, #24
  4043f2:	d43a      	bmi.n	40446a <setvbuf+0xd6>
  4043f4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4043f8:	f023 0303 	bic.w	r3, r3, #3
  4043fc:	f1b8 0f02 	cmp.w	r8, #2
  404400:	81a3      	strh	r3, [r4, #12]
  404402:	d01d      	beq.n	404440 <setvbuf+0xac>
  404404:	ab01      	add	r3, sp, #4
  404406:	466a      	mov	r2, sp
  404408:	4621      	mov	r1, r4
  40440a:	4628      	mov	r0, r5
  40440c:	f001 fd00 	bl	405e10 <__swhatbuf_r>
  404410:	89a3      	ldrh	r3, [r4, #12]
  404412:	4318      	orrs	r0, r3
  404414:	81a0      	strh	r0, [r4, #12]
  404416:	2e00      	cmp	r6, #0
  404418:	d132      	bne.n	404480 <setvbuf+0xec>
  40441a:	9e00      	ldr	r6, [sp, #0]
  40441c:	4630      	mov	r0, r6
  40441e:	f7ff fbcb 	bl	403bb8 <malloc>
  404422:	4607      	mov	r7, r0
  404424:	2800      	cmp	r0, #0
  404426:	d06b      	beq.n	404500 <setvbuf+0x16c>
  404428:	89a3      	ldrh	r3, [r4, #12]
  40442a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40442e:	81a3      	strh	r3, [r4, #12]
  404430:	e028      	b.n	404484 <setvbuf+0xf0>
  404432:	89a3      	ldrh	r3, [r4, #12]
  404434:	0599      	lsls	r1, r3, #22
  404436:	d4c7      	bmi.n	4043c8 <setvbuf+0x34>
  404438:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40443a:	f001 fce5 	bl	405e08 <__retarget_lock_acquire_recursive>
  40443e:	e7c3      	b.n	4043c8 <setvbuf+0x34>
  404440:	2500      	movs	r5, #0
  404442:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404444:	2600      	movs	r6, #0
  404446:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40444a:	f043 0302 	orr.w	r3, r3, #2
  40444e:	2001      	movs	r0, #1
  404450:	60a6      	str	r6, [r4, #8]
  404452:	07ce      	lsls	r6, r1, #31
  404454:	81a3      	strh	r3, [r4, #12]
  404456:	6022      	str	r2, [r4, #0]
  404458:	6122      	str	r2, [r4, #16]
  40445a:	6160      	str	r0, [r4, #20]
  40445c:	d401      	bmi.n	404462 <setvbuf+0xce>
  40445e:	0598      	lsls	r0, r3, #22
  404460:	d53e      	bpl.n	4044e0 <setvbuf+0x14c>
  404462:	4628      	mov	r0, r5
  404464:	b003      	add	sp, #12
  404466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40446a:	6921      	ldr	r1, [r4, #16]
  40446c:	4628      	mov	r0, r5
  40446e:	f001 fa31 	bl	4058d4 <_free_r>
  404472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404476:	e7bd      	b.n	4043f4 <setvbuf+0x60>
  404478:	4628      	mov	r0, r5
  40447a:	f001 f905 	bl	405688 <__sinit>
  40447e:	e796      	b.n	4043ae <setvbuf+0x1a>
  404480:	2f00      	cmp	r7, #0
  404482:	d0cb      	beq.n	40441c <setvbuf+0x88>
  404484:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404486:	2b00      	cmp	r3, #0
  404488:	d033      	beq.n	4044f2 <setvbuf+0x15e>
  40448a:	9b00      	ldr	r3, [sp, #0]
  40448c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404490:	6027      	str	r7, [r4, #0]
  404492:	429e      	cmp	r6, r3
  404494:	bf1c      	itt	ne
  404496:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40449a:	81a2      	strhne	r2, [r4, #12]
  40449c:	f1b8 0f01 	cmp.w	r8, #1
  4044a0:	bf04      	itt	eq
  4044a2:	f042 0201 	orreq.w	r2, r2, #1
  4044a6:	81a2      	strheq	r2, [r4, #12]
  4044a8:	b292      	uxth	r2, r2
  4044aa:	f012 0308 	ands.w	r3, r2, #8
  4044ae:	6127      	str	r7, [r4, #16]
  4044b0:	6166      	str	r6, [r4, #20]
  4044b2:	d00e      	beq.n	4044d2 <setvbuf+0x13e>
  4044b4:	07d1      	lsls	r1, r2, #31
  4044b6:	d51a      	bpl.n	4044ee <setvbuf+0x15a>
  4044b8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4044ba:	4276      	negs	r6, r6
  4044bc:	2300      	movs	r3, #0
  4044be:	f015 0501 	ands.w	r5, r5, #1
  4044c2:	61a6      	str	r6, [r4, #24]
  4044c4:	60a3      	str	r3, [r4, #8]
  4044c6:	d009      	beq.n	4044dc <setvbuf+0x148>
  4044c8:	2500      	movs	r5, #0
  4044ca:	4628      	mov	r0, r5
  4044cc:	b003      	add	sp, #12
  4044ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4044d2:	60a3      	str	r3, [r4, #8]
  4044d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4044d6:	f015 0501 	ands.w	r5, r5, #1
  4044da:	d1f5      	bne.n	4044c8 <setvbuf+0x134>
  4044dc:	0593      	lsls	r3, r2, #22
  4044de:	d4c0      	bmi.n	404462 <setvbuf+0xce>
  4044e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4044e2:	f001 fc93 	bl	405e0c <__retarget_lock_release_recursive>
  4044e6:	4628      	mov	r0, r5
  4044e8:	b003      	add	sp, #12
  4044ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4044ee:	60a6      	str	r6, [r4, #8]
  4044f0:	e7f0      	b.n	4044d4 <setvbuf+0x140>
  4044f2:	4628      	mov	r0, r5
  4044f4:	f001 f8c8 	bl	405688 <__sinit>
  4044f8:	e7c7      	b.n	40448a <setvbuf+0xf6>
  4044fa:	f04f 35ff 	mov.w	r5, #4294967295
  4044fe:	e7b0      	b.n	404462 <setvbuf+0xce>
  404500:	f8dd 9000 	ldr.w	r9, [sp]
  404504:	45b1      	cmp	r9, r6
  404506:	d004      	beq.n	404512 <setvbuf+0x17e>
  404508:	4648      	mov	r0, r9
  40450a:	f7ff fb55 	bl	403bb8 <malloc>
  40450e:	4607      	mov	r7, r0
  404510:	b920      	cbnz	r0, 40451c <setvbuf+0x188>
  404512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404516:	f04f 35ff 	mov.w	r5, #4294967295
  40451a:	e792      	b.n	404442 <setvbuf+0xae>
  40451c:	464e      	mov	r6, r9
  40451e:	e783      	b.n	404428 <setvbuf+0x94>
  404520:	20400024 	.word	0x20400024
	...

00404540 <strlen>:
  404540:	f890 f000 	pld	[r0]
  404544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404548:	f020 0107 	bic.w	r1, r0, #7
  40454c:	f06f 0c00 	mvn.w	ip, #0
  404550:	f010 0407 	ands.w	r4, r0, #7
  404554:	f891 f020 	pld	[r1, #32]
  404558:	f040 8049 	bne.w	4045ee <strlen+0xae>
  40455c:	f04f 0400 	mov.w	r4, #0
  404560:	f06f 0007 	mvn.w	r0, #7
  404564:	e9d1 2300 	ldrd	r2, r3, [r1]
  404568:	f891 f040 	pld	[r1, #64]	; 0x40
  40456c:	f100 0008 	add.w	r0, r0, #8
  404570:	fa82 f24c 	uadd8	r2, r2, ip
  404574:	faa4 f28c 	sel	r2, r4, ip
  404578:	fa83 f34c 	uadd8	r3, r3, ip
  40457c:	faa2 f38c 	sel	r3, r2, ip
  404580:	bb4b      	cbnz	r3, 4045d6 <strlen+0x96>
  404582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404586:	fa82 f24c 	uadd8	r2, r2, ip
  40458a:	f100 0008 	add.w	r0, r0, #8
  40458e:	faa4 f28c 	sel	r2, r4, ip
  404592:	fa83 f34c 	uadd8	r3, r3, ip
  404596:	faa2 f38c 	sel	r3, r2, ip
  40459a:	b9e3      	cbnz	r3, 4045d6 <strlen+0x96>
  40459c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4045a0:	fa82 f24c 	uadd8	r2, r2, ip
  4045a4:	f100 0008 	add.w	r0, r0, #8
  4045a8:	faa4 f28c 	sel	r2, r4, ip
  4045ac:	fa83 f34c 	uadd8	r3, r3, ip
  4045b0:	faa2 f38c 	sel	r3, r2, ip
  4045b4:	b97b      	cbnz	r3, 4045d6 <strlen+0x96>
  4045b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4045ba:	f101 0120 	add.w	r1, r1, #32
  4045be:	fa82 f24c 	uadd8	r2, r2, ip
  4045c2:	f100 0008 	add.w	r0, r0, #8
  4045c6:	faa4 f28c 	sel	r2, r4, ip
  4045ca:	fa83 f34c 	uadd8	r3, r3, ip
  4045ce:	faa2 f38c 	sel	r3, r2, ip
  4045d2:	2b00      	cmp	r3, #0
  4045d4:	d0c6      	beq.n	404564 <strlen+0x24>
  4045d6:	2a00      	cmp	r2, #0
  4045d8:	bf04      	itt	eq
  4045da:	3004      	addeq	r0, #4
  4045dc:	461a      	moveq	r2, r3
  4045de:	ba12      	rev	r2, r2
  4045e0:	fab2 f282 	clz	r2, r2
  4045e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4045e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4045ec:	4770      	bx	lr
  4045ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4045f2:	f004 0503 	and.w	r5, r4, #3
  4045f6:	f1c4 0000 	rsb	r0, r4, #0
  4045fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4045fe:	f014 0f04 	tst.w	r4, #4
  404602:	f891 f040 	pld	[r1, #64]	; 0x40
  404606:	fa0c f505 	lsl.w	r5, ip, r5
  40460a:	ea62 0205 	orn	r2, r2, r5
  40460e:	bf1c      	itt	ne
  404610:	ea63 0305 	ornne	r3, r3, r5
  404614:	4662      	movne	r2, ip
  404616:	f04f 0400 	mov.w	r4, #0
  40461a:	e7a9      	b.n	404570 <strlen+0x30>

0040461c <__sprint_r.part.0>:
  40461c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404620:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404622:	049c      	lsls	r4, r3, #18
  404624:	4693      	mov	fp, r2
  404626:	d52f      	bpl.n	404688 <__sprint_r.part.0+0x6c>
  404628:	6893      	ldr	r3, [r2, #8]
  40462a:	6812      	ldr	r2, [r2, #0]
  40462c:	b353      	cbz	r3, 404684 <__sprint_r.part.0+0x68>
  40462e:	460e      	mov	r6, r1
  404630:	4607      	mov	r7, r0
  404632:	f102 0908 	add.w	r9, r2, #8
  404636:	e919 0420 	ldmdb	r9, {r5, sl}
  40463a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40463e:	d017      	beq.n	404670 <__sprint_r.part.0+0x54>
  404640:	3d04      	subs	r5, #4
  404642:	2400      	movs	r4, #0
  404644:	e001      	b.n	40464a <__sprint_r.part.0+0x2e>
  404646:	45a0      	cmp	r8, r4
  404648:	d010      	beq.n	40466c <__sprint_r.part.0+0x50>
  40464a:	4632      	mov	r2, r6
  40464c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404650:	4638      	mov	r0, r7
  404652:	f001 f8bb 	bl	4057cc <_fputwc_r>
  404656:	1c43      	adds	r3, r0, #1
  404658:	f104 0401 	add.w	r4, r4, #1
  40465c:	d1f3      	bne.n	404646 <__sprint_r.part.0+0x2a>
  40465e:	2300      	movs	r3, #0
  404660:	f8cb 3008 	str.w	r3, [fp, #8]
  404664:	f8cb 3004 	str.w	r3, [fp, #4]
  404668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40466c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404670:	f02a 0a03 	bic.w	sl, sl, #3
  404674:	eba3 030a 	sub.w	r3, r3, sl
  404678:	f8cb 3008 	str.w	r3, [fp, #8]
  40467c:	f109 0908 	add.w	r9, r9, #8
  404680:	2b00      	cmp	r3, #0
  404682:	d1d8      	bne.n	404636 <__sprint_r.part.0+0x1a>
  404684:	2000      	movs	r0, #0
  404686:	e7ea      	b.n	40465e <__sprint_r.part.0+0x42>
  404688:	f001 fa0a 	bl	405aa0 <__sfvwrite_r>
  40468c:	2300      	movs	r3, #0
  40468e:	f8cb 3008 	str.w	r3, [fp, #8]
  404692:	f8cb 3004 	str.w	r3, [fp, #4]
  404696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40469a:	bf00      	nop

0040469c <_vfiprintf_r>:
  40469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046a0:	b0ad      	sub	sp, #180	; 0xb4
  4046a2:	461d      	mov	r5, r3
  4046a4:	468b      	mov	fp, r1
  4046a6:	4690      	mov	r8, r2
  4046a8:	9307      	str	r3, [sp, #28]
  4046aa:	9006      	str	r0, [sp, #24]
  4046ac:	b118      	cbz	r0, 4046b6 <_vfiprintf_r+0x1a>
  4046ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4046b0:	2b00      	cmp	r3, #0
  4046b2:	f000 80f3 	beq.w	40489c <_vfiprintf_r+0x200>
  4046b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4046be:	07df      	lsls	r7, r3, #31
  4046c0:	b281      	uxth	r1, r0
  4046c2:	d402      	bmi.n	4046ca <_vfiprintf_r+0x2e>
  4046c4:	058e      	lsls	r6, r1, #22
  4046c6:	f140 80fc 	bpl.w	4048c2 <_vfiprintf_r+0x226>
  4046ca:	048c      	lsls	r4, r1, #18
  4046cc:	d40a      	bmi.n	4046e4 <_vfiprintf_r+0x48>
  4046ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4046d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4046da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4046de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4046e2:	b289      	uxth	r1, r1
  4046e4:	0708      	lsls	r0, r1, #28
  4046e6:	f140 80b3 	bpl.w	404850 <_vfiprintf_r+0x1b4>
  4046ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4046ee:	2b00      	cmp	r3, #0
  4046f0:	f000 80ae 	beq.w	404850 <_vfiprintf_r+0x1b4>
  4046f4:	f001 031a 	and.w	r3, r1, #26
  4046f8:	2b0a      	cmp	r3, #10
  4046fa:	f000 80b5 	beq.w	404868 <_vfiprintf_r+0x1cc>
  4046fe:	2300      	movs	r3, #0
  404700:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404704:	930b      	str	r3, [sp, #44]	; 0x2c
  404706:	9311      	str	r3, [sp, #68]	; 0x44
  404708:	9310      	str	r3, [sp, #64]	; 0x40
  40470a:	9303      	str	r3, [sp, #12]
  40470c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404710:	46ca      	mov	sl, r9
  404712:	f8cd b010 	str.w	fp, [sp, #16]
  404716:	f898 3000 	ldrb.w	r3, [r8]
  40471a:	4644      	mov	r4, r8
  40471c:	b1fb      	cbz	r3, 40475e <_vfiprintf_r+0xc2>
  40471e:	2b25      	cmp	r3, #37	; 0x25
  404720:	d102      	bne.n	404728 <_vfiprintf_r+0x8c>
  404722:	e01c      	b.n	40475e <_vfiprintf_r+0xc2>
  404724:	2b25      	cmp	r3, #37	; 0x25
  404726:	d003      	beq.n	404730 <_vfiprintf_r+0x94>
  404728:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40472c:	2b00      	cmp	r3, #0
  40472e:	d1f9      	bne.n	404724 <_vfiprintf_r+0x88>
  404730:	eba4 0508 	sub.w	r5, r4, r8
  404734:	b19d      	cbz	r5, 40475e <_vfiprintf_r+0xc2>
  404736:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404738:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40473a:	f8ca 8000 	str.w	r8, [sl]
  40473e:	3301      	adds	r3, #1
  404740:	442a      	add	r2, r5
  404742:	2b07      	cmp	r3, #7
  404744:	f8ca 5004 	str.w	r5, [sl, #4]
  404748:	9211      	str	r2, [sp, #68]	; 0x44
  40474a:	9310      	str	r3, [sp, #64]	; 0x40
  40474c:	dd7a      	ble.n	404844 <_vfiprintf_r+0x1a8>
  40474e:	2a00      	cmp	r2, #0
  404750:	f040 84b0 	bne.w	4050b4 <_vfiprintf_r+0xa18>
  404754:	9b03      	ldr	r3, [sp, #12]
  404756:	9210      	str	r2, [sp, #64]	; 0x40
  404758:	442b      	add	r3, r5
  40475a:	46ca      	mov	sl, r9
  40475c:	9303      	str	r3, [sp, #12]
  40475e:	7823      	ldrb	r3, [r4, #0]
  404760:	2b00      	cmp	r3, #0
  404762:	f000 83e0 	beq.w	404f26 <_vfiprintf_r+0x88a>
  404766:	2000      	movs	r0, #0
  404768:	f04f 0300 	mov.w	r3, #0
  40476c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404770:	f104 0801 	add.w	r8, r4, #1
  404774:	7862      	ldrb	r2, [r4, #1]
  404776:	4605      	mov	r5, r0
  404778:	4606      	mov	r6, r0
  40477a:	4603      	mov	r3, r0
  40477c:	f04f 34ff 	mov.w	r4, #4294967295
  404780:	f108 0801 	add.w	r8, r8, #1
  404784:	f1a2 0120 	sub.w	r1, r2, #32
  404788:	2958      	cmp	r1, #88	; 0x58
  40478a:	f200 82de 	bhi.w	404d4a <_vfiprintf_r+0x6ae>
  40478e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404792:	0221      	.short	0x0221
  404794:	02dc02dc 	.word	0x02dc02dc
  404798:	02dc0229 	.word	0x02dc0229
  40479c:	02dc02dc 	.word	0x02dc02dc
  4047a0:	02dc02dc 	.word	0x02dc02dc
  4047a4:	028902dc 	.word	0x028902dc
  4047a8:	02dc0295 	.word	0x02dc0295
  4047ac:	02bd00a2 	.word	0x02bd00a2
  4047b0:	019f02dc 	.word	0x019f02dc
  4047b4:	01a401a4 	.word	0x01a401a4
  4047b8:	01a401a4 	.word	0x01a401a4
  4047bc:	01a401a4 	.word	0x01a401a4
  4047c0:	01a401a4 	.word	0x01a401a4
  4047c4:	02dc01a4 	.word	0x02dc01a4
  4047c8:	02dc02dc 	.word	0x02dc02dc
  4047cc:	02dc02dc 	.word	0x02dc02dc
  4047d0:	02dc02dc 	.word	0x02dc02dc
  4047d4:	02dc02dc 	.word	0x02dc02dc
  4047d8:	01b202dc 	.word	0x01b202dc
  4047dc:	02dc02dc 	.word	0x02dc02dc
  4047e0:	02dc02dc 	.word	0x02dc02dc
  4047e4:	02dc02dc 	.word	0x02dc02dc
  4047e8:	02dc02dc 	.word	0x02dc02dc
  4047ec:	02dc02dc 	.word	0x02dc02dc
  4047f0:	02dc0197 	.word	0x02dc0197
  4047f4:	02dc02dc 	.word	0x02dc02dc
  4047f8:	02dc02dc 	.word	0x02dc02dc
  4047fc:	02dc019b 	.word	0x02dc019b
  404800:	025302dc 	.word	0x025302dc
  404804:	02dc02dc 	.word	0x02dc02dc
  404808:	02dc02dc 	.word	0x02dc02dc
  40480c:	02dc02dc 	.word	0x02dc02dc
  404810:	02dc02dc 	.word	0x02dc02dc
  404814:	02dc02dc 	.word	0x02dc02dc
  404818:	021b025a 	.word	0x021b025a
  40481c:	02dc02dc 	.word	0x02dc02dc
  404820:	026e02dc 	.word	0x026e02dc
  404824:	02dc021b 	.word	0x02dc021b
  404828:	027302dc 	.word	0x027302dc
  40482c:	01f502dc 	.word	0x01f502dc
  404830:	02090182 	.word	0x02090182
  404834:	02dc02d7 	.word	0x02dc02d7
  404838:	02dc029a 	.word	0x02dc029a
  40483c:	02dc00a7 	.word	0x02dc00a7
  404840:	022e02dc 	.word	0x022e02dc
  404844:	f10a 0a08 	add.w	sl, sl, #8
  404848:	9b03      	ldr	r3, [sp, #12]
  40484a:	442b      	add	r3, r5
  40484c:	9303      	str	r3, [sp, #12]
  40484e:	e786      	b.n	40475e <_vfiprintf_r+0xc2>
  404850:	4659      	mov	r1, fp
  404852:	9806      	ldr	r0, [sp, #24]
  404854:	f000 fdac 	bl	4053b0 <__swsetup_r>
  404858:	bb18      	cbnz	r0, 4048a2 <_vfiprintf_r+0x206>
  40485a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40485e:	f001 031a 	and.w	r3, r1, #26
  404862:	2b0a      	cmp	r3, #10
  404864:	f47f af4b 	bne.w	4046fe <_vfiprintf_r+0x62>
  404868:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40486c:	2b00      	cmp	r3, #0
  40486e:	f6ff af46 	blt.w	4046fe <_vfiprintf_r+0x62>
  404872:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404876:	07db      	lsls	r3, r3, #31
  404878:	d405      	bmi.n	404886 <_vfiprintf_r+0x1ea>
  40487a:	058f      	lsls	r7, r1, #22
  40487c:	d403      	bmi.n	404886 <_vfiprintf_r+0x1ea>
  40487e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404882:	f001 fac3 	bl	405e0c <__retarget_lock_release_recursive>
  404886:	462b      	mov	r3, r5
  404888:	4642      	mov	r2, r8
  40488a:	4659      	mov	r1, fp
  40488c:	9806      	ldr	r0, [sp, #24]
  40488e:	f000 fd4d 	bl	40532c <__sbprintf>
  404892:	9003      	str	r0, [sp, #12]
  404894:	9803      	ldr	r0, [sp, #12]
  404896:	b02d      	add	sp, #180	; 0xb4
  404898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40489c:	f000 fef4 	bl	405688 <__sinit>
  4048a0:	e709      	b.n	4046b6 <_vfiprintf_r+0x1a>
  4048a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4048a6:	07d9      	lsls	r1, r3, #31
  4048a8:	d404      	bmi.n	4048b4 <_vfiprintf_r+0x218>
  4048aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4048ae:	059a      	lsls	r2, r3, #22
  4048b0:	f140 84aa 	bpl.w	405208 <_vfiprintf_r+0xb6c>
  4048b4:	f04f 33ff 	mov.w	r3, #4294967295
  4048b8:	9303      	str	r3, [sp, #12]
  4048ba:	9803      	ldr	r0, [sp, #12]
  4048bc:	b02d      	add	sp, #180	; 0xb4
  4048be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4048c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4048c6:	f001 fa9f 	bl	405e08 <__retarget_lock_acquire_recursive>
  4048ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4048ce:	b281      	uxth	r1, r0
  4048d0:	e6fb      	b.n	4046ca <_vfiprintf_r+0x2e>
  4048d2:	4276      	negs	r6, r6
  4048d4:	9207      	str	r2, [sp, #28]
  4048d6:	f043 0304 	orr.w	r3, r3, #4
  4048da:	f898 2000 	ldrb.w	r2, [r8]
  4048de:	e74f      	b.n	404780 <_vfiprintf_r+0xe4>
  4048e0:	9608      	str	r6, [sp, #32]
  4048e2:	069e      	lsls	r6, r3, #26
  4048e4:	f100 8450 	bmi.w	405188 <_vfiprintf_r+0xaec>
  4048e8:	9907      	ldr	r1, [sp, #28]
  4048ea:	06dd      	lsls	r5, r3, #27
  4048ec:	460a      	mov	r2, r1
  4048ee:	f100 83ef 	bmi.w	4050d0 <_vfiprintf_r+0xa34>
  4048f2:	0658      	lsls	r0, r3, #25
  4048f4:	f140 83ec 	bpl.w	4050d0 <_vfiprintf_r+0xa34>
  4048f8:	880e      	ldrh	r6, [r1, #0]
  4048fa:	3104      	adds	r1, #4
  4048fc:	2700      	movs	r7, #0
  4048fe:	2201      	movs	r2, #1
  404900:	9107      	str	r1, [sp, #28]
  404902:	f04f 0100 	mov.w	r1, #0
  404906:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40490a:	2500      	movs	r5, #0
  40490c:	1c61      	adds	r1, r4, #1
  40490e:	f000 8116 	beq.w	404b3e <_vfiprintf_r+0x4a2>
  404912:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404916:	9102      	str	r1, [sp, #8]
  404918:	ea56 0107 	orrs.w	r1, r6, r7
  40491c:	f040 8114 	bne.w	404b48 <_vfiprintf_r+0x4ac>
  404920:	2c00      	cmp	r4, #0
  404922:	f040 835c 	bne.w	404fde <_vfiprintf_r+0x942>
  404926:	2a00      	cmp	r2, #0
  404928:	f040 83b7 	bne.w	40509a <_vfiprintf_r+0x9fe>
  40492c:	f013 0301 	ands.w	r3, r3, #1
  404930:	9305      	str	r3, [sp, #20]
  404932:	f000 8457 	beq.w	4051e4 <_vfiprintf_r+0xb48>
  404936:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40493a:	2330      	movs	r3, #48	; 0x30
  40493c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404940:	9b05      	ldr	r3, [sp, #20]
  404942:	42a3      	cmp	r3, r4
  404944:	bfb8      	it	lt
  404946:	4623      	movlt	r3, r4
  404948:	9301      	str	r3, [sp, #4]
  40494a:	b10d      	cbz	r5, 404950 <_vfiprintf_r+0x2b4>
  40494c:	3301      	adds	r3, #1
  40494e:	9301      	str	r3, [sp, #4]
  404950:	9b02      	ldr	r3, [sp, #8]
  404952:	f013 0302 	ands.w	r3, r3, #2
  404956:	9309      	str	r3, [sp, #36]	; 0x24
  404958:	d002      	beq.n	404960 <_vfiprintf_r+0x2c4>
  40495a:	9b01      	ldr	r3, [sp, #4]
  40495c:	3302      	adds	r3, #2
  40495e:	9301      	str	r3, [sp, #4]
  404960:	9b02      	ldr	r3, [sp, #8]
  404962:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404966:	930a      	str	r3, [sp, #40]	; 0x28
  404968:	f040 8217 	bne.w	404d9a <_vfiprintf_r+0x6fe>
  40496c:	9b08      	ldr	r3, [sp, #32]
  40496e:	9a01      	ldr	r2, [sp, #4]
  404970:	1a9d      	subs	r5, r3, r2
  404972:	2d00      	cmp	r5, #0
  404974:	f340 8211 	ble.w	404d9a <_vfiprintf_r+0x6fe>
  404978:	2d10      	cmp	r5, #16
  40497a:	f340 8490 	ble.w	40529e <_vfiprintf_r+0xc02>
  40497e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404980:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404982:	4ec4      	ldr	r6, [pc, #784]	; (404c94 <_vfiprintf_r+0x5f8>)
  404984:	46d6      	mov	lr, sl
  404986:	2710      	movs	r7, #16
  404988:	46a2      	mov	sl, r4
  40498a:	4619      	mov	r1, r3
  40498c:	9c06      	ldr	r4, [sp, #24]
  40498e:	e007      	b.n	4049a0 <_vfiprintf_r+0x304>
  404990:	f101 0c02 	add.w	ip, r1, #2
  404994:	f10e 0e08 	add.w	lr, lr, #8
  404998:	4601      	mov	r1, r0
  40499a:	3d10      	subs	r5, #16
  40499c:	2d10      	cmp	r5, #16
  40499e:	dd11      	ble.n	4049c4 <_vfiprintf_r+0x328>
  4049a0:	1c48      	adds	r0, r1, #1
  4049a2:	3210      	adds	r2, #16
  4049a4:	2807      	cmp	r0, #7
  4049a6:	9211      	str	r2, [sp, #68]	; 0x44
  4049a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4049ac:	9010      	str	r0, [sp, #64]	; 0x40
  4049ae:	ddef      	ble.n	404990 <_vfiprintf_r+0x2f4>
  4049b0:	2a00      	cmp	r2, #0
  4049b2:	f040 81e4 	bne.w	404d7e <_vfiprintf_r+0x6e2>
  4049b6:	3d10      	subs	r5, #16
  4049b8:	2d10      	cmp	r5, #16
  4049ba:	4611      	mov	r1, r2
  4049bc:	f04f 0c01 	mov.w	ip, #1
  4049c0:	46ce      	mov	lr, r9
  4049c2:	dced      	bgt.n	4049a0 <_vfiprintf_r+0x304>
  4049c4:	4654      	mov	r4, sl
  4049c6:	4661      	mov	r1, ip
  4049c8:	46f2      	mov	sl, lr
  4049ca:	442a      	add	r2, r5
  4049cc:	2907      	cmp	r1, #7
  4049ce:	9211      	str	r2, [sp, #68]	; 0x44
  4049d0:	f8ca 6000 	str.w	r6, [sl]
  4049d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4049d8:	9110      	str	r1, [sp, #64]	; 0x40
  4049da:	f300 82ec 	bgt.w	404fb6 <_vfiprintf_r+0x91a>
  4049de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4049e2:	f10a 0a08 	add.w	sl, sl, #8
  4049e6:	1c48      	adds	r0, r1, #1
  4049e8:	2d00      	cmp	r5, #0
  4049ea:	f040 81de 	bne.w	404daa <_vfiprintf_r+0x70e>
  4049ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4049f0:	2b00      	cmp	r3, #0
  4049f2:	f000 81f8 	beq.w	404de6 <_vfiprintf_r+0x74a>
  4049f6:	3202      	adds	r2, #2
  4049f8:	a90e      	add	r1, sp, #56	; 0x38
  4049fa:	2302      	movs	r3, #2
  4049fc:	2807      	cmp	r0, #7
  4049fe:	9211      	str	r2, [sp, #68]	; 0x44
  404a00:	9010      	str	r0, [sp, #64]	; 0x40
  404a02:	e88a 000a 	stmia.w	sl, {r1, r3}
  404a06:	f340 81ea 	ble.w	404dde <_vfiprintf_r+0x742>
  404a0a:	2a00      	cmp	r2, #0
  404a0c:	f040 838c 	bne.w	405128 <_vfiprintf_r+0xa8c>
  404a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a12:	2b80      	cmp	r3, #128	; 0x80
  404a14:	f04f 0001 	mov.w	r0, #1
  404a18:	4611      	mov	r1, r2
  404a1a:	46ca      	mov	sl, r9
  404a1c:	f040 81e7 	bne.w	404dee <_vfiprintf_r+0x752>
  404a20:	9b08      	ldr	r3, [sp, #32]
  404a22:	9d01      	ldr	r5, [sp, #4]
  404a24:	1b5e      	subs	r6, r3, r5
  404a26:	2e00      	cmp	r6, #0
  404a28:	f340 81e1 	ble.w	404dee <_vfiprintf_r+0x752>
  404a2c:	2e10      	cmp	r6, #16
  404a2e:	4d9a      	ldr	r5, [pc, #616]	; (404c98 <_vfiprintf_r+0x5fc>)
  404a30:	f340 8450 	ble.w	4052d4 <_vfiprintf_r+0xc38>
  404a34:	46d4      	mov	ip, sl
  404a36:	2710      	movs	r7, #16
  404a38:	46a2      	mov	sl, r4
  404a3a:	9c06      	ldr	r4, [sp, #24]
  404a3c:	e007      	b.n	404a4e <_vfiprintf_r+0x3b2>
  404a3e:	f101 0e02 	add.w	lr, r1, #2
  404a42:	f10c 0c08 	add.w	ip, ip, #8
  404a46:	4601      	mov	r1, r0
  404a48:	3e10      	subs	r6, #16
  404a4a:	2e10      	cmp	r6, #16
  404a4c:	dd11      	ble.n	404a72 <_vfiprintf_r+0x3d6>
  404a4e:	1c48      	adds	r0, r1, #1
  404a50:	3210      	adds	r2, #16
  404a52:	2807      	cmp	r0, #7
  404a54:	9211      	str	r2, [sp, #68]	; 0x44
  404a56:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404a5a:	9010      	str	r0, [sp, #64]	; 0x40
  404a5c:	ddef      	ble.n	404a3e <_vfiprintf_r+0x3a2>
  404a5e:	2a00      	cmp	r2, #0
  404a60:	f040 829d 	bne.w	404f9e <_vfiprintf_r+0x902>
  404a64:	3e10      	subs	r6, #16
  404a66:	2e10      	cmp	r6, #16
  404a68:	f04f 0e01 	mov.w	lr, #1
  404a6c:	4611      	mov	r1, r2
  404a6e:	46cc      	mov	ip, r9
  404a70:	dced      	bgt.n	404a4e <_vfiprintf_r+0x3b2>
  404a72:	4654      	mov	r4, sl
  404a74:	46e2      	mov	sl, ip
  404a76:	4432      	add	r2, r6
  404a78:	f1be 0f07 	cmp.w	lr, #7
  404a7c:	9211      	str	r2, [sp, #68]	; 0x44
  404a7e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404a82:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404a86:	f300 8369 	bgt.w	40515c <_vfiprintf_r+0xac0>
  404a8a:	f10a 0a08 	add.w	sl, sl, #8
  404a8e:	f10e 0001 	add.w	r0, lr, #1
  404a92:	4671      	mov	r1, lr
  404a94:	e1ab      	b.n	404dee <_vfiprintf_r+0x752>
  404a96:	9608      	str	r6, [sp, #32]
  404a98:	f013 0220 	ands.w	r2, r3, #32
  404a9c:	f040 838c 	bne.w	4051b8 <_vfiprintf_r+0xb1c>
  404aa0:	f013 0110 	ands.w	r1, r3, #16
  404aa4:	f040 831a 	bne.w	4050dc <_vfiprintf_r+0xa40>
  404aa8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404aac:	f000 8316 	beq.w	4050dc <_vfiprintf_r+0xa40>
  404ab0:	9807      	ldr	r0, [sp, #28]
  404ab2:	460a      	mov	r2, r1
  404ab4:	4601      	mov	r1, r0
  404ab6:	3104      	adds	r1, #4
  404ab8:	8806      	ldrh	r6, [r0, #0]
  404aba:	9107      	str	r1, [sp, #28]
  404abc:	2700      	movs	r7, #0
  404abe:	e720      	b.n	404902 <_vfiprintf_r+0x266>
  404ac0:	9608      	str	r6, [sp, #32]
  404ac2:	f043 0310 	orr.w	r3, r3, #16
  404ac6:	e7e7      	b.n	404a98 <_vfiprintf_r+0x3fc>
  404ac8:	9608      	str	r6, [sp, #32]
  404aca:	f043 0310 	orr.w	r3, r3, #16
  404ace:	e708      	b.n	4048e2 <_vfiprintf_r+0x246>
  404ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404ad4:	f898 2000 	ldrb.w	r2, [r8]
  404ad8:	e652      	b.n	404780 <_vfiprintf_r+0xe4>
  404ada:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404ade:	2600      	movs	r6, #0
  404ae0:	f818 2b01 	ldrb.w	r2, [r8], #1
  404ae4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404ae8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404aec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404af0:	2909      	cmp	r1, #9
  404af2:	d9f5      	bls.n	404ae0 <_vfiprintf_r+0x444>
  404af4:	e646      	b.n	404784 <_vfiprintf_r+0xe8>
  404af6:	9608      	str	r6, [sp, #32]
  404af8:	2800      	cmp	r0, #0
  404afa:	f040 8408 	bne.w	40530e <_vfiprintf_r+0xc72>
  404afe:	f043 0310 	orr.w	r3, r3, #16
  404b02:	069e      	lsls	r6, r3, #26
  404b04:	f100 834c 	bmi.w	4051a0 <_vfiprintf_r+0xb04>
  404b08:	06dd      	lsls	r5, r3, #27
  404b0a:	f100 82f3 	bmi.w	4050f4 <_vfiprintf_r+0xa58>
  404b0e:	0658      	lsls	r0, r3, #25
  404b10:	f140 82f0 	bpl.w	4050f4 <_vfiprintf_r+0xa58>
  404b14:	9d07      	ldr	r5, [sp, #28]
  404b16:	f9b5 6000 	ldrsh.w	r6, [r5]
  404b1a:	462a      	mov	r2, r5
  404b1c:	17f7      	asrs	r7, r6, #31
  404b1e:	3204      	adds	r2, #4
  404b20:	4630      	mov	r0, r6
  404b22:	4639      	mov	r1, r7
  404b24:	9207      	str	r2, [sp, #28]
  404b26:	2800      	cmp	r0, #0
  404b28:	f171 0200 	sbcs.w	r2, r1, #0
  404b2c:	f2c0 835d 	blt.w	4051ea <_vfiprintf_r+0xb4e>
  404b30:	1c61      	adds	r1, r4, #1
  404b32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404b36:	f04f 0201 	mov.w	r2, #1
  404b3a:	f47f aeea 	bne.w	404912 <_vfiprintf_r+0x276>
  404b3e:	ea56 0107 	orrs.w	r1, r6, r7
  404b42:	f000 824d 	beq.w	404fe0 <_vfiprintf_r+0x944>
  404b46:	9302      	str	r3, [sp, #8]
  404b48:	2a01      	cmp	r2, #1
  404b4a:	f000 828c 	beq.w	405066 <_vfiprintf_r+0x9ca>
  404b4e:	2a02      	cmp	r2, #2
  404b50:	f040 825c 	bne.w	40500c <_vfiprintf_r+0x970>
  404b54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404b56:	46cb      	mov	fp, r9
  404b58:	0933      	lsrs	r3, r6, #4
  404b5a:	f006 010f 	and.w	r1, r6, #15
  404b5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404b62:	093a      	lsrs	r2, r7, #4
  404b64:	461e      	mov	r6, r3
  404b66:	4617      	mov	r7, r2
  404b68:	5c43      	ldrb	r3, [r0, r1]
  404b6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404b6e:	ea56 0307 	orrs.w	r3, r6, r7
  404b72:	d1f1      	bne.n	404b58 <_vfiprintf_r+0x4bc>
  404b74:	eba9 030b 	sub.w	r3, r9, fp
  404b78:	9305      	str	r3, [sp, #20]
  404b7a:	e6e1      	b.n	404940 <_vfiprintf_r+0x2a4>
  404b7c:	2800      	cmp	r0, #0
  404b7e:	f040 83c0 	bne.w	405302 <_vfiprintf_r+0xc66>
  404b82:	0699      	lsls	r1, r3, #26
  404b84:	f100 8367 	bmi.w	405256 <_vfiprintf_r+0xbba>
  404b88:	06da      	lsls	r2, r3, #27
  404b8a:	f100 80f1 	bmi.w	404d70 <_vfiprintf_r+0x6d4>
  404b8e:	065b      	lsls	r3, r3, #25
  404b90:	f140 80ee 	bpl.w	404d70 <_vfiprintf_r+0x6d4>
  404b94:	9a07      	ldr	r2, [sp, #28]
  404b96:	6813      	ldr	r3, [r2, #0]
  404b98:	3204      	adds	r2, #4
  404b9a:	9207      	str	r2, [sp, #28]
  404b9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404ba0:	801a      	strh	r2, [r3, #0]
  404ba2:	e5b8      	b.n	404716 <_vfiprintf_r+0x7a>
  404ba4:	9807      	ldr	r0, [sp, #28]
  404ba6:	4a3d      	ldr	r2, [pc, #244]	; (404c9c <_vfiprintf_r+0x600>)
  404ba8:	9608      	str	r6, [sp, #32]
  404baa:	920b      	str	r2, [sp, #44]	; 0x2c
  404bac:	6806      	ldr	r6, [r0, #0]
  404bae:	2278      	movs	r2, #120	; 0x78
  404bb0:	2130      	movs	r1, #48	; 0x30
  404bb2:	3004      	adds	r0, #4
  404bb4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404bb8:	f043 0302 	orr.w	r3, r3, #2
  404bbc:	9007      	str	r0, [sp, #28]
  404bbe:	2700      	movs	r7, #0
  404bc0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404bc4:	2202      	movs	r2, #2
  404bc6:	e69c      	b.n	404902 <_vfiprintf_r+0x266>
  404bc8:	9608      	str	r6, [sp, #32]
  404bca:	2800      	cmp	r0, #0
  404bcc:	d099      	beq.n	404b02 <_vfiprintf_r+0x466>
  404bce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404bd2:	e796      	b.n	404b02 <_vfiprintf_r+0x466>
  404bd4:	f898 2000 	ldrb.w	r2, [r8]
  404bd8:	2d00      	cmp	r5, #0
  404bda:	f47f add1 	bne.w	404780 <_vfiprintf_r+0xe4>
  404bde:	2001      	movs	r0, #1
  404be0:	2520      	movs	r5, #32
  404be2:	e5cd      	b.n	404780 <_vfiprintf_r+0xe4>
  404be4:	f043 0301 	orr.w	r3, r3, #1
  404be8:	f898 2000 	ldrb.w	r2, [r8]
  404bec:	e5c8      	b.n	404780 <_vfiprintf_r+0xe4>
  404bee:	9608      	str	r6, [sp, #32]
  404bf0:	2800      	cmp	r0, #0
  404bf2:	f040 8393 	bne.w	40531c <_vfiprintf_r+0xc80>
  404bf6:	4929      	ldr	r1, [pc, #164]	; (404c9c <_vfiprintf_r+0x600>)
  404bf8:	910b      	str	r1, [sp, #44]	; 0x2c
  404bfa:	069f      	lsls	r7, r3, #26
  404bfc:	f100 82e8 	bmi.w	4051d0 <_vfiprintf_r+0xb34>
  404c00:	9807      	ldr	r0, [sp, #28]
  404c02:	06de      	lsls	r6, r3, #27
  404c04:	4601      	mov	r1, r0
  404c06:	f100 8270 	bmi.w	4050ea <_vfiprintf_r+0xa4e>
  404c0a:	065d      	lsls	r5, r3, #25
  404c0c:	f140 826d 	bpl.w	4050ea <_vfiprintf_r+0xa4e>
  404c10:	3104      	adds	r1, #4
  404c12:	8806      	ldrh	r6, [r0, #0]
  404c14:	9107      	str	r1, [sp, #28]
  404c16:	2700      	movs	r7, #0
  404c18:	07d8      	lsls	r0, r3, #31
  404c1a:	f140 8222 	bpl.w	405062 <_vfiprintf_r+0x9c6>
  404c1e:	ea56 0107 	orrs.w	r1, r6, r7
  404c22:	f000 821e 	beq.w	405062 <_vfiprintf_r+0x9c6>
  404c26:	2130      	movs	r1, #48	; 0x30
  404c28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404c2c:	f043 0302 	orr.w	r3, r3, #2
  404c30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404c34:	2202      	movs	r2, #2
  404c36:	e664      	b.n	404902 <_vfiprintf_r+0x266>
  404c38:	9608      	str	r6, [sp, #32]
  404c3a:	2800      	cmp	r0, #0
  404c3c:	f040 836b 	bne.w	405316 <_vfiprintf_r+0xc7a>
  404c40:	4917      	ldr	r1, [pc, #92]	; (404ca0 <_vfiprintf_r+0x604>)
  404c42:	910b      	str	r1, [sp, #44]	; 0x2c
  404c44:	e7d9      	b.n	404bfa <_vfiprintf_r+0x55e>
  404c46:	9907      	ldr	r1, [sp, #28]
  404c48:	9608      	str	r6, [sp, #32]
  404c4a:	680a      	ldr	r2, [r1, #0]
  404c4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404c50:	f04f 0000 	mov.w	r0, #0
  404c54:	460a      	mov	r2, r1
  404c56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404c5a:	3204      	adds	r2, #4
  404c5c:	2001      	movs	r0, #1
  404c5e:	9001      	str	r0, [sp, #4]
  404c60:	9207      	str	r2, [sp, #28]
  404c62:	9005      	str	r0, [sp, #20]
  404c64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404c68:	9302      	str	r3, [sp, #8]
  404c6a:	2400      	movs	r4, #0
  404c6c:	e670      	b.n	404950 <_vfiprintf_r+0x2b4>
  404c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404c72:	f898 2000 	ldrb.w	r2, [r8]
  404c76:	e583      	b.n	404780 <_vfiprintf_r+0xe4>
  404c78:	f898 2000 	ldrb.w	r2, [r8]
  404c7c:	2a6c      	cmp	r2, #108	; 0x6c
  404c7e:	bf03      	ittte	eq
  404c80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404c84:	f043 0320 	orreq.w	r3, r3, #32
  404c88:	f108 0801 	addeq.w	r8, r8, #1
  404c8c:	f043 0310 	orrne.w	r3, r3, #16
  404c90:	e576      	b.n	404780 <_vfiprintf_r+0xe4>
  404c92:	bf00      	nop
  404c94:	00406b84 	.word	0x00406b84
  404c98:	00406b94 	.word	0x00406b94
  404c9c:	00406b68 	.word	0x00406b68
  404ca0:	00406b54 	.word	0x00406b54
  404ca4:	9907      	ldr	r1, [sp, #28]
  404ca6:	680e      	ldr	r6, [r1, #0]
  404ca8:	460a      	mov	r2, r1
  404caa:	2e00      	cmp	r6, #0
  404cac:	f102 0204 	add.w	r2, r2, #4
  404cb0:	f6ff ae0f 	blt.w	4048d2 <_vfiprintf_r+0x236>
  404cb4:	9207      	str	r2, [sp, #28]
  404cb6:	f898 2000 	ldrb.w	r2, [r8]
  404cba:	e561      	b.n	404780 <_vfiprintf_r+0xe4>
  404cbc:	f898 2000 	ldrb.w	r2, [r8]
  404cc0:	2001      	movs	r0, #1
  404cc2:	252b      	movs	r5, #43	; 0x2b
  404cc4:	e55c      	b.n	404780 <_vfiprintf_r+0xe4>
  404cc6:	9907      	ldr	r1, [sp, #28]
  404cc8:	9608      	str	r6, [sp, #32]
  404cca:	f8d1 b000 	ldr.w	fp, [r1]
  404cce:	f04f 0200 	mov.w	r2, #0
  404cd2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404cd6:	1d0e      	adds	r6, r1, #4
  404cd8:	f1bb 0f00 	cmp.w	fp, #0
  404cdc:	f000 82e5 	beq.w	4052aa <_vfiprintf_r+0xc0e>
  404ce0:	1c67      	adds	r7, r4, #1
  404ce2:	f000 82c4 	beq.w	40526e <_vfiprintf_r+0xbd2>
  404ce6:	4622      	mov	r2, r4
  404ce8:	2100      	movs	r1, #0
  404cea:	4658      	mov	r0, fp
  404cec:	9301      	str	r3, [sp, #4]
  404cee:	f001 f91f 	bl	405f30 <memchr>
  404cf2:	9b01      	ldr	r3, [sp, #4]
  404cf4:	2800      	cmp	r0, #0
  404cf6:	f000 82e5 	beq.w	4052c4 <_vfiprintf_r+0xc28>
  404cfa:	eba0 020b 	sub.w	r2, r0, fp
  404cfe:	9205      	str	r2, [sp, #20]
  404d00:	9607      	str	r6, [sp, #28]
  404d02:	9302      	str	r3, [sp, #8]
  404d04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404d08:	2400      	movs	r4, #0
  404d0a:	e619      	b.n	404940 <_vfiprintf_r+0x2a4>
  404d0c:	f898 2000 	ldrb.w	r2, [r8]
  404d10:	2a2a      	cmp	r2, #42	; 0x2a
  404d12:	f108 0701 	add.w	r7, r8, #1
  404d16:	f000 82e9 	beq.w	4052ec <_vfiprintf_r+0xc50>
  404d1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404d1e:	2909      	cmp	r1, #9
  404d20:	46b8      	mov	r8, r7
  404d22:	f04f 0400 	mov.w	r4, #0
  404d26:	f63f ad2d 	bhi.w	404784 <_vfiprintf_r+0xe8>
  404d2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  404d2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404d32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404d36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404d3a:	2909      	cmp	r1, #9
  404d3c:	d9f5      	bls.n	404d2a <_vfiprintf_r+0x68e>
  404d3e:	e521      	b.n	404784 <_vfiprintf_r+0xe8>
  404d40:	f043 0320 	orr.w	r3, r3, #32
  404d44:	f898 2000 	ldrb.w	r2, [r8]
  404d48:	e51a      	b.n	404780 <_vfiprintf_r+0xe4>
  404d4a:	9608      	str	r6, [sp, #32]
  404d4c:	2800      	cmp	r0, #0
  404d4e:	f040 82db 	bne.w	405308 <_vfiprintf_r+0xc6c>
  404d52:	2a00      	cmp	r2, #0
  404d54:	f000 80e7 	beq.w	404f26 <_vfiprintf_r+0x88a>
  404d58:	2101      	movs	r1, #1
  404d5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404d5e:	f04f 0200 	mov.w	r2, #0
  404d62:	9101      	str	r1, [sp, #4]
  404d64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404d68:	9105      	str	r1, [sp, #20]
  404d6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404d6e:	e77b      	b.n	404c68 <_vfiprintf_r+0x5cc>
  404d70:	9a07      	ldr	r2, [sp, #28]
  404d72:	6813      	ldr	r3, [r2, #0]
  404d74:	3204      	adds	r2, #4
  404d76:	9207      	str	r2, [sp, #28]
  404d78:	9a03      	ldr	r2, [sp, #12]
  404d7a:	601a      	str	r2, [r3, #0]
  404d7c:	e4cb      	b.n	404716 <_vfiprintf_r+0x7a>
  404d7e:	aa0f      	add	r2, sp, #60	; 0x3c
  404d80:	9904      	ldr	r1, [sp, #16]
  404d82:	4620      	mov	r0, r4
  404d84:	f7ff fc4a 	bl	40461c <__sprint_r.part.0>
  404d88:	2800      	cmp	r0, #0
  404d8a:	f040 8139 	bne.w	405000 <_vfiprintf_r+0x964>
  404d8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d92:	f101 0c01 	add.w	ip, r1, #1
  404d96:	46ce      	mov	lr, r9
  404d98:	e5ff      	b.n	40499a <_vfiprintf_r+0x2fe>
  404d9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d9e:	1c48      	adds	r0, r1, #1
  404da0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404da4:	2d00      	cmp	r5, #0
  404da6:	f43f ae22 	beq.w	4049ee <_vfiprintf_r+0x352>
  404daa:	3201      	adds	r2, #1
  404dac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404db0:	2101      	movs	r1, #1
  404db2:	2807      	cmp	r0, #7
  404db4:	9211      	str	r2, [sp, #68]	; 0x44
  404db6:	9010      	str	r0, [sp, #64]	; 0x40
  404db8:	f8ca 5000 	str.w	r5, [sl]
  404dbc:	f8ca 1004 	str.w	r1, [sl, #4]
  404dc0:	f340 8108 	ble.w	404fd4 <_vfiprintf_r+0x938>
  404dc4:	2a00      	cmp	r2, #0
  404dc6:	f040 81bc 	bne.w	405142 <_vfiprintf_r+0xaa6>
  404dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404dcc:	2b00      	cmp	r3, #0
  404dce:	f43f ae1f 	beq.w	404a10 <_vfiprintf_r+0x374>
  404dd2:	ab0e      	add	r3, sp, #56	; 0x38
  404dd4:	2202      	movs	r2, #2
  404dd6:	4608      	mov	r0, r1
  404dd8:	931c      	str	r3, [sp, #112]	; 0x70
  404dda:	921d      	str	r2, [sp, #116]	; 0x74
  404ddc:	46ca      	mov	sl, r9
  404dde:	4601      	mov	r1, r0
  404de0:	f10a 0a08 	add.w	sl, sl, #8
  404de4:	3001      	adds	r0, #1
  404de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404de8:	2b80      	cmp	r3, #128	; 0x80
  404dea:	f43f ae19 	beq.w	404a20 <_vfiprintf_r+0x384>
  404dee:	9b05      	ldr	r3, [sp, #20]
  404df0:	1ae4      	subs	r4, r4, r3
  404df2:	2c00      	cmp	r4, #0
  404df4:	dd2e      	ble.n	404e54 <_vfiprintf_r+0x7b8>
  404df6:	2c10      	cmp	r4, #16
  404df8:	4db3      	ldr	r5, [pc, #716]	; (4050c8 <_vfiprintf_r+0xa2c>)
  404dfa:	dd1e      	ble.n	404e3a <_vfiprintf_r+0x79e>
  404dfc:	46d6      	mov	lr, sl
  404dfe:	2610      	movs	r6, #16
  404e00:	9f06      	ldr	r7, [sp, #24]
  404e02:	f8dd a010 	ldr.w	sl, [sp, #16]
  404e06:	e006      	b.n	404e16 <_vfiprintf_r+0x77a>
  404e08:	1c88      	adds	r0, r1, #2
  404e0a:	f10e 0e08 	add.w	lr, lr, #8
  404e0e:	4619      	mov	r1, r3
  404e10:	3c10      	subs	r4, #16
  404e12:	2c10      	cmp	r4, #16
  404e14:	dd10      	ble.n	404e38 <_vfiprintf_r+0x79c>
  404e16:	1c4b      	adds	r3, r1, #1
  404e18:	3210      	adds	r2, #16
  404e1a:	2b07      	cmp	r3, #7
  404e1c:	9211      	str	r2, [sp, #68]	; 0x44
  404e1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404e22:	9310      	str	r3, [sp, #64]	; 0x40
  404e24:	ddf0      	ble.n	404e08 <_vfiprintf_r+0x76c>
  404e26:	2a00      	cmp	r2, #0
  404e28:	d165      	bne.n	404ef6 <_vfiprintf_r+0x85a>
  404e2a:	3c10      	subs	r4, #16
  404e2c:	2c10      	cmp	r4, #16
  404e2e:	f04f 0001 	mov.w	r0, #1
  404e32:	4611      	mov	r1, r2
  404e34:	46ce      	mov	lr, r9
  404e36:	dcee      	bgt.n	404e16 <_vfiprintf_r+0x77a>
  404e38:	46f2      	mov	sl, lr
  404e3a:	4422      	add	r2, r4
  404e3c:	2807      	cmp	r0, #7
  404e3e:	9211      	str	r2, [sp, #68]	; 0x44
  404e40:	f8ca 5000 	str.w	r5, [sl]
  404e44:	f8ca 4004 	str.w	r4, [sl, #4]
  404e48:	9010      	str	r0, [sp, #64]	; 0x40
  404e4a:	f300 8085 	bgt.w	404f58 <_vfiprintf_r+0x8bc>
  404e4e:	f10a 0a08 	add.w	sl, sl, #8
  404e52:	3001      	adds	r0, #1
  404e54:	9905      	ldr	r1, [sp, #20]
  404e56:	f8ca b000 	str.w	fp, [sl]
  404e5a:	440a      	add	r2, r1
  404e5c:	2807      	cmp	r0, #7
  404e5e:	9211      	str	r2, [sp, #68]	; 0x44
  404e60:	f8ca 1004 	str.w	r1, [sl, #4]
  404e64:	9010      	str	r0, [sp, #64]	; 0x40
  404e66:	f340 8082 	ble.w	404f6e <_vfiprintf_r+0x8d2>
  404e6a:	2a00      	cmp	r2, #0
  404e6c:	f040 8118 	bne.w	4050a0 <_vfiprintf_r+0xa04>
  404e70:	9b02      	ldr	r3, [sp, #8]
  404e72:	9210      	str	r2, [sp, #64]	; 0x40
  404e74:	0758      	lsls	r0, r3, #29
  404e76:	d535      	bpl.n	404ee4 <_vfiprintf_r+0x848>
  404e78:	9b08      	ldr	r3, [sp, #32]
  404e7a:	9901      	ldr	r1, [sp, #4]
  404e7c:	1a5c      	subs	r4, r3, r1
  404e7e:	2c00      	cmp	r4, #0
  404e80:	f340 80e7 	ble.w	405052 <_vfiprintf_r+0x9b6>
  404e84:	46ca      	mov	sl, r9
  404e86:	2c10      	cmp	r4, #16
  404e88:	f340 8218 	ble.w	4052bc <_vfiprintf_r+0xc20>
  404e8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404e8e:	4e8f      	ldr	r6, [pc, #572]	; (4050cc <_vfiprintf_r+0xa30>)
  404e90:	9f06      	ldr	r7, [sp, #24]
  404e92:	f8dd b010 	ldr.w	fp, [sp, #16]
  404e96:	2510      	movs	r5, #16
  404e98:	e006      	b.n	404ea8 <_vfiprintf_r+0x80c>
  404e9a:	1c88      	adds	r0, r1, #2
  404e9c:	f10a 0a08 	add.w	sl, sl, #8
  404ea0:	4619      	mov	r1, r3
  404ea2:	3c10      	subs	r4, #16
  404ea4:	2c10      	cmp	r4, #16
  404ea6:	dd11      	ble.n	404ecc <_vfiprintf_r+0x830>
  404ea8:	1c4b      	adds	r3, r1, #1
  404eaa:	3210      	adds	r2, #16
  404eac:	2b07      	cmp	r3, #7
  404eae:	9211      	str	r2, [sp, #68]	; 0x44
  404eb0:	f8ca 6000 	str.w	r6, [sl]
  404eb4:	f8ca 5004 	str.w	r5, [sl, #4]
  404eb8:	9310      	str	r3, [sp, #64]	; 0x40
  404eba:	ddee      	ble.n	404e9a <_vfiprintf_r+0x7fe>
  404ebc:	bb42      	cbnz	r2, 404f10 <_vfiprintf_r+0x874>
  404ebe:	3c10      	subs	r4, #16
  404ec0:	2c10      	cmp	r4, #16
  404ec2:	f04f 0001 	mov.w	r0, #1
  404ec6:	4611      	mov	r1, r2
  404ec8:	46ca      	mov	sl, r9
  404eca:	dced      	bgt.n	404ea8 <_vfiprintf_r+0x80c>
  404ecc:	4422      	add	r2, r4
  404ece:	2807      	cmp	r0, #7
  404ed0:	9211      	str	r2, [sp, #68]	; 0x44
  404ed2:	f8ca 6000 	str.w	r6, [sl]
  404ed6:	f8ca 4004 	str.w	r4, [sl, #4]
  404eda:	9010      	str	r0, [sp, #64]	; 0x40
  404edc:	dd51      	ble.n	404f82 <_vfiprintf_r+0x8e6>
  404ede:	2a00      	cmp	r2, #0
  404ee0:	f040 819b 	bne.w	40521a <_vfiprintf_r+0xb7e>
  404ee4:	9b03      	ldr	r3, [sp, #12]
  404ee6:	9a08      	ldr	r2, [sp, #32]
  404ee8:	9901      	ldr	r1, [sp, #4]
  404eea:	428a      	cmp	r2, r1
  404eec:	bfac      	ite	ge
  404eee:	189b      	addge	r3, r3, r2
  404ef0:	185b      	addlt	r3, r3, r1
  404ef2:	9303      	str	r3, [sp, #12]
  404ef4:	e04e      	b.n	404f94 <_vfiprintf_r+0x8f8>
  404ef6:	aa0f      	add	r2, sp, #60	; 0x3c
  404ef8:	4651      	mov	r1, sl
  404efa:	4638      	mov	r0, r7
  404efc:	f7ff fb8e 	bl	40461c <__sprint_r.part.0>
  404f00:	2800      	cmp	r0, #0
  404f02:	f040 813f 	bne.w	405184 <_vfiprintf_r+0xae8>
  404f06:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f0a:	1c48      	adds	r0, r1, #1
  404f0c:	46ce      	mov	lr, r9
  404f0e:	e77f      	b.n	404e10 <_vfiprintf_r+0x774>
  404f10:	aa0f      	add	r2, sp, #60	; 0x3c
  404f12:	4659      	mov	r1, fp
  404f14:	4638      	mov	r0, r7
  404f16:	f7ff fb81 	bl	40461c <__sprint_r.part.0>
  404f1a:	b960      	cbnz	r0, 404f36 <_vfiprintf_r+0x89a>
  404f1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f20:	1c48      	adds	r0, r1, #1
  404f22:	46ca      	mov	sl, r9
  404f24:	e7bd      	b.n	404ea2 <_vfiprintf_r+0x806>
  404f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f28:	f8dd b010 	ldr.w	fp, [sp, #16]
  404f2c:	2b00      	cmp	r3, #0
  404f2e:	f040 81d4 	bne.w	4052da <_vfiprintf_r+0xc3e>
  404f32:	2300      	movs	r3, #0
  404f34:	9310      	str	r3, [sp, #64]	; 0x40
  404f36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404f3a:	f013 0f01 	tst.w	r3, #1
  404f3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404f42:	d102      	bne.n	404f4a <_vfiprintf_r+0x8ae>
  404f44:	059a      	lsls	r2, r3, #22
  404f46:	f140 80de 	bpl.w	405106 <_vfiprintf_r+0xa6a>
  404f4a:	065b      	lsls	r3, r3, #25
  404f4c:	f53f acb2 	bmi.w	4048b4 <_vfiprintf_r+0x218>
  404f50:	9803      	ldr	r0, [sp, #12]
  404f52:	b02d      	add	sp, #180	; 0xb4
  404f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f58:	2a00      	cmp	r2, #0
  404f5a:	f040 8106 	bne.w	40516a <_vfiprintf_r+0xace>
  404f5e:	9a05      	ldr	r2, [sp, #20]
  404f60:	921d      	str	r2, [sp, #116]	; 0x74
  404f62:	2301      	movs	r3, #1
  404f64:	9211      	str	r2, [sp, #68]	; 0x44
  404f66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404f6a:	9310      	str	r3, [sp, #64]	; 0x40
  404f6c:	46ca      	mov	sl, r9
  404f6e:	f10a 0a08 	add.w	sl, sl, #8
  404f72:	9b02      	ldr	r3, [sp, #8]
  404f74:	0759      	lsls	r1, r3, #29
  404f76:	d504      	bpl.n	404f82 <_vfiprintf_r+0x8e6>
  404f78:	9b08      	ldr	r3, [sp, #32]
  404f7a:	9901      	ldr	r1, [sp, #4]
  404f7c:	1a5c      	subs	r4, r3, r1
  404f7e:	2c00      	cmp	r4, #0
  404f80:	dc81      	bgt.n	404e86 <_vfiprintf_r+0x7ea>
  404f82:	9b03      	ldr	r3, [sp, #12]
  404f84:	9908      	ldr	r1, [sp, #32]
  404f86:	9801      	ldr	r0, [sp, #4]
  404f88:	4281      	cmp	r1, r0
  404f8a:	bfac      	ite	ge
  404f8c:	185b      	addge	r3, r3, r1
  404f8e:	181b      	addlt	r3, r3, r0
  404f90:	9303      	str	r3, [sp, #12]
  404f92:	bb72      	cbnz	r2, 404ff2 <_vfiprintf_r+0x956>
  404f94:	2300      	movs	r3, #0
  404f96:	9310      	str	r3, [sp, #64]	; 0x40
  404f98:	46ca      	mov	sl, r9
  404f9a:	f7ff bbbc 	b.w	404716 <_vfiprintf_r+0x7a>
  404f9e:	aa0f      	add	r2, sp, #60	; 0x3c
  404fa0:	9904      	ldr	r1, [sp, #16]
  404fa2:	4620      	mov	r0, r4
  404fa4:	f7ff fb3a 	bl	40461c <__sprint_r.part.0>
  404fa8:	bb50      	cbnz	r0, 405000 <_vfiprintf_r+0x964>
  404faa:	9910      	ldr	r1, [sp, #64]	; 0x40
  404fac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404fae:	f101 0e01 	add.w	lr, r1, #1
  404fb2:	46cc      	mov	ip, r9
  404fb4:	e548      	b.n	404a48 <_vfiprintf_r+0x3ac>
  404fb6:	2a00      	cmp	r2, #0
  404fb8:	f040 8140 	bne.w	40523c <_vfiprintf_r+0xba0>
  404fbc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404fc0:	2900      	cmp	r1, #0
  404fc2:	f000 811b 	beq.w	4051fc <_vfiprintf_r+0xb60>
  404fc6:	2201      	movs	r2, #1
  404fc8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404fcc:	4610      	mov	r0, r2
  404fce:	921d      	str	r2, [sp, #116]	; 0x74
  404fd0:	911c      	str	r1, [sp, #112]	; 0x70
  404fd2:	46ca      	mov	sl, r9
  404fd4:	4601      	mov	r1, r0
  404fd6:	f10a 0a08 	add.w	sl, sl, #8
  404fda:	3001      	adds	r0, #1
  404fdc:	e507      	b.n	4049ee <_vfiprintf_r+0x352>
  404fde:	9b02      	ldr	r3, [sp, #8]
  404fe0:	2a01      	cmp	r2, #1
  404fe2:	f000 8098 	beq.w	405116 <_vfiprintf_r+0xa7a>
  404fe6:	2a02      	cmp	r2, #2
  404fe8:	d10d      	bne.n	405006 <_vfiprintf_r+0x96a>
  404fea:	9302      	str	r3, [sp, #8]
  404fec:	2600      	movs	r6, #0
  404fee:	2700      	movs	r7, #0
  404ff0:	e5b0      	b.n	404b54 <_vfiprintf_r+0x4b8>
  404ff2:	aa0f      	add	r2, sp, #60	; 0x3c
  404ff4:	9904      	ldr	r1, [sp, #16]
  404ff6:	9806      	ldr	r0, [sp, #24]
  404ff8:	f7ff fb10 	bl	40461c <__sprint_r.part.0>
  404ffc:	2800      	cmp	r0, #0
  404ffe:	d0c9      	beq.n	404f94 <_vfiprintf_r+0x8f8>
  405000:	f8dd b010 	ldr.w	fp, [sp, #16]
  405004:	e797      	b.n	404f36 <_vfiprintf_r+0x89a>
  405006:	9302      	str	r3, [sp, #8]
  405008:	2600      	movs	r6, #0
  40500a:	2700      	movs	r7, #0
  40500c:	4649      	mov	r1, r9
  40500e:	e000      	b.n	405012 <_vfiprintf_r+0x976>
  405010:	4659      	mov	r1, fp
  405012:	08f2      	lsrs	r2, r6, #3
  405014:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405018:	08f8      	lsrs	r0, r7, #3
  40501a:	f006 0307 	and.w	r3, r6, #7
  40501e:	4607      	mov	r7, r0
  405020:	4616      	mov	r6, r2
  405022:	3330      	adds	r3, #48	; 0x30
  405024:	ea56 0207 	orrs.w	r2, r6, r7
  405028:	f801 3c01 	strb.w	r3, [r1, #-1]
  40502c:	f101 3bff 	add.w	fp, r1, #4294967295
  405030:	d1ee      	bne.n	405010 <_vfiprintf_r+0x974>
  405032:	9a02      	ldr	r2, [sp, #8]
  405034:	07d6      	lsls	r6, r2, #31
  405036:	f57f ad9d 	bpl.w	404b74 <_vfiprintf_r+0x4d8>
  40503a:	2b30      	cmp	r3, #48	; 0x30
  40503c:	f43f ad9a 	beq.w	404b74 <_vfiprintf_r+0x4d8>
  405040:	3902      	subs	r1, #2
  405042:	2330      	movs	r3, #48	; 0x30
  405044:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405048:	eba9 0301 	sub.w	r3, r9, r1
  40504c:	9305      	str	r3, [sp, #20]
  40504e:	468b      	mov	fp, r1
  405050:	e476      	b.n	404940 <_vfiprintf_r+0x2a4>
  405052:	9b03      	ldr	r3, [sp, #12]
  405054:	9a08      	ldr	r2, [sp, #32]
  405056:	428a      	cmp	r2, r1
  405058:	bfac      	ite	ge
  40505a:	189b      	addge	r3, r3, r2
  40505c:	185b      	addlt	r3, r3, r1
  40505e:	9303      	str	r3, [sp, #12]
  405060:	e798      	b.n	404f94 <_vfiprintf_r+0x8f8>
  405062:	2202      	movs	r2, #2
  405064:	e44d      	b.n	404902 <_vfiprintf_r+0x266>
  405066:	2f00      	cmp	r7, #0
  405068:	bf08      	it	eq
  40506a:	2e0a      	cmpeq	r6, #10
  40506c:	d352      	bcc.n	405114 <_vfiprintf_r+0xa78>
  40506e:	46cb      	mov	fp, r9
  405070:	4630      	mov	r0, r6
  405072:	4639      	mov	r1, r7
  405074:	220a      	movs	r2, #10
  405076:	2300      	movs	r3, #0
  405078:	f7fe fbda 	bl	403830 <__aeabi_uldivmod>
  40507c:	3230      	adds	r2, #48	; 0x30
  40507e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405082:	4630      	mov	r0, r6
  405084:	4639      	mov	r1, r7
  405086:	2300      	movs	r3, #0
  405088:	220a      	movs	r2, #10
  40508a:	f7fe fbd1 	bl	403830 <__aeabi_uldivmod>
  40508e:	4606      	mov	r6, r0
  405090:	460f      	mov	r7, r1
  405092:	ea56 0307 	orrs.w	r3, r6, r7
  405096:	d1eb      	bne.n	405070 <_vfiprintf_r+0x9d4>
  405098:	e56c      	b.n	404b74 <_vfiprintf_r+0x4d8>
  40509a:	9405      	str	r4, [sp, #20]
  40509c:	46cb      	mov	fp, r9
  40509e:	e44f      	b.n	404940 <_vfiprintf_r+0x2a4>
  4050a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4050a2:	9904      	ldr	r1, [sp, #16]
  4050a4:	9806      	ldr	r0, [sp, #24]
  4050a6:	f7ff fab9 	bl	40461c <__sprint_r.part.0>
  4050aa:	2800      	cmp	r0, #0
  4050ac:	d1a8      	bne.n	405000 <_vfiprintf_r+0x964>
  4050ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050b0:	46ca      	mov	sl, r9
  4050b2:	e75e      	b.n	404f72 <_vfiprintf_r+0x8d6>
  4050b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4050b6:	9904      	ldr	r1, [sp, #16]
  4050b8:	9806      	ldr	r0, [sp, #24]
  4050ba:	f7ff faaf 	bl	40461c <__sprint_r.part.0>
  4050be:	2800      	cmp	r0, #0
  4050c0:	d19e      	bne.n	405000 <_vfiprintf_r+0x964>
  4050c2:	46ca      	mov	sl, r9
  4050c4:	f7ff bbc0 	b.w	404848 <_vfiprintf_r+0x1ac>
  4050c8:	00406b94 	.word	0x00406b94
  4050cc:	00406b84 	.word	0x00406b84
  4050d0:	3104      	adds	r1, #4
  4050d2:	6816      	ldr	r6, [r2, #0]
  4050d4:	9107      	str	r1, [sp, #28]
  4050d6:	2201      	movs	r2, #1
  4050d8:	2700      	movs	r7, #0
  4050da:	e412      	b.n	404902 <_vfiprintf_r+0x266>
  4050dc:	9807      	ldr	r0, [sp, #28]
  4050de:	4601      	mov	r1, r0
  4050e0:	3104      	adds	r1, #4
  4050e2:	6806      	ldr	r6, [r0, #0]
  4050e4:	9107      	str	r1, [sp, #28]
  4050e6:	2700      	movs	r7, #0
  4050e8:	e40b      	b.n	404902 <_vfiprintf_r+0x266>
  4050ea:	680e      	ldr	r6, [r1, #0]
  4050ec:	3104      	adds	r1, #4
  4050ee:	9107      	str	r1, [sp, #28]
  4050f0:	2700      	movs	r7, #0
  4050f2:	e591      	b.n	404c18 <_vfiprintf_r+0x57c>
  4050f4:	9907      	ldr	r1, [sp, #28]
  4050f6:	680e      	ldr	r6, [r1, #0]
  4050f8:	460a      	mov	r2, r1
  4050fa:	17f7      	asrs	r7, r6, #31
  4050fc:	3204      	adds	r2, #4
  4050fe:	9207      	str	r2, [sp, #28]
  405100:	4630      	mov	r0, r6
  405102:	4639      	mov	r1, r7
  405104:	e50f      	b.n	404b26 <_vfiprintf_r+0x48a>
  405106:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40510a:	f000 fe7f 	bl	405e0c <__retarget_lock_release_recursive>
  40510e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405112:	e71a      	b.n	404f4a <_vfiprintf_r+0x8ae>
  405114:	9b02      	ldr	r3, [sp, #8]
  405116:	9302      	str	r3, [sp, #8]
  405118:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40511c:	3630      	adds	r6, #48	; 0x30
  40511e:	2301      	movs	r3, #1
  405120:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405124:	9305      	str	r3, [sp, #20]
  405126:	e40b      	b.n	404940 <_vfiprintf_r+0x2a4>
  405128:	aa0f      	add	r2, sp, #60	; 0x3c
  40512a:	9904      	ldr	r1, [sp, #16]
  40512c:	9806      	ldr	r0, [sp, #24]
  40512e:	f7ff fa75 	bl	40461c <__sprint_r.part.0>
  405132:	2800      	cmp	r0, #0
  405134:	f47f af64 	bne.w	405000 <_vfiprintf_r+0x964>
  405138:	9910      	ldr	r1, [sp, #64]	; 0x40
  40513a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40513c:	1c48      	adds	r0, r1, #1
  40513e:	46ca      	mov	sl, r9
  405140:	e651      	b.n	404de6 <_vfiprintf_r+0x74a>
  405142:	aa0f      	add	r2, sp, #60	; 0x3c
  405144:	9904      	ldr	r1, [sp, #16]
  405146:	9806      	ldr	r0, [sp, #24]
  405148:	f7ff fa68 	bl	40461c <__sprint_r.part.0>
  40514c:	2800      	cmp	r0, #0
  40514e:	f47f af57 	bne.w	405000 <_vfiprintf_r+0x964>
  405152:	9910      	ldr	r1, [sp, #64]	; 0x40
  405154:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405156:	1c48      	adds	r0, r1, #1
  405158:	46ca      	mov	sl, r9
  40515a:	e448      	b.n	4049ee <_vfiprintf_r+0x352>
  40515c:	2a00      	cmp	r2, #0
  40515e:	f040 8091 	bne.w	405284 <_vfiprintf_r+0xbe8>
  405162:	2001      	movs	r0, #1
  405164:	4611      	mov	r1, r2
  405166:	46ca      	mov	sl, r9
  405168:	e641      	b.n	404dee <_vfiprintf_r+0x752>
  40516a:	aa0f      	add	r2, sp, #60	; 0x3c
  40516c:	9904      	ldr	r1, [sp, #16]
  40516e:	9806      	ldr	r0, [sp, #24]
  405170:	f7ff fa54 	bl	40461c <__sprint_r.part.0>
  405174:	2800      	cmp	r0, #0
  405176:	f47f af43 	bne.w	405000 <_vfiprintf_r+0x964>
  40517a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40517c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40517e:	3001      	adds	r0, #1
  405180:	46ca      	mov	sl, r9
  405182:	e667      	b.n	404e54 <_vfiprintf_r+0x7b8>
  405184:	46d3      	mov	fp, sl
  405186:	e6d6      	b.n	404f36 <_vfiprintf_r+0x89a>
  405188:	9e07      	ldr	r6, [sp, #28]
  40518a:	3607      	adds	r6, #7
  40518c:	f026 0207 	bic.w	r2, r6, #7
  405190:	f102 0108 	add.w	r1, r2, #8
  405194:	e9d2 6700 	ldrd	r6, r7, [r2]
  405198:	9107      	str	r1, [sp, #28]
  40519a:	2201      	movs	r2, #1
  40519c:	f7ff bbb1 	b.w	404902 <_vfiprintf_r+0x266>
  4051a0:	9e07      	ldr	r6, [sp, #28]
  4051a2:	3607      	adds	r6, #7
  4051a4:	f026 0607 	bic.w	r6, r6, #7
  4051a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4051ac:	f106 0208 	add.w	r2, r6, #8
  4051b0:	9207      	str	r2, [sp, #28]
  4051b2:	4606      	mov	r6, r0
  4051b4:	460f      	mov	r7, r1
  4051b6:	e4b6      	b.n	404b26 <_vfiprintf_r+0x48a>
  4051b8:	9e07      	ldr	r6, [sp, #28]
  4051ba:	3607      	adds	r6, #7
  4051bc:	f026 0207 	bic.w	r2, r6, #7
  4051c0:	f102 0108 	add.w	r1, r2, #8
  4051c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4051c8:	9107      	str	r1, [sp, #28]
  4051ca:	2200      	movs	r2, #0
  4051cc:	f7ff bb99 	b.w	404902 <_vfiprintf_r+0x266>
  4051d0:	9e07      	ldr	r6, [sp, #28]
  4051d2:	3607      	adds	r6, #7
  4051d4:	f026 0107 	bic.w	r1, r6, #7
  4051d8:	f101 0008 	add.w	r0, r1, #8
  4051dc:	9007      	str	r0, [sp, #28]
  4051de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4051e2:	e519      	b.n	404c18 <_vfiprintf_r+0x57c>
  4051e4:	46cb      	mov	fp, r9
  4051e6:	f7ff bbab 	b.w	404940 <_vfiprintf_r+0x2a4>
  4051ea:	252d      	movs	r5, #45	; 0x2d
  4051ec:	4276      	negs	r6, r6
  4051ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4051f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4051f6:	2201      	movs	r2, #1
  4051f8:	f7ff bb88 	b.w	40490c <_vfiprintf_r+0x270>
  4051fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4051fe:	b9b3      	cbnz	r3, 40522e <_vfiprintf_r+0xb92>
  405200:	4611      	mov	r1, r2
  405202:	2001      	movs	r0, #1
  405204:	46ca      	mov	sl, r9
  405206:	e5f2      	b.n	404dee <_vfiprintf_r+0x752>
  405208:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40520c:	f000 fdfe 	bl	405e0c <__retarget_lock_release_recursive>
  405210:	f04f 33ff 	mov.w	r3, #4294967295
  405214:	9303      	str	r3, [sp, #12]
  405216:	f7ff bb50 	b.w	4048ba <_vfiprintf_r+0x21e>
  40521a:	aa0f      	add	r2, sp, #60	; 0x3c
  40521c:	9904      	ldr	r1, [sp, #16]
  40521e:	9806      	ldr	r0, [sp, #24]
  405220:	f7ff f9fc 	bl	40461c <__sprint_r.part.0>
  405224:	2800      	cmp	r0, #0
  405226:	f47f aeeb 	bne.w	405000 <_vfiprintf_r+0x964>
  40522a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40522c:	e6a9      	b.n	404f82 <_vfiprintf_r+0x8e6>
  40522e:	ab0e      	add	r3, sp, #56	; 0x38
  405230:	2202      	movs	r2, #2
  405232:	931c      	str	r3, [sp, #112]	; 0x70
  405234:	921d      	str	r2, [sp, #116]	; 0x74
  405236:	2001      	movs	r0, #1
  405238:	46ca      	mov	sl, r9
  40523a:	e5d0      	b.n	404dde <_vfiprintf_r+0x742>
  40523c:	aa0f      	add	r2, sp, #60	; 0x3c
  40523e:	9904      	ldr	r1, [sp, #16]
  405240:	9806      	ldr	r0, [sp, #24]
  405242:	f7ff f9eb 	bl	40461c <__sprint_r.part.0>
  405246:	2800      	cmp	r0, #0
  405248:	f47f aeda 	bne.w	405000 <_vfiprintf_r+0x964>
  40524c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40524e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405250:	1c48      	adds	r0, r1, #1
  405252:	46ca      	mov	sl, r9
  405254:	e5a4      	b.n	404da0 <_vfiprintf_r+0x704>
  405256:	9a07      	ldr	r2, [sp, #28]
  405258:	9903      	ldr	r1, [sp, #12]
  40525a:	6813      	ldr	r3, [r2, #0]
  40525c:	17cd      	asrs	r5, r1, #31
  40525e:	4608      	mov	r0, r1
  405260:	3204      	adds	r2, #4
  405262:	4629      	mov	r1, r5
  405264:	9207      	str	r2, [sp, #28]
  405266:	e9c3 0100 	strd	r0, r1, [r3]
  40526a:	f7ff ba54 	b.w	404716 <_vfiprintf_r+0x7a>
  40526e:	4658      	mov	r0, fp
  405270:	9607      	str	r6, [sp, #28]
  405272:	9302      	str	r3, [sp, #8]
  405274:	f7ff f964 	bl	404540 <strlen>
  405278:	2400      	movs	r4, #0
  40527a:	9005      	str	r0, [sp, #20]
  40527c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405280:	f7ff bb5e 	b.w	404940 <_vfiprintf_r+0x2a4>
  405284:	aa0f      	add	r2, sp, #60	; 0x3c
  405286:	9904      	ldr	r1, [sp, #16]
  405288:	9806      	ldr	r0, [sp, #24]
  40528a:	f7ff f9c7 	bl	40461c <__sprint_r.part.0>
  40528e:	2800      	cmp	r0, #0
  405290:	f47f aeb6 	bne.w	405000 <_vfiprintf_r+0x964>
  405294:	9910      	ldr	r1, [sp, #64]	; 0x40
  405296:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405298:	1c48      	adds	r0, r1, #1
  40529a:	46ca      	mov	sl, r9
  40529c:	e5a7      	b.n	404dee <_vfiprintf_r+0x752>
  40529e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052a2:	4e20      	ldr	r6, [pc, #128]	; (405324 <_vfiprintf_r+0xc88>)
  4052a4:	3101      	adds	r1, #1
  4052a6:	f7ff bb90 	b.w	4049ca <_vfiprintf_r+0x32e>
  4052aa:	2c06      	cmp	r4, #6
  4052ac:	bf28      	it	cs
  4052ae:	2406      	movcs	r4, #6
  4052b0:	9405      	str	r4, [sp, #20]
  4052b2:	9607      	str	r6, [sp, #28]
  4052b4:	9401      	str	r4, [sp, #4]
  4052b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405328 <_vfiprintf_r+0xc8c>
  4052ba:	e4d5      	b.n	404c68 <_vfiprintf_r+0x5cc>
  4052bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4052be:	4e19      	ldr	r6, [pc, #100]	; (405324 <_vfiprintf_r+0xc88>)
  4052c0:	3001      	adds	r0, #1
  4052c2:	e603      	b.n	404ecc <_vfiprintf_r+0x830>
  4052c4:	9405      	str	r4, [sp, #20]
  4052c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4052ca:	9607      	str	r6, [sp, #28]
  4052cc:	9302      	str	r3, [sp, #8]
  4052ce:	4604      	mov	r4, r0
  4052d0:	f7ff bb36 	b.w	404940 <_vfiprintf_r+0x2a4>
  4052d4:	4686      	mov	lr, r0
  4052d6:	f7ff bbce 	b.w	404a76 <_vfiprintf_r+0x3da>
  4052da:	9806      	ldr	r0, [sp, #24]
  4052dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4052de:	4659      	mov	r1, fp
  4052e0:	f7ff f99c 	bl	40461c <__sprint_r.part.0>
  4052e4:	2800      	cmp	r0, #0
  4052e6:	f43f ae24 	beq.w	404f32 <_vfiprintf_r+0x896>
  4052ea:	e624      	b.n	404f36 <_vfiprintf_r+0x89a>
  4052ec:	9907      	ldr	r1, [sp, #28]
  4052ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4052f2:	680c      	ldr	r4, [r1, #0]
  4052f4:	3104      	adds	r1, #4
  4052f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4052fa:	46b8      	mov	r8, r7
  4052fc:	9107      	str	r1, [sp, #28]
  4052fe:	f7ff ba3f 	b.w	404780 <_vfiprintf_r+0xe4>
  405302:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405306:	e43c      	b.n	404b82 <_vfiprintf_r+0x4e6>
  405308:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40530c:	e521      	b.n	404d52 <_vfiprintf_r+0x6b6>
  40530e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405312:	f7ff bbf4 	b.w	404afe <_vfiprintf_r+0x462>
  405316:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40531a:	e491      	b.n	404c40 <_vfiprintf_r+0x5a4>
  40531c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405320:	e469      	b.n	404bf6 <_vfiprintf_r+0x55a>
  405322:	bf00      	nop
  405324:	00406b84 	.word	0x00406b84
  405328:	00406b7c 	.word	0x00406b7c

0040532c <__sbprintf>:
  40532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405330:	460c      	mov	r4, r1
  405332:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405336:	8989      	ldrh	r1, [r1, #12]
  405338:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40533a:	89e5      	ldrh	r5, [r4, #14]
  40533c:	9619      	str	r6, [sp, #100]	; 0x64
  40533e:	f021 0102 	bic.w	r1, r1, #2
  405342:	4606      	mov	r6, r0
  405344:	69e0      	ldr	r0, [r4, #28]
  405346:	f8ad 100c 	strh.w	r1, [sp, #12]
  40534a:	4617      	mov	r7, r2
  40534c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405350:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405352:	f8ad 500e 	strh.w	r5, [sp, #14]
  405356:	4698      	mov	r8, r3
  405358:	ad1a      	add	r5, sp, #104	; 0x68
  40535a:	2300      	movs	r3, #0
  40535c:	9007      	str	r0, [sp, #28]
  40535e:	a816      	add	r0, sp, #88	; 0x58
  405360:	9209      	str	r2, [sp, #36]	; 0x24
  405362:	9306      	str	r3, [sp, #24]
  405364:	9500      	str	r5, [sp, #0]
  405366:	9504      	str	r5, [sp, #16]
  405368:	9102      	str	r1, [sp, #8]
  40536a:	9105      	str	r1, [sp, #20]
  40536c:	f000 fd48 	bl	405e00 <__retarget_lock_init_recursive>
  405370:	4643      	mov	r3, r8
  405372:	463a      	mov	r2, r7
  405374:	4669      	mov	r1, sp
  405376:	4630      	mov	r0, r6
  405378:	f7ff f990 	bl	40469c <_vfiprintf_r>
  40537c:	1e05      	subs	r5, r0, #0
  40537e:	db07      	blt.n	405390 <__sbprintf+0x64>
  405380:	4630      	mov	r0, r6
  405382:	4669      	mov	r1, sp
  405384:	f000 f928 	bl	4055d8 <_fflush_r>
  405388:	2800      	cmp	r0, #0
  40538a:	bf18      	it	ne
  40538c:	f04f 35ff 	movne.w	r5, #4294967295
  405390:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405394:	065b      	lsls	r3, r3, #25
  405396:	d503      	bpl.n	4053a0 <__sbprintf+0x74>
  405398:	89a3      	ldrh	r3, [r4, #12]
  40539a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40539e:	81a3      	strh	r3, [r4, #12]
  4053a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4053a2:	f000 fd2f 	bl	405e04 <__retarget_lock_close_recursive>
  4053a6:	4628      	mov	r0, r5
  4053a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4053ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004053b0 <__swsetup_r>:
  4053b0:	b538      	push	{r3, r4, r5, lr}
  4053b2:	4b30      	ldr	r3, [pc, #192]	; (405474 <__swsetup_r+0xc4>)
  4053b4:	681b      	ldr	r3, [r3, #0]
  4053b6:	4605      	mov	r5, r0
  4053b8:	460c      	mov	r4, r1
  4053ba:	b113      	cbz	r3, 4053c2 <__swsetup_r+0x12>
  4053bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4053be:	2a00      	cmp	r2, #0
  4053c0:	d038      	beq.n	405434 <__swsetup_r+0x84>
  4053c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4053c6:	b293      	uxth	r3, r2
  4053c8:	0718      	lsls	r0, r3, #28
  4053ca:	d50c      	bpl.n	4053e6 <__swsetup_r+0x36>
  4053cc:	6920      	ldr	r0, [r4, #16]
  4053ce:	b1a8      	cbz	r0, 4053fc <__swsetup_r+0x4c>
  4053d0:	f013 0201 	ands.w	r2, r3, #1
  4053d4:	d01e      	beq.n	405414 <__swsetup_r+0x64>
  4053d6:	6963      	ldr	r3, [r4, #20]
  4053d8:	2200      	movs	r2, #0
  4053da:	425b      	negs	r3, r3
  4053dc:	61a3      	str	r3, [r4, #24]
  4053de:	60a2      	str	r2, [r4, #8]
  4053e0:	b1f0      	cbz	r0, 405420 <__swsetup_r+0x70>
  4053e2:	2000      	movs	r0, #0
  4053e4:	bd38      	pop	{r3, r4, r5, pc}
  4053e6:	06d9      	lsls	r1, r3, #27
  4053e8:	d53c      	bpl.n	405464 <__swsetup_r+0xb4>
  4053ea:	0758      	lsls	r0, r3, #29
  4053ec:	d426      	bmi.n	40543c <__swsetup_r+0x8c>
  4053ee:	6920      	ldr	r0, [r4, #16]
  4053f0:	f042 0308 	orr.w	r3, r2, #8
  4053f4:	81a3      	strh	r3, [r4, #12]
  4053f6:	b29b      	uxth	r3, r3
  4053f8:	2800      	cmp	r0, #0
  4053fa:	d1e9      	bne.n	4053d0 <__swsetup_r+0x20>
  4053fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405400:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405404:	d0e4      	beq.n	4053d0 <__swsetup_r+0x20>
  405406:	4628      	mov	r0, r5
  405408:	4621      	mov	r1, r4
  40540a:	f000 fd2f 	bl	405e6c <__smakebuf_r>
  40540e:	89a3      	ldrh	r3, [r4, #12]
  405410:	6920      	ldr	r0, [r4, #16]
  405412:	e7dd      	b.n	4053d0 <__swsetup_r+0x20>
  405414:	0799      	lsls	r1, r3, #30
  405416:	bf58      	it	pl
  405418:	6962      	ldrpl	r2, [r4, #20]
  40541a:	60a2      	str	r2, [r4, #8]
  40541c:	2800      	cmp	r0, #0
  40541e:	d1e0      	bne.n	4053e2 <__swsetup_r+0x32>
  405420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405424:	061a      	lsls	r2, r3, #24
  405426:	d5dd      	bpl.n	4053e4 <__swsetup_r+0x34>
  405428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40542c:	81a3      	strh	r3, [r4, #12]
  40542e:	f04f 30ff 	mov.w	r0, #4294967295
  405432:	bd38      	pop	{r3, r4, r5, pc}
  405434:	4618      	mov	r0, r3
  405436:	f000 f927 	bl	405688 <__sinit>
  40543a:	e7c2      	b.n	4053c2 <__swsetup_r+0x12>
  40543c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40543e:	b151      	cbz	r1, 405456 <__swsetup_r+0xa6>
  405440:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405444:	4299      	cmp	r1, r3
  405446:	d004      	beq.n	405452 <__swsetup_r+0xa2>
  405448:	4628      	mov	r0, r5
  40544a:	f000 fa43 	bl	4058d4 <_free_r>
  40544e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405452:	2300      	movs	r3, #0
  405454:	6323      	str	r3, [r4, #48]	; 0x30
  405456:	2300      	movs	r3, #0
  405458:	6920      	ldr	r0, [r4, #16]
  40545a:	6063      	str	r3, [r4, #4]
  40545c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405460:	6020      	str	r0, [r4, #0]
  405462:	e7c5      	b.n	4053f0 <__swsetup_r+0x40>
  405464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405468:	2309      	movs	r3, #9
  40546a:	602b      	str	r3, [r5, #0]
  40546c:	f04f 30ff 	mov.w	r0, #4294967295
  405470:	81a2      	strh	r2, [r4, #12]
  405472:	bd38      	pop	{r3, r4, r5, pc}
  405474:	20400024 	.word	0x20400024

00405478 <register_fini>:
  405478:	4b02      	ldr	r3, [pc, #8]	; (405484 <register_fini+0xc>)
  40547a:	b113      	cbz	r3, 405482 <register_fini+0xa>
  40547c:	4802      	ldr	r0, [pc, #8]	; (405488 <register_fini+0x10>)
  40547e:	f000 b805 	b.w	40548c <atexit>
  405482:	4770      	bx	lr
  405484:	00000000 	.word	0x00000000
  405488:	004056f9 	.word	0x004056f9

0040548c <atexit>:
  40548c:	2300      	movs	r3, #0
  40548e:	4601      	mov	r1, r0
  405490:	461a      	mov	r2, r3
  405492:	4618      	mov	r0, r3
  405494:	f001 b890 	b.w	4065b8 <__register_exitproc>

00405498 <__sflush_r>:
  405498:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40549c:	b29a      	uxth	r2, r3
  40549e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054a2:	460d      	mov	r5, r1
  4054a4:	0711      	lsls	r1, r2, #28
  4054a6:	4680      	mov	r8, r0
  4054a8:	d43a      	bmi.n	405520 <__sflush_r+0x88>
  4054aa:	686a      	ldr	r2, [r5, #4]
  4054ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4054b0:	2a00      	cmp	r2, #0
  4054b2:	81ab      	strh	r3, [r5, #12]
  4054b4:	dd6f      	ble.n	405596 <__sflush_r+0xfe>
  4054b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4054b8:	2c00      	cmp	r4, #0
  4054ba:	d049      	beq.n	405550 <__sflush_r+0xb8>
  4054bc:	2200      	movs	r2, #0
  4054be:	b29b      	uxth	r3, r3
  4054c0:	f8d8 6000 	ldr.w	r6, [r8]
  4054c4:	f8c8 2000 	str.w	r2, [r8]
  4054c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4054cc:	d067      	beq.n	40559e <__sflush_r+0x106>
  4054ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4054d0:	075f      	lsls	r7, r3, #29
  4054d2:	d505      	bpl.n	4054e0 <__sflush_r+0x48>
  4054d4:	6869      	ldr	r1, [r5, #4]
  4054d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4054d8:	1a52      	subs	r2, r2, r1
  4054da:	b10b      	cbz	r3, 4054e0 <__sflush_r+0x48>
  4054dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4054de:	1ad2      	subs	r2, r2, r3
  4054e0:	2300      	movs	r3, #0
  4054e2:	69e9      	ldr	r1, [r5, #28]
  4054e4:	4640      	mov	r0, r8
  4054e6:	47a0      	blx	r4
  4054e8:	1c44      	adds	r4, r0, #1
  4054ea:	d03c      	beq.n	405566 <__sflush_r+0xce>
  4054ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4054f0:	692a      	ldr	r2, [r5, #16]
  4054f2:	602a      	str	r2, [r5, #0]
  4054f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4054f8:	2200      	movs	r2, #0
  4054fa:	81ab      	strh	r3, [r5, #12]
  4054fc:	04db      	lsls	r3, r3, #19
  4054fe:	606a      	str	r2, [r5, #4]
  405500:	d447      	bmi.n	405592 <__sflush_r+0xfa>
  405502:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405504:	f8c8 6000 	str.w	r6, [r8]
  405508:	b311      	cbz	r1, 405550 <__sflush_r+0xb8>
  40550a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40550e:	4299      	cmp	r1, r3
  405510:	d002      	beq.n	405518 <__sflush_r+0x80>
  405512:	4640      	mov	r0, r8
  405514:	f000 f9de 	bl	4058d4 <_free_r>
  405518:	2000      	movs	r0, #0
  40551a:	6328      	str	r0, [r5, #48]	; 0x30
  40551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405520:	692e      	ldr	r6, [r5, #16]
  405522:	b1ae      	cbz	r6, 405550 <__sflush_r+0xb8>
  405524:	682c      	ldr	r4, [r5, #0]
  405526:	602e      	str	r6, [r5, #0]
  405528:	0791      	lsls	r1, r2, #30
  40552a:	bf0c      	ite	eq
  40552c:	696b      	ldreq	r3, [r5, #20]
  40552e:	2300      	movne	r3, #0
  405530:	1ba4      	subs	r4, r4, r6
  405532:	60ab      	str	r3, [r5, #8]
  405534:	e00a      	b.n	40554c <__sflush_r+0xb4>
  405536:	4623      	mov	r3, r4
  405538:	4632      	mov	r2, r6
  40553a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40553c:	69e9      	ldr	r1, [r5, #28]
  40553e:	4640      	mov	r0, r8
  405540:	47b8      	blx	r7
  405542:	2800      	cmp	r0, #0
  405544:	eba4 0400 	sub.w	r4, r4, r0
  405548:	4406      	add	r6, r0
  40554a:	dd04      	ble.n	405556 <__sflush_r+0xbe>
  40554c:	2c00      	cmp	r4, #0
  40554e:	dcf2      	bgt.n	405536 <__sflush_r+0x9e>
  405550:	2000      	movs	r0, #0
  405552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405556:	89ab      	ldrh	r3, [r5, #12]
  405558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40555c:	81ab      	strh	r3, [r5, #12]
  40555e:	f04f 30ff 	mov.w	r0, #4294967295
  405562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405566:	f8d8 4000 	ldr.w	r4, [r8]
  40556a:	2c1d      	cmp	r4, #29
  40556c:	d8f3      	bhi.n	405556 <__sflush_r+0xbe>
  40556e:	4b19      	ldr	r3, [pc, #100]	; (4055d4 <__sflush_r+0x13c>)
  405570:	40e3      	lsrs	r3, r4
  405572:	43db      	mvns	r3, r3
  405574:	f013 0301 	ands.w	r3, r3, #1
  405578:	d1ed      	bne.n	405556 <__sflush_r+0xbe>
  40557a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40557e:	606b      	str	r3, [r5, #4]
  405580:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405584:	6929      	ldr	r1, [r5, #16]
  405586:	81ab      	strh	r3, [r5, #12]
  405588:	04da      	lsls	r2, r3, #19
  40558a:	6029      	str	r1, [r5, #0]
  40558c:	d5b9      	bpl.n	405502 <__sflush_r+0x6a>
  40558e:	2c00      	cmp	r4, #0
  405590:	d1b7      	bne.n	405502 <__sflush_r+0x6a>
  405592:	6528      	str	r0, [r5, #80]	; 0x50
  405594:	e7b5      	b.n	405502 <__sflush_r+0x6a>
  405596:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405598:	2a00      	cmp	r2, #0
  40559a:	dc8c      	bgt.n	4054b6 <__sflush_r+0x1e>
  40559c:	e7d8      	b.n	405550 <__sflush_r+0xb8>
  40559e:	2301      	movs	r3, #1
  4055a0:	69e9      	ldr	r1, [r5, #28]
  4055a2:	4640      	mov	r0, r8
  4055a4:	47a0      	blx	r4
  4055a6:	1c43      	adds	r3, r0, #1
  4055a8:	4602      	mov	r2, r0
  4055aa:	d002      	beq.n	4055b2 <__sflush_r+0x11a>
  4055ac:	89ab      	ldrh	r3, [r5, #12]
  4055ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4055b0:	e78e      	b.n	4054d0 <__sflush_r+0x38>
  4055b2:	f8d8 3000 	ldr.w	r3, [r8]
  4055b6:	2b00      	cmp	r3, #0
  4055b8:	d0f8      	beq.n	4055ac <__sflush_r+0x114>
  4055ba:	2b1d      	cmp	r3, #29
  4055bc:	d001      	beq.n	4055c2 <__sflush_r+0x12a>
  4055be:	2b16      	cmp	r3, #22
  4055c0:	d102      	bne.n	4055c8 <__sflush_r+0x130>
  4055c2:	f8c8 6000 	str.w	r6, [r8]
  4055c6:	e7c3      	b.n	405550 <__sflush_r+0xb8>
  4055c8:	89ab      	ldrh	r3, [r5, #12]
  4055ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055ce:	81ab      	strh	r3, [r5, #12]
  4055d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4055d4:	20400001 	.word	0x20400001

004055d8 <_fflush_r>:
  4055d8:	b538      	push	{r3, r4, r5, lr}
  4055da:	460d      	mov	r5, r1
  4055dc:	4604      	mov	r4, r0
  4055de:	b108      	cbz	r0, 4055e4 <_fflush_r+0xc>
  4055e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4055e2:	b1bb      	cbz	r3, 405614 <_fflush_r+0x3c>
  4055e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4055e8:	b188      	cbz	r0, 40560e <_fflush_r+0x36>
  4055ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4055ec:	07db      	lsls	r3, r3, #31
  4055ee:	d401      	bmi.n	4055f4 <_fflush_r+0x1c>
  4055f0:	0581      	lsls	r1, r0, #22
  4055f2:	d517      	bpl.n	405624 <_fflush_r+0x4c>
  4055f4:	4620      	mov	r0, r4
  4055f6:	4629      	mov	r1, r5
  4055f8:	f7ff ff4e 	bl	405498 <__sflush_r>
  4055fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4055fe:	07da      	lsls	r2, r3, #31
  405600:	4604      	mov	r4, r0
  405602:	d402      	bmi.n	40560a <_fflush_r+0x32>
  405604:	89ab      	ldrh	r3, [r5, #12]
  405606:	059b      	lsls	r3, r3, #22
  405608:	d507      	bpl.n	40561a <_fflush_r+0x42>
  40560a:	4620      	mov	r0, r4
  40560c:	bd38      	pop	{r3, r4, r5, pc}
  40560e:	4604      	mov	r4, r0
  405610:	4620      	mov	r0, r4
  405612:	bd38      	pop	{r3, r4, r5, pc}
  405614:	f000 f838 	bl	405688 <__sinit>
  405618:	e7e4      	b.n	4055e4 <_fflush_r+0xc>
  40561a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40561c:	f000 fbf6 	bl	405e0c <__retarget_lock_release_recursive>
  405620:	4620      	mov	r0, r4
  405622:	bd38      	pop	{r3, r4, r5, pc}
  405624:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405626:	f000 fbef 	bl	405e08 <__retarget_lock_acquire_recursive>
  40562a:	e7e3      	b.n	4055f4 <_fflush_r+0x1c>

0040562c <_cleanup_r>:
  40562c:	4901      	ldr	r1, [pc, #4]	; (405634 <_cleanup_r+0x8>)
  40562e:	f000 bbaf 	b.w	405d90 <_fwalk_reent>
  405632:	bf00      	nop
  405634:	004066a1 	.word	0x004066a1

00405638 <std.isra.0>:
  405638:	b510      	push	{r4, lr}
  40563a:	2300      	movs	r3, #0
  40563c:	4604      	mov	r4, r0
  40563e:	8181      	strh	r1, [r0, #12]
  405640:	81c2      	strh	r2, [r0, #14]
  405642:	6003      	str	r3, [r0, #0]
  405644:	6043      	str	r3, [r0, #4]
  405646:	6083      	str	r3, [r0, #8]
  405648:	6643      	str	r3, [r0, #100]	; 0x64
  40564a:	6103      	str	r3, [r0, #16]
  40564c:	6143      	str	r3, [r0, #20]
  40564e:	6183      	str	r3, [r0, #24]
  405650:	4619      	mov	r1, r3
  405652:	2208      	movs	r2, #8
  405654:	305c      	adds	r0, #92	; 0x5c
  405656:	f7fe fe09 	bl	40426c <memset>
  40565a:	4807      	ldr	r0, [pc, #28]	; (405678 <std.isra.0+0x40>)
  40565c:	4907      	ldr	r1, [pc, #28]	; (40567c <std.isra.0+0x44>)
  40565e:	4a08      	ldr	r2, [pc, #32]	; (405680 <std.isra.0+0x48>)
  405660:	4b08      	ldr	r3, [pc, #32]	; (405684 <std.isra.0+0x4c>)
  405662:	6220      	str	r0, [r4, #32]
  405664:	61e4      	str	r4, [r4, #28]
  405666:	6261      	str	r1, [r4, #36]	; 0x24
  405668:	62a2      	str	r2, [r4, #40]	; 0x28
  40566a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40566c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405674:	f000 bbc4 	b.w	405e00 <__retarget_lock_init_recursive>
  405678:	004063e5 	.word	0x004063e5
  40567c:	00406409 	.word	0x00406409
  405680:	00406445 	.word	0x00406445
  405684:	00406465 	.word	0x00406465

00405688 <__sinit>:
  405688:	b510      	push	{r4, lr}
  40568a:	4604      	mov	r4, r0
  40568c:	4812      	ldr	r0, [pc, #72]	; (4056d8 <__sinit+0x50>)
  40568e:	f000 fbbb 	bl	405e08 <__retarget_lock_acquire_recursive>
  405692:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405694:	b9d2      	cbnz	r2, 4056cc <__sinit+0x44>
  405696:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40569a:	4810      	ldr	r0, [pc, #64]	; (4056dc <__sinit+0x54>)
  40569c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4056a0:	2103      	movs	r1, #3
  4056a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4056a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4056a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4056ac:	6860      	ldr	r0, [r4, #4]
  4056ae:	2104      	movs	r1, #4
  4056b0:	f7ff ffc2 	bl	405638 <std.isra.0>
  4056b4:	2201      	movs	r2, #1
  4056b6:	2109      	movs	r1, #9
  4056b8:	68a0      	ldr	r0, [r4, #8]
  4056ba:	f7ff ffbd 	bl	405638 <std.isra.0>
  4056be:	2202      	movs	r2, #2
  4056c0:	2112      	movs	r1, #18
  4056c2:	68e0      	ldr	r0, [r4, #12]
  4056c4:	f7ff ffb8 	bl	405638 <std.isra.0>
  4056c8:	2301      	movs	r3, #1
  4056ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4056cc:	4802      	ldr	r0, [pc, #8]	; (4056d8 <__sinit+0x50>)
  4056ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4056d2:	f000 bb9b 	b.w	405e0c <__retarget_lock_release_recursive>
  4056d6:	bf00      	nop
  4056d8:	20400e3c 	.word	0x20400e3c
  4056dc:	0040562d 	.word	0x0040562d

004056e0 <__sfp_lock_acquire>:
  4056e0:	4801      	ldr	r0, [pc, #4]	; (4056e8 <__sfp_lock_acquire+0x8>)
  4056e2:	f000 bb91 	b.w	405e08 <__retarget_lock_acquire_recursive>
  4056e6:	bf00      	nop
  4056e8:	20400e50 	.word	0x20400e50

004056ec <__sfp_lock_release>:
  4056ec:	4801      	ldr	r0, [pc, #4]	; (4056f4 <__sfp_lock_release+0x8>)
  4056ee:	f000 bb8d 	b.w	405e0c <__retarget_lock_release_recursive>
  4056f2:	bf00      	nop
  4056f4:	20400e50 	.word	0x20400e50

004056f8 <__libc_fini_array>:
  4056f8:	b538      	push	{r3, r4, r5, lr}
  4056fa:	4c0a      	ldr	r4, [pc, #40]	; (405724 <__libc_fini_array+0x2c>)
  4056fc:	4d0a      	ldr	r5, [pc, #40]	; (405728 <__libc_fini_array+0x30>)
  4056fe:	1b64      	subs	r4, r4, r5
  405700:	10a4      	asrs	r4, r4, #2
  405702:	d00a      	beq.n	40571a <__libc_fini_array+0x22>
  405704:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405708:	3b01      	subs	r3, #1
  40570a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40570e:	3c01      	subs	r4, #1
  405710:	f855 3904 	ldr.w	r3, [r5], #-4
  405714:	4798      	blx	r3
  405716:	2c00      	cmp	r4, #0
  405718:	d1f9      	bne.n	40570e <__libc_fini_array+0x16>
  40571a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40571e:	f001 bad5 	b.w	406ccc <_fini>
  405722:	bf00      	nop
  405724:	00406cdc 	.word	0x00406cdc
  405728:	00406cd8 	.word	0x00406cd8

0040572c <__fputwc>:
  40572c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405730:	b082      	sub	sp, #8
  405732:	4680      	mov	r8, r0
  405734:	4689      	mov	r9, r1
  405736:	4614      	mov	r4, r2
  405738:	f000 fb54 	bl	405de4 <__locale_mb_cur_max>
  40573c:	2801      	cmp	r0, #1
  40573e:	d036      	beq.n	4057ae <__fputwc+0x82>
  405740:	464a      	mov	r2, r9
  405742:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405746:	a901      	add	r1, sp, #4
  405748:	4640      	mov	r0, r8
  40574a:	f000 fee7 	bl	40651c <_wcrtomb_r>
  40574e:	1c42      	adds	r2, r0, #1
  405750:	4606      	mov	r6, r0
  405752:	d025      	beq.n	4057a0 <__fputwc+0x74>
  405754:	b3a8      	cbz	r0, 4057c2 <__fputwc+0x96>
  405756:	f89d e004 	ldrb.w	lr, [sp, #4]
  40575a:	2500      	movs	r5, #0
  40575c:	f10d 0a04 	add.w	sl, sp, #4
  405760:	e009      	b.n	405776 <__fputwc+0x4a>
  405762:	6823      	ldr	r3, [r4, #0]
  405764:	1c5a      	adds	r2, r3, #1
  405766:	6022      	str	r2, [r4, #0]
  405768:	f883 e000 	strb.w	lr, [r3]
  40576c:	3501      	adds	r5, #1
  40576e:	42b5      	cmp	r5, r6
  405770:	d227      	bcs.n	4057c2 <__fputwc+0x96>
  405772:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405776:	68a3      	ldr	r3, [r4, #8]
  405778:	3b01      	subs	r3, #1
  40577a:	2b00      	cmp	r3, #0
  40577c:	60a3      	str	r3, [r4, #8]
  40577e:	daf0      	bge.n	405762 <__fputwc+0x36>
  405780:	69a7      	ldr	r7, [r4, #24]
  405782:	42bb      	cmp	r3, r7
  405784:	4671      	mov	r1, lr
  405786:	4622      	mov	r2, r4
  405788:	4640      	mov	r0, r8
  40578a:	db02      	blt.n	405792 <__fputwc+0x66>
  40578c:	f1be 0f0a 	cmp.w	lr, #10
  405790:	d1e7      	bne.n	405762 <__fputwc+0x36>
  405792:	f000 fe6b 	bl	40646c <__swbuf_r>
  405796:	1c43      	adds	r3, r0, #1
  405798:	d1e8      	bne.n	40576c <__fputwc+0x40>
  40579a:	b002      	add	sp, #8
  40579c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4057a0:	89a3      	ldrh	r3, [r4, #12]
  4057a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4057a6:	81a3      	strh	r3, [r4, #12]
  4057a8:	b002      	add	sp, #8
  4057aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4057ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4057b2:	2bfe      	cmp	r3, #254	; 0xfe
  4057b4:	d8c4      	bhi.n	405740 <__fputwc+0x14>
  4057b6:	fa5f fe89 	uxtb.w	lr, r9
  4057ba:	4606      	mov	r6, r0
  4057bc:	f88d e004 	strb.w	lr, [sp, #4]
  4057c0:	e7cb      	b.n	40575a <__fputwc+0x2e>
  4057c2:	4648      	mov	r0, r9
  4057c4:	b002      	add	sp, #8
  4057c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4057ca:	bf00      	nop

004057cc <_fputwc_r>:
  4057cc:	b530      	push	{r4, r5, lr}
  4057ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4057d0:	f013 0f01 	tst.w	r3, #1
  4057d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4057d8:	4614      	mov	r4, r2
  4057da:	b083      	sub	sp, #12
  4057dc:	4605      	mov	r5, r0
  4057de:	b29a      	uxth	r2, r3
  4057e0:	d101      	bne.n	4057e6 <_fputwc_r+0x1a>
  4057e2:	0590      	lsls	r0, r2, #22
  4057e4:	d51c      	bpl.n	405820 <_fputwc_r+0x54>
  4057e6:	0490      	lsls	r0, r2, #18
  4057e8:	d406      	bmi.n	4057f8 <_fputwc_r+0x2c>
  4057ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4057ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4057f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4057f4:	81a3      	strh	r3, [r4, #12]
  4057f6:	6662      	str	r2, [r4, #100]	; 0x64
  4057f8:	4628      	mov	r0, r5
  4057fa:	4622      	mov	r2, r4
  4057fc:	f7ff ff96 	bl	40572c <__fputwc>
  405800:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405802:	07da      	lsls	r2, r3, #31
  405804:	4605      	mov	r5, r0
  405806:	d402      	bmi.n	40580e <_fputwc_r+0x42>
  405808:	89a3      	ldrh	r3, [r4, #12]
  40580a:	059b      	lsls	r3, r3, #22
  40580c:	d502      	bpl.n	405814 <_fputwc_r+0x48>
  40580e:	4628      	mov	r0, r5
  405810:	b003      	add	sp, #12
  405812:	bd30      	pop	{r4, r5, pc}
  405814:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405816:	f000 faf9 	bl	405e0c <__retarget_lock_release_recursive>
  40581a:	4628      	mov	r0, r5
  40581c:	b003      	add	sp, #12
  40581e:	bd30      	pop	{r4, r5, pc}
  405820:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405822:	9101      	str	r1, [sp, #4]
  405824:	f000 faf0 	bl	405e08 <__retarget_lock_acquire_recursive>
  405828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40582c:	9901      	ldr	r1, [sp, #4]
  40582e:	b29a      	uxth	r2, r3
  405830:	e7d9      	b.n	4057e6 <_fputwc_r+0x1a>
  405832:	bf00      	nop

00405834 <_malloc_trim_r>:
  405834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405836:	4f24      	ldr	r7, [pc, #144]	; (4058c8 <_malloc_trim_r+0x94>)
  405838:	460c      	mov	r4, r1
  40583a:	4606      	mov	r6, r0
  40583c:	f7fe fd64 	bl	404308 <__malloc_lock>
  405840:	68bb      	ldr	r3, [r7, #8]
  405842:	685d      	ldr	r5, [r3, #4]
  405844:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405848:	310f      	adds	r1, #15
  40584a:	f025 0503 	bic.w	r5, r5, #3
  40584e:	4429      	add	r1, r5
  405850:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405854:	f021 010f 	bic.w	r1, r1, #15
  405858:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40585c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405860:	db07      	blt.n	405872 <_malloc_trim_r+0x3e>
  405862:	2100      	movs	r1, #0
  405864:	4630      	mov	r0, r6
  405866:	f7fe fd7b 	bl	404360 <_sbrk_r>
  40586a:	68bb      	ldr	r3, [r7, #8]
  40586c:	442b      	add	r3, r5
  40586e:	4298      	cmp	r0, r3
  405870:	d004      	beq.n	40587c <_malloc_trim_r+0x48>
  405872:	4630      	mov	r0, r6
  405874:	f7fe fd4e 	bl	404314 <__malloc_unlock>
  405878:	2000      	movs	r0, #0
  40587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40587c:	4261      	negs	r1, r4
  40587e:	4630      	mov	r0, r6
  405880:	f7fe fd6e 	bl	404360 <_sbrk_r>
  405884:	3001      	adds	r0, #1
  405886:	d00d      	beq.n	4058a4 <_malloc_trim_r+0x70>
  405888:	4b10      	ldr	r3, [pc, #64]	; (4058cc <_malloc_trim_r+0x98>)
  40588a:	68ba      	ldr	r2, [r7, #8]
  40588c:	6819      	ldr	r1, [r3, #0]
  40588e:	1b2d      	subs	r5, r5, r4
  405890:	f045 0501 	orr.w	r5, r5, #1
  405894:	4630      	mov	r0, r6
  405896:	1b09      	subs	r1, r1, r4
  405898:	6055      	str	r5, [r2, #4]
  40589a:	6019      	str	r1, [r3, #0]
  40589c:	f7fe fd3a 	bl	404314 <__malloc_unlock>
  4058a0:	2001      	movs	r0, #1
  4058a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4058a4:	2100      	movs	r1, #0
  4058a6:	4630      	mov	r0, r6
  4058a8:	f7fe fd5a 	bl	404360 <_sbrk_r>
  4058ac:	68ba      	ldr	r2, [r7, #8]
  4058ae:	1a83      	subs	r3, r0, r2
  4058b0:	2b0f      	cmp	r3, #15
  4058b2:	ddde      	ble.n	405872 <_malloc_trim_r+0x3e>
  4058b4:	4c06      	ldr	r4, [pc, #24]	; (4058d0 <_malloc_trim_r+0x9c>)
  4058b6:	4905      	ldr	r1, [pc, #20]	; (4058cc <_malloc_trim_r+0x98>)
  4058b8:	6824      	ldr	r4, [r4, #0]
  4058ba:	f043 0301 	orr.w	r3, r3, #1
  4058be:	1b00      	subs	r0, r0, r4
  4058c0:	6053      	str	r3, [r2, #4]
  4058c2:	6008      	str	r0, [r1, #0]
  4058c4:	e7d5      	b.n	405872 <_malloc_trim_r+0x3e>
  4058c6:	bf00      	nop
  4058c8:	20400450 	.word	0x20400450
  4058cc:	20400dac 	.word	0x20400dac
  4058d0:	20400858 	.word	0x20400858

004058d4 <_free_r>:
  4058d4:	2900      	cmp	r1, #0
  4058d6:	d044      	beq.n	405962 <_free_r+0x8e>
  4058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058dc:	460d      	mov	r5, r1
  4058de:	4680      	mov	r8, r0
  4058e0:	f7fe fd12 	bl	404308 <__malloc_lock>
  4058e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4058e8:	4969      	ldr	r1, [pc, #420]	; (405a90 <_free_r+0x1bc>)
  4058ea:	f027 0301 	bic.w	r3, r7, #1
  4058ee:	f1a5 0408 	sub.w	r4, r5, #8
  4058f2:	18e2      	adds	r2, r4, r3
  4058f4:	688e      	ldr	r6, [r1, #8]
  4058f6:	6850      	ldr	r0, [r2, #4]
  4058f8:	42b2      	cmp	r2, r6
  4058fa:	f020 0003 	bic.w	r0, r0, #3
  4058fe:	d05e      	beq.n	4059be <_free_r+0xea>
  405900:	07fe      	lsls	r6, r7, #31
  405902:	6050      	str	r0, [r2, #4]
  405904:	d40b      	bmi.n	40591e <_free_r+0x4a>
  405906:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40590a:	1be4      	subs	r4, r4, r7
  40590c:	f101 0e08 	add.w	lr, r1, #8
  405910:	68a5      	ldr	r5, [r4, #8]
  405912:	4575      	cmp	r5, lr
  405914:	443b      	add	r3, r7
  405916:	d06d      	beq.n	4059f4 <_free_r+0x120>
  405918:	68e7      	ldr	r7, [r4, #12]
  40591a:	60ef      	str	r7, [r5, #12]
  40591c:	60bd      	str	r5, [r7, #8]
  40591e:	1815      	adds	r5, r2, r0
  405920:	686d      	ldr	r5, [r5, #4]
  405922:	07ed      	lsls	r5, r5, #31
  405924:	d53e      	bpl.n	4059a4 <_free_r+0xd0>
  405926:	f043 0201 	orr.w	r2, r3, #1
  40592a:	6062      	str	r2, [r4, #4]
  40592c:	50e3      	str	r3, [r4, r3]
  40592e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405932:	d217      	bcs.n	405964 <_free_r+0x90>
  405934:	08db      	lsrs	r3, r3, #3
  405936:	1c58      	adds	r0, r3, #1
  405938:	109a      	asrs	r2, r3, #2
  40593a:	684d      	ldr	r5, [r1, #4]
  40593c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405940:	60a7      	str	r7, [r4, #8]
  405942:	2301      	movs	r3, #1
  405944:	4093      	lsls	r3, r2
  405946:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40594a:	432b      	orrs	r3, r5
  40594c:	3a08      	subs	r2, #8
  40594e:	60e2      	str	r2, [r4, #12]
  405950:	604b      	str	r3, [r1, #4]
  405952:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405956:	60fc      	str	r4, [r7, #12]
  405958:	4640      	mov	r0, r8
  40595a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40595e:	f7fe bcd9 	b.w	404314 <__malloc_unlock>
  405962:	4770      	bx	lr
  405964:	0a5a      	lsrs	r2, r3, #9
  405966:	2a04      	cmp	r2, #4
  405968:	d852      	bhi.n	405a10 <_free_r+0x13c>
  40596a:	099a      	lsrs	r2, r3, #6
  40596c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405970:	00ff      	lsls	r7, r7, #3
  405972:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405976:	19c8      	adds	r0, r1, r7
  405978:	59ca      	ldr	r2, [r1, r7]
  40597a:	3808      	subs	r0, #8
  40597c:	4290      	cmp	r0, r2
  40597e:	d04f      	beq.n	405a20 <_free_r+0x14c>
  405980:	6851      	ldr	r1, [r2, #4]
  405982:	f021 0103 	bic.w	r1, r1, #3
  405986:	428b      	cmp	r3, r1
  405988:	d232      	bcs.n	4059f0 <_free_r+0x11c>
  40598a:	6892      	ldr	r2, [r2, #8]
  40598c:	4290      	cmp	r0, r2
  40598e:	d1f7      	bne.n	405980 <_free_r+0xac>
  405990:	68c3      	ldr	r3, [r0, #12]
  405992:	60a0      	str	r0, [r4, #8]
  405994:	60e3      	str	r3, [r4, #12]
  405996:	609c      	str	r4, [r3, #8]
  405998:	60c4      	str	r4, [r0, #12]
  40599a:	4640      	mov	r0, r8
  40599c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4059a0:	f7fe bcb8 	b.w	404314 <__malloc_unlock>
  4059a4:	6895      	ldr	r5, [r2, #8]
  4059a6:	4f3b      	ldr	r7, [pc, #236]	; (405a94 <_free_r+0x1c0>)
  4059a8:	42bd      	cmp	r5, r7
  4059aa:	4403      	add	r3, r0
  4059ac:	d040      	beq.n	405a30 <_free_r+0x15c>
  4059ae:	68d0      	ldr	r0, [r2, #12]
  4059b0:	60e8      	str	r0, [r5, #12]
  4059b2:	f043 0201 	orr.w	r2, r3, #1
  4059b6:	6085      	str	r5, [r0, #8]
  4059b8:	6062      	str	r2, [r4, #4]
  4059ba:	50e3      	str	r3, [r4, r3]
  4059bc:	e7b7      	b.n	40592e <_free_r+0x5a>
  4059be:	07ff      	lsls	r7, r7, #31
  4059c0:	4403      	add	r3, r0
  4059c2:	d407      	bmi.n	4059d4 <_free_r+0x100>
  4059c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4059c8:	1aa4      	subs	r4, r4, r2
  4059ca:	4413      	add	r3, r2
  4059cc:	68a0      	ldr	r0, [r4, #8]
  4059ce:	68e2      	ldr	r2, [r4, #12]
  4059d0:	60c2      	str	r2, [r0, #12]
  4059d2:	6090      	str	r0, [r2, #8]
  4059d4:	4a30      	ldr	r2, [pc, #192]	; (405a98 <_free_r+0x1c4>)
  4059d6:	6812      	ldr	r2, [r2, #0]
  4059d8:	f043 0001 	orr.w	r0, r3, #1
  4059dc:	4293      	cmp	r3, r2
  4059de:	6060      	str	r0, [r4, #4]
  4059e0:	608c      	str	r4, [r1, #8]
  4059e2:	d3b9      	bcc.n	405958 <_free_r+0x84>
  4059e4:	4b2d      	ldr	r3, [pc, #180]	; (405a9c <_free_r+0x1c8>)
  4059e6:	4640      	mov	r0, r8
  4059e8:	6819      	ldr	r1, [r3, #0]
  4059ea:	f7ff ff23 	bl	405834 <_malloc_trim_r>
  4059ee:	e7b3      	b.n	405958 <_free_r+0x84>
  4059f0:	4610      	mov	r0, r2
  4059f2:	e7cd      	b.n	405990 <_free_r+0xbc>
  4059f4:	1811      	adds	r1, r2, r0
  4059f6:	6849      	ldr	r1, [r1, #4]
  4059f8:	07c9      	lsls	r1, r1, #31
  4059fa:	d444      	bmi.n	405a86 <_free_r+0x1b2>
  4059fc:	6891      	ldr	r1, [r2, #8]
  4059fe:	68d2      	ldr	r2, [r2, #12]
  405a00:	60ca      	str	r2, [r1, #12]
  405a02:	4403      	add	r3, r0
  405a04:	f043 0001 	orr.w	r0, r3, #1
  405a08:	6091      	str	r1, [r2, #8]
  405a0a:	6060      	str	r0, [r4, #4]
  405a0c:	50e3      	str	r3, [r4, r3]
  405a0e:	e7a3      	b.n	405958 <_free_r+0x84>
  405a10:	2a14      	cmp	r2, #20
  405a12:	d816      	bhi.n	405a42 <_free_r+0x16e>
  405a14:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405a18:	00ff      	lsls	r7, r7, #3
  405a1a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405a1e:	e7aa      	b.n	405976 <_free_r+0xa2>
  405a20:	10aa      	asrs	r2, r5, #2
  405a22:	2301      	movs	r3, #1
  405a24:	684d      	ldr	r5, [r1, #4]
  405a26:	4093      	lsls	r3, r2
  405a28:	432b      	orrs	r3, r5
  405a2a:	604b      	str	r3, [r1, #4]
  405a2c:	4603      	mov	r3, r0
  405a2e:	e7b0      	b.n	405992 <_free_r+0xbe>
  405a30:	f043 0201 	orr.w	r2, r3, #1
  405a34:	614c      	str	r4, [r1, #20]
  405a36:	610c      	str	r4, [r1, #16]
  405a38:	60e5      	str	r5, [r4, #12]
  405a3a:	60a5      	str	r5, [r4, #8]
  405a3c:	6062      	str	r2, [r4, #4]
  405a3e:	50e3      	str	r3, [r4, r3]
  405a40:	e78a      	b.n	405958 <_free_r+0x84>
  405a42:	2a54      	cmp	r2, #84	; 0x54
  405a44:	d806      	bhi.n	405a54 <_free_r+0x180>
  405a46:	0b1a      	lsrs	r2, r3, #12
  405a48:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405a4c:	00ff      	lsls	r7, r7, #3
  405a4e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405a52:	e790      	b.n	405976 <_free_r+0xa2>
  405a54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405a58:	d806      	bhi.n	405a68 <_free_r+0x194>
  405a5a:	0bda      	lsrs	r2, r3, #15
  405a5c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405a60:	00ff      	lsls	r7, r7, #3
  405a62:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405a66:	e786      	b.n	405976 <_free_r+0xa2>
  405a68:	f240 5054 	movw	r0, #1364	; 0x554
  405a6c:	4282      	cmp	r2, r0
  405a6e:	d806      	bhi.n	405a7e <_free_r+0x1aa>
  405a70:	0c9a      	lsrs	r2, r3, #18
  405a72:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405a76:	00ff      	lsls	r7, r7, #3
  405a78:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405a7c:	e77b      	b.n	405976 <_free_r+0xa2>
  405a7e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405a82:	257e      	movs	r5, #126	; 0x7e
  405a84:	e777      	b.n	405976 <_free_r+0xa2>
  405a86:	f043 0101 	orr.w	r1, r3, #1
  405a8a:	6061      	str	r1, [r4, #4]
  405a8c:	6013      	str	r3, [r2, #0]
  405a8e:	e763      	b.n	405958 <_free_r+0x84>
  405a90:	20400450 	.word	0x20400450
  405a94:	20400458 	.word	0x20400458
  405a98:	2040085c 	.word	0x2040085c
  405a9c:	20400ddc 	.word	0x20400ddc

00405aa0 <__sfvwrite_r>:
  405aa0:	6893      	ldr	r3, [r2, #8]
  405aa2:	2b00      	cmp	r3, #0
  405aa4:	d073      	beq.n	405b8e <__sfvwrite_r+0xee>
  405aa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aaa:	898b      	ldrh	r3, [r1, #12]
  405aac:	b083      	sub	sp, #12
  405aae:	460c      	mov	r4, r1
  405ab0:	0719      	lsls	r1, r3, #28
  405ab2:	9000      	str	r0, [sp, #0]
  405ab4:	4616      	mov	r6, r2
  405ab6:	d526      	bpl.n	405b06 <__sfvwrite_r+0x66>
  405ab8:	6922      	ldr	r2, [r4, #16]
  405aba:	b322      	cbz	r2, 405b06 <__sfvwrite_r+0x66>
  405abc:	f013 0002 	ands.w	r0, r3, #2
  405ac0:	6835      	ldr	r5, [r6, #0]
  405ac2:	d02c      	beq.n	405b1e <__sfvwrite_r+0x7e>
  405ac4:	f04f 0900 	mov.w	r9, #0
  405ac8:	4fb0      	ldr	r7, [pc, #704]	; (405d8c <__sfvwrite_r+0x2ec>)
  405aca:	46c8      	mov	r8, r9
  405acc:	46b2      	mov	sl, r6
  405ace:	45b8      	cmp	r8, r7
  405ad0:	4643      	mov	r3, r8
  405ad2:	464a      	mov	r2, r9
  405ad4:	bf28      	it	cs
  405ad6:	463b      	movcs	r3, r7
  405ad8:	9800      	ldr	r0, [sp, #0]
  405ada:	f1b8 0f00 	cmp.w	r8, #0
  405ade:	d050      	beq.n	405b82 <__sfvwrite_r+0xe2>
  405ae0:	69e1      	ldr	r1, [r4, #28]
  405ae2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405ae4:	47b0      	blx	r6
  405ae6:	2800      	cmp	r0, #0
  405ae8:	dd58      	ble.n	405b9c <__sfvwrite_r+0xfc>
  405aea:	f8da 3008 	ldr.w	r3, [sl, #8]
  405aee:	1a1b      	subs	r3, r3, r0
  405af0:	4481      	add	r9, r0
  405af2:	eba8 0800 	sub.w	r8, r8, r0
  405af6:	f8ca 3008 	str.w	r3, [sl, #8]
  405afa:	2b00      	cmp	r3, #0
  405afc:	d1e7      	bne.n	405ace <__sfvwrite_r+0x2e>
  405afe:	2000      	movs	r0, #0
  405b00:	b003      	add	sp, #12
  405b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b06:	4621      	mov	r1, r4
  405b08:	9800      	ldr	r0, [sp, #0]
  405b0a:	f7ff fc51 	bl	4053b0 <__swsetup_r>
  405b0e:	2800      	cmp	r0, #0
  405b10:	f040 8133 	bne.w	405d7a <__sfvwrite_r+0x2da>
  405b14:	89a3      	ldrh	r3, [r4, #12]
  405b16:	6835      	ldr	r5, [r6, #0]
  405b18:	f013 0002 	ands.w	r0, r3, #2
  405b1c:	d1d2      	bne.n	405ac4 <__sfvwrite_r+0x24>
  405b1e:	f013 0901 	ands.w	r9, r3, #1
  405b22:	d145      	bne.n	405bb0 <__sfvwrite_r+0x110>
  405b24:	464f      	mov	r7, r9
  405b26:	9601      	str	r6, [sp, #4]
  405b28:	b337      	cbz	r7, 405b78 <__sfvwrite_r+0xd8>
  405b2a:	059a      	lsls	r2, r3, #22
  405b2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405b30:	f140 8083 	bpl.w	405c3a <__sfvwrite_r+0x19a>
  405b34:	4547      	cmp	r7, r8
  405b36:	46c3      	mov	fp, r8
  405b38:	f0c0 80ab 	bcc.w	405c92 <__sfvwrite_r+0x1f2>
  405b3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405b40:	f040 80ac 	bne.w	405c9c <__sfvwrite_r+0x1fc>
  405b44:	6820      	ldr	r0, [r4, #0]
  405b46:	46ba      	mov	sl, r7
  405b48:	465a      	mov	r2, fp
  405b4a:	4649      	mov	r1, r9
  405b4c:	f000 fa40 	bl	405fd0 <memmove>
  405b50:	68a2      	ldr	r2, [r4, #8]
  405b52:	6823      	ldr	r3, [r4, #0]
  405b54:	eba2 0208 	sub.w	r2, r2, r8
  405b58:	445b      	add	r3, fp
  405b5a:	60a2      	str	r2, [r4, #8]
  405b5c:	6023      	str	r3, [r4, #0]
  405b5e:	9a01      	ldr	r2, [sp, #4]
  405b60:	6893      	ldr	r3, [r2, #8]
  405b62:	eba3 030a 	sub.w	r3, r3, sl
  405b66:	44d1      	add	r9, sl
  405b68:	eba7 070a 	sub.w	r7, r7, sl
  405b6c:	6093      	str	r3, [r2, #8]
  405b6e:	2b00      	cmp	r3, #0
  405b70:	d0c5      	beq.n	405afe <__sfvwrite_r+0x5e>
  405b72:	89a3      	ldrh	r3, [r4, #12]
  405b74:	2f00      	cmp	r7, #0
  405b76:	d1d8      	bne.n	405b2a <__sfvwrite_r+0x8a>
  405b78:	f8d5 9000 	ldr.w	r9, [r5]
  405b7c:	686f      	ldr	r7, [r5, #4]
  405b7e:	3508      	adds	r5, #8
  405b80:	e7d2      	b.n	405b28 <__sfvwrite_r+0x88>
  405b82:	f8d5 9000 	ldr.w	r9, [r5]
  405b86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405b8a:	3508      	adds	r5, #8
  405b8c:	e79f      	b.n	405ace <__sfvwrite_r+0x2e>
  405b8e:	2000      	movs	r0, #0
  405b90:	4770      	bx	lr
  405b92:	4621      	mov	r1, r4
  405b94:	9800      	ldr	r0, [sp, #0]
  405b96:	f7ff fd1f 	bl	4055d8 <_fflush_r>
  405b9a:	b370      	cbz	r0, 405bfa <__sfvwrite_r+0x15a>
  405b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ba4:	f04f 30ff 	mov.w	r0, #4294967295
  405ba8:	81a3      	strh	r3, [r4, #12]
  405baa:	b003      	add	sp, #12
  405bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bb0:	4681      	mov	r9, r0
  405bb2:	4633      	mov	r3, r6
  405bb4:	464e      	mov	r6, r9
  405bb6:	46a8      	mov	r8, r5
  405bb8:	469a      	mov	sl, r3
  405bba:	464d      	mov	r5, r9
  405bbc:	b34e      	cbz	r6, 405c12 <__sfvwrite_r+0x172>
  405bbe:	b380      	cbz	r0, 405c22 <__sfvwrite_r+0x182>
  405bc0:	6820      	ldr	r0, [r4, #0]
  405bc2:	6923      	ldr	r3, [r4, #16]
  405bc4:	6962      	ldr	r2, [r4, #20]
  405bc6:	45b1      	cmp	r9, r6
  405bc8:	46cb      	mov	fp, r9
  405bca:	bf28      	it	cs
  405bcc:	46b3      	movcs	fp, r6
  405bce:	4298      	cmp	r0, r3
  405bd0:	465f      	mov	r7, fp
  405bd2:	d904      	bls.n	405bde <__sfvwrite_r+0x13e>
  405bd4:	68a3      	ldr	r3, [r4, #8]
  405bd6:	4413      	add	r3, r2
  405bd8:	459b      	cmp	fp, r3
  405bda:	f300 80a6 	bgt.w	405d2a <__sfvwrite_r+0x28a>
  405bde:	4593      	cmp	fp, r2
  405be0:	db4b      	blt.n	405c7a <__sfvwrite_r+0x1da>
  405be2:	4613      	mov	r3, r2
  405be4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405be6:	69e1      	ldr	r1, [r4, #28]
  405be8:	9800      	ldr	r0, [sp, #0]
  405bea:	462a      	mov	r2, r5
  405bec:	47b8      	blx	r7
  405bee:	1e07      	subs	r7, r0, #0
  405bf0:	ddd4      	ble.n	405b9c <__sfvwrite_r+0xfc>
  405bf2:	ebb9 0907 	subs.w	r9, r9, r7
  405bf6:	d0cc      	beq.n	405b92 <__sfvwrite_r+0xf2>
  405bf8:	2001      	movs	r0, #1
  405bfa:	f8da 3008 	ldr.w	r3, [sl, #8]
  405bfe:	1bdb      	subs	r3, r3, r7
  405c00:	443d      	add	r5, r7
  405c02:	1bf6      	subs	r6, r6, r7
  405c04:	f8ca 3008 	str.w	r3, [sl, #8]
  405c08:	2b00      	cmp	r3, #0
  405c0a:	f43f af78 	beq.w	405afe <__sfvwrite_r+0x5e>
  405c0e:	2e00      	cmp	r6, #0
  405c10:	d1d5      	bne.n	405bbe <__sfvwrite_r+0x11e>
  405c12:	f108 0308 	add.w	r3, r8, #8
  405c16:	e913 0060 	ldmdb	r3, {r5, r6}
  405c1a:	4698      	mov	r8, r3
  405c1c:	3308      	adds	r3, #8
  405c1e:	2e00      	cmp	r6, #0
  405c20:	d0f9      	beq.n	405c16 <__sfvwrite_r+0x176>
  405c22:	4632      	mov	r2, r6
  405c24:	210a      	movs	r1, #10
  405c26:	4628      	mov	r0, r5
  405c28:	f000 f982 	bl	405f30 <memchr>
  405c2c:	2800      	cmp	r0, #0
  405c2e:	f000 80a1 	beq.w	405d74 <__sfvwrite_r+0x2d4>
  405c32:	3001      	adds	r0, #1
  405c34:	eba0 0905 	sub.w	r9, r0, r5
  405c38:	e7c2      	b.n	405bc0 <__sfvwrite_r+0x120>
  405c3a:	6820      	ldr	r0, [r4, #0]
  405c3c:	6923      	ldr	r3, [r4, #16]
  405c3e:	4298      	cmp	r0, r3
  405c40:	d802      	bhi.n	405c48 <__sfvwrite_r+0x1a8>
  405c42:	6963      	ldr	r3, [r4, #20]
  405c44:	429f      	cmp	r7, r3
  405c46:	d25d      	bcs.n	405d04 <__sfvwrite_r+0x264>
  405c48:	45b8      	cmp	r8, r7
  405c4a:	bf28      	it	cs
  405c4c:	46b8      	movcs	r8, r7
  405c4e:	4642      	mov	r2, r8
  405c50:	4649      	mov	r1, r9
  405c52:	f000 f9bd 	bl	405fd0 <memmove>
  405c56:	68a3      	ldr	r3, [r4, #8]
  405c58:	6822      	ldr	r2, [r4, #0]
  405c5a:	eba3 0308 	sub.w	r3, r3, r8
  405c5e:	4442      	add	r2, r8
  405c60:	60a3      	str	r3, [r4, #8]
  405c62:	6022      	str	r2, [r4, #0]
  405c64:	b10b      	cbz	r3, 405c6a <__sfvwrite_r+0x1ca>
  405c66:	46c2      	mov	sl, r8
  405c68:	e779      	b.n	405b5e <__sfvwrite_r+0xbe>
  405c6a:	4621      	mov	r1, r4
  405c6c:	9800      	ldr	r0, [sp, #0]
  405c6e:	f7ff fcb3 	bl	4055d8 <_fflush_r>
  405c72:	2800      	cmp	r0, #0
  405c74:	d192      	bne.n	405b9c <__sfvwrite_r+0xfc>
  405c76:	46c2      	mov	sl, r8
  405c78:	e771      	b.n	405b5e <__sfvwrite_r+0xbe>
  405c7a:	465a      	mov	r2, fp
  405c7c:	4629      	mov	r1, r5
  405c7e:	f000 f9a7 	bl	405fd0 <memmove>
  405c82:	68a2      	ldr	r2, [r4, #8]
  405c84:	6823      	ldr	r3, [r4, #0]
  405c86:	eba2 020b 	sub.w	r2, r2, fp
  405c8a:	445b      	add	r3, fp
  405c8c:	60a2      	str	r2, [r4, #8]
  405c8e:	6023      	str	r3, [r4, #0]
  405c90:	e7af      	b.n	405bf2 <__sfvwrite_r+0x152>
  405c92:	6820      	ldr	r0, [r4, #0]
  405c94:	46b8      	mov	r8, r7
  405c96:	46ba      	mov	sl, r7
  405c98:	46bb      	mov	fp, r7
  405c9a:	e755      	b.n	405b48 <__sfvwrite_r+0xa8>
  405c9c:	6962      	ldr	r2, [r4, #20]
  405c9e:	6820      	ldr	r0, [r4, #0]
  405ca0:	6921      	ldr	r1, [r4, #16]
  405ca2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405ca6:	eba0 0a01 	sub.w	sl, r0, r1
  405caa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405cae:	f10a 0001 	add.w	r0, sl, #1
  405cb2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405cb6:	4438      	add	r0, r7
  405cb8:	4540      	cmp	r0, r8
  405cba:	4642      	mov	r2, r8
  405cbc:	bf84      	itt	hi
  405cbe:	4680      	movhi	r8, r0
  405cc0:	4642      	movhi	r2, r8
  405cc2:	055b      	lsls	r3, r3, #21
  405cc4:	d544      	bpl.n	405d50 <__sfvwrite_r+0x2b0>
  405cc6:	4611      	mov	r1, r2
  405cc8:	9800      	ldr	r0, [sp, #0]
  405cca:	f7fd ff85 	bl	403bd8 <_malloc_r>
  405cce:	4683      	mov	fp, r0
  405cd0:	2800      	cmp	r0, #0
  405cd2:	d055      	beq.n	405d80 <__sfvwrite_r+0x2e0>
  405cd4:	4652      	mov	r2, sl
  405cd6:	6921      	ldr	r1, [r4, #16]
  405cd8:	f7fe fa2e 	bl	404138 <memcpy>
  405cdc:	89a3      	ldrh	r3, [r4, #12]
  405cde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ce6:	81a3      	strh	r3, [r4, #12]
  405ce8:	eb0b 000a 	add.w	r0, fp, sl
  405cec:	eba8 030a 	sub.w	r3, r8, sl
  405cf0:	f8c4 b010 	str.w	fp, [r4, #16]
  405cf4:	f8c4 8014 	str.w	r8, [r4, #20]
  405cf8:	6020      	str	r0, [r4, #0]
  405cfa:	60a3      	str	r3, [r4, #8]
  405cfc:	46b8      	mov	r8, r7
  405cfe:	46ba      	mov	sl, r7
  405d00:	46bb      	mov	fp, r7
  405d02:	e721      	b.n	405b48 <__sfvwrite_r+0xa8>
  405d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405d08:	42b9      	cmp	r1, r7
  405d0a:	bf28      	it	cs
  405d0c:	4639      	movcs	r1, r7
  405d0e:	464a      	mov	r2, r9
  405d10:	fb91 f1f3 	sdiv	r1, r1, r3
  405d14:	9800      	ldr	r0, [sp, #0]
  405d16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405d18:	fb03 f301 	mul.w	r3, r3, r1
  405d1c:	69e1      	ldr	r1, [r4, #28]
  405d1e:	47b0      	blx	r6
  405d20:	f1b0 0a00 	subs.w	sl, r0, #0
  405d24:	f73f af1b 	bgt.w	405b5e <__sfvwrite_r+0xbe>
  405d28:	e738      	b.n	405b9c <__sfvwrite_r+0xfc>
  405d2a:	461a      	mov	r2, r3
  405d2c:	4629      	mov	r1, r5
  405d2e:	9301      	str	r3, [sp, #4]
  405d30:	f000 f94e 	bl	405fd0 <memmove>
  405d34:	6822      	ldr	r2, [r4, #0]
  405d36:	9b01      	ldr	r3, [sp, #4]
  405d38:	9800      	ldr	r0, [sp, #0]
  405d3a:	441a      	add	r2, r3
  405d3c:	6022      	str	r2, [r4, #0]
  405d3e:	4621      	mov	r1, r4
  405d40:	f7ff fc4a 	bl	4055d8 <_fflush_r>
  405d44:	9b01      	ldr	r3, [sp, #4]
  405d46:	2800      	cmp	r0, #0
  405d48:	f47f af28 	bne.w	405b9c <__sfvwrite_r+0xfc>
  405d4c:	461f      	mov	r7, r3
  405d4e:	e750      	b.n	405bf2 <__sfvwrite_r+0x152>
  405d50:	9800      	ldr	r0, [sp, #0]
  405d52:	f000 f9a1 	bl	406098 <_realloc_r>
  405d56:	4683      	mov	fp, r0
  405d58:	2800      	cmp	r0, #0
  405d5a:	d1c5      	bne.n	405ce8 <__sfvwrite_r+0x248>
  405d5c:	9d00      	ldr	r5, [sp, #0]
  405d5e:	6921      	ldr	r1, [r4, #16]
  405d60:	4628      	mov	r0, r5
  405d62:	f7ff fdb7 	bl	4058d4 <_free_r>
  405d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d6a:	220c      	movs	r2, #12
  405d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405d70:	602a      	str	r2, [r5, #0]
  405d72:	e715      	b.n	405ba0 <__sfvwrite_r+0x100>
  405d74:	f106 0901 	add.w	r9, r6, #1
  405d78:	e722      	b.n	405bc0 <__sfvwrite_r+0x120>
  405d7a:	f04f 30ff 	mov.w	r0, #4294967295
  405d7e:	e6bf      	b.n	405b00 <__sfvwrite_r+0x60>
  405d80:	9a00      	ldr	r2, [sp, #0]
  405d82:	230c      	movs	r3, #12
  405d84:	6013      	str	r3, [r2, #0]
  405d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d8a:	e709      	b.n	405ba0 <__sfvwrite_r+0x100>
  405d8c:	7ffffc00 	.word	0x7ffffc00

00405d90 <_fwalk_reent>:
  405d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405d94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405d98:	d01f      	beq.n	405dda <_fwalk_reent+0x4a>
  405d9a:	4688      	mov	r8, r1
  405d9c:	4606      	mov	r6, r0
  405d9e:	f04f 0900 	mov.w	r9, #0
  405da2:	687d      	ldr	r5, [r7, #4]
  405da4:	68bc      	ldr	r4, [r7, #8]
  405da6:	3d01      	subs	r5, #1
  405da8:	d411      	bmi.n	405dce <_fwalk_reent+0x3e>
  405daa:	89a3      	ldrh	r3, [r4, #12]
  405dac:	2b01      	cmp	r3, #1
  405dae:	f105 35ff 	add.w	r5, r5, #4294967295
  405db2:	d908      	bls.n	405dc6 <_fwalk_reent+0x36>
  405db4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405db8:	3301      	adds	r3, #1
  405dba:	4621      	mov	r1, r4
  405dbc:	4630      	mov	r0, r6
  405dbe:	d002      	beq.n	405dc6 <_fwalk_reent+0x36>
  405dc0:	47c0      	blx	r8
  405dc2:	ea49 0900 	orr.w	r9, r9, r0
  405dc6:	1c6b      	adds	r3, r5, #1
  405dc8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405dcc:	d1ed      	bne.n	405daa <_fwalk_reent+0x1a>
  405dce:	683f      	ldr	r7, [r7, #0]
  405dd0:	2f00      	cmp	r7, #0
  405dd2:	d1e6      	bne.n	405da2 <_fwalk_reent+0x12>
  405dd4:	4648      	mov	r0, r9
  405dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405dda:	46b9      	mov	r9, r7
  405ddc:	4648      	mov	r0, r9
  405dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405de2:	bf00      	nop

00405de4 <__locale_mb_cur_max>:
  405de4:	4b04      	ldr	r3, [pc, #16]	; (405df8 <__locale_mb_cur_max+0x14>)
  405de6:	4a05      	ldr	r2, [pc, #20]	; (405dfc <__locale_mb_cur_max+0x18>)
  405de8:	681b      	ldr	r3, [r3, #0]
  405dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405dec:	2b00      	cmp	r3, #0
  405dee:	bf08      	it	eq
  405df0:	4613      	moveq	r3, r2
  405df2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405df6:	4770      	bx	lr
  405df8:	20400024 	.word	0x20400024
  405dfc:	20400864 	.word	0x20400864

00405e00 <__retarget_lock_init_recursive>:
  405e00:	4770      	bx	lr
  405e02:	bf00      	nop

00405e04 <__retarget_lock_close_recursive>:
  405e04:	4770      	bx	lr
  405e06:	bf00      	nop

00405e08 <__retarget_lock_acquire_recursive>:
  405e08:	4770      	bx	lr
  405e0a:	bf00      	nop

00405e0c <__retarget_lock_release_recursive>:
  405e0c:	4770      	bx	lr
  405e0e:	bf00      	nop

00405e10 <__swhatbuf_r>:
  405e10:	b570      	push	{r4, r5, r6, lr}
  405e12:	460c      	mov	r4, r1
  405e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405e18:	2900      	cmp	r1, #0
  405e1a:	b090      	sub	sp, #64	; 0x40
  405e1c:	4615      	mov	r5, r2
  405e1e:	461e      	mov	r6, r3
  405e20:	db14      	blt.n	405e4c <__swhatbuf_r+0x3c>
  405e22:	aa01      	add	r2, sp, #4
  405e24:	f000 fc9e 	bl	406764 <_fstat_r>
  405e28:	2800      	cmp	r0, #0
  405e2a:	db0f      	blt.n	405e4c <__swhatbuf_r+0x3c>
  405e2c:	9a02      	ldr	r2, [sp, #8]
  405e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405e32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405e36:	fab2 f282 	clz	r2, r2
  405e3a:	0952      	lsrs	r2, r2, #5
  405e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405e40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405e44:	6032      	str	r2, [r6, #0]
  405e46:	602b      	str	r3, [r5, #0]
  405e48:	b010      	add	sp, #64	; 0x40
  405e4a:	bd70      	pop	{r4, r5, r6, pc}
  405e4c:	89a2      	ldrh	r2, [r4, #12]
  405e4e:	2300      	movs	r3, #0
  405e50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405e54:	6033      	str	r3, [r6, #0]
  405e56:	d004      	beq.n	405e62 <__swhatbuf_r+0x52>
  405e58:	2240      	movs	r2, #64	; 0x40
  405e5a:	4618      	mov	r0, r3
  405e5c:	602a      	str	r2, [r5, #0]
  405e5e:	b010      	add	sp, #64	; 0x40
  405e60:	bd70      	pop	{r4, r5, r6, pc}
  405e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405e66:	602b      	str	r3, [r5, #0]
  405e68:	b010      	add	sp, #64	; 0x40
  405e6a:	bd70      	pop	{r4, r5, r6, pc}

00405e6c <__smakebuf_r>:
  405e6c:	898a      	ldrh	r2, [r1, #12]
  405e6e:	0792      	lsls	r2, r2, #30
  405e70:	460b      	mov	r3, r1
  405e72:	d506      	bpl.n	405e82 <__smakebuf_r+0x16>
  405e74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405e78:	2101      	movs	r1, #1
  405e7a:	601a      	str	r2, [r3, #0]
  405e7c:	611a      	str	r2, [r3, #16]
  405e7e:	6159      	str	r1, [r3, #20]
  405e80:	4770      	bx	lr
  405e82:	b5f0      	push	{r4, r5, r6, r7, lr}
  405e84:	b083      	sub	sp, #12
  405e86:	ab01      	add	r3, sp, #4
  405e88:	466a      	mov	r2, sp
  405e8a:	460c      	mov	r4, r1
  405e8c:	4606      	mov	r6, r0
  405e8e:	f7ff ffbf 	bl	405e10 <__swhatbuf_r>
  405e92:	9900      	ldr	r1, [sp, #0]
  405e94:	4605      	mov	r5, r0
  405e96:	4630      	mov	r0, r6
  405e98:	f7fd fe9e 	bl	403bd8 <_malloc_r>
  405e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ea0:	b1d8      	cbz	r0, 405eda <__smakebuf_r+0x6e>
  405ea2:	9a01      	ldr	r2, [sp, #4]
  405ea4:	4f15      	ldr	r7, [pc, #84]	; (405efc <__smakebuf_r+0x90>)
  405ea6:	9900      	ldr	r1, [sp, #0]
  405ea8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405eae:	81a3      	strh	r3, [r4, #12]
  405eb0:	6020      	str	r0, [r4, #0]
  405eb2:	6120      	str	r0, [r4, #16]
  405eb4:	6161      	str	r1, [r4, #20]
  405eb6:	b91a      	cbnz	r2, 405ec0 <__smakebuf_r+0x54>
  405eb8:	432b      	orrs	r3, r5
  405eba:	81a3      	strh	r3, [r4, #12]
  405ebc:	b003      	add	sp, #12
  405ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ec0:	4630      	mov	r0, r6
  405ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405ec6:	f000 fc61 	bl	40678c <_isatty_r>
  405eca:	b1a0      	cbz	r0, 405ef6 <__smakebuf_r+0x8a>
  405ecc:	89a3      	ldrh	r3, [r4, #12]
  405ece:	f023 0303 	bic.w	r3, r3, #3
  405ed2:	f043 0301 	orr.w	r3, r3, #1
  405ed6:	b21b      	sxth	r3, r3
  405ed8:	e7ee      	b.n	405eb8 <__smakebuf_r+0x4c>
  405eda:	059a      	lsls	r2, r3, #22
  405edc:	d4ee      	bmi.n	405ebc <__smakebuf_r+0x50>
  405ede:	f023 0303 	bic.w	r3, r3, #3
  405ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405ee6:	f043 0302 	orr.w	r3, r3, #2
  405eea:	2101      	movs	r1, #1
  405eec:	81a3      	strh	r3, [r4, #12]
  405eee:	6022      	str	r2, [r4, #0]
  405ef0:	6122      	str	r2, [r4, #16]
  405ef2:	6161      	str	r1, [r4, #20]
  405ef4:	e7e2      	b.n	405ebc <__smakebuf_r+0x50>
  405ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405efa:	e7dd      	b.n	405eb8 <__smakebuf_r+0x4c>
  405efc:	0040562d 	.word	0x0040562d

00405f00 <__ascii_mbtowc>:
  405f00:	b082      	sub	sp, #8
  405f02:	b149      	cbz	r1, 405f18 <__ascii_mbtowc+0x18>
  405f04:	b15a      	cbz	r2, 405f1e <__ascii_mbtowc+0x1e>
  405f06:	b16b      	cbz	r3, 405f24 <__ascii_mbtowc+0x24>
  405f08:	7813      	ldrb	r3, [r2, #0]
  405f0a:	600b      	str	r3, [r1, #0]
  405f0c:	7812      	ldrb	r2, [r2, #0]
  405f0e:	1c10      	adds	r0, r2, #0
  405f10:	bf18      	it	ne
  405f12:	2001      	movne	r0, #1
  405f14:	b002      	add	sp, #8
  405f16:	4770      	bx	lr
  405f18:	a901      	add	r1, sp, #4
  405f1a:	2a00      	cmp	r2, #0
  405f1c:	d1f3      	bne.n	405f06 <__ascii_mbtowc+0x6>
  405f1e:	4610      	mov	r0, r2
  405f20:	b002      	add	sp, #8
  405f22:	4770      	bx	lr
  405f24:	f06f 0001 	mvn.w	r0, #1
  405f28:	e7f4      	b.n	405f14 <__ascii_mbtowc+0x14>
  405f2a:	bf00      	nop
  405f2c:	0000      	movs	r0, r0
	...

00405f30 <memchr>:
  405f30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f34:	2a10      	cmp	r2, #16
  405f36:	db2b      	blt.n	405f90 <memchr+0x60>
  405f38:	f010 0f07 	tst.w	r0, #7
  405f3c:	d008      	beq.n	405f50 <memchr+0x20>
  405f3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f42:	3a01      	subs	r2, #1
  405f44:	428b      	cmp	r3, r1
  405f46:	d02d      	beq.n	405fa4 <memchr+0x74>
  405f48:	f010 0f07 	tst.w	r0, #7
  405f4c:	b342      	cbz	r2, 405fa0 <memchr+0x70>
  405f4e:	d1f6      	bne.n	405f3e <memchr+0xe>
  405f50:	b4f0      	push	{r4, r5, r6, r7}
  405f52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405f56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405f5a:	f022 0407 	bic.w	r4, r2, #7
  405f5e:	f07f 0700 	mvns.w	r7, #0
  405f62:	2300      	movs	r3, #0
  405f64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405f68:	3c08      	subs	r4, #8
  405f6a:	ea85 0501 	eor.w	r5, r5, r1
  405f6e:	ea86 0601 	eor.w	r6, r6, r1
  405f72:	fa85 f547 	uadd8	r5, r5, r7
  405f76:	faa3 f587 	sel	r5, r3, r7
  405f7a:	fa86 f647 	uadd8	r6, r6, r7
  405f7e:	faa5 f687 	sel	r6, r5, r7
  405f82:	b98e      	cbnz	r6, 405fa8 <memchr+0x78>
  405f84:	d1ee      	bne.n	405f64 <memchr+0x34>
  405f86:	bcf0      	pop	{r4, r5, r6, r7}
  405f88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405f8c:	f002 0207 	and.w	r2, r2, #7
  405f90:	b132      	cbz	r2, 405fa0 <memchr+0x70>
  405f92:	f810 3b01 	ldrb.w	r3, [r0], #1
  405f96:	3a01      	subs	r2, #1
  405f98:	ea83 0301 	eor.w	r3, r3, r1
  405f9c:	b113      	cbz	r3, 405fa4 <memchr+0x74>
  405f9e:	d1f8      	bne.n	405f92 <memchr+0x62>
  405fa0:	2000      	movs	r0, #0
  405fa2:	4770      	bx	lr
  405fa4:	3801      	subs	r0, #1
  405fa6:	4770      	bx	lr
  405fa8:	2d00      	cmp	r5, #0
  405faa:	bf06      	itte	eq
  405fac:	4635      	moveq	r5, r6
  405fae:	3803      	subeq	r0, #3
  405fb0:	3807      	subne	r0, #7
  405fb2:	f015 0f01 	tst.w	r5, #1
  405fb6:	d107      	bne.n	405fc8 <memchr+0x98>
  405fb8:	3001      	adds	r0, #1
  405fba:	f415 7f80 	tst.w	r5, #256	; 0x100
  405fbe:	bf02      	ittt	eq
  405fc0:	3001      	addeq	r0, #1
  405fc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405fc6:	3001      	addeq	r0, #1
  405fc8:	bcf0      	pop	{r4, r5, r6, r7}
  405fca:	3801      	subs	r0, #1
  405fcc:	4770      	bx	lr
  405fce:	bf00      	nop

00405fd0 <memmove>:
  405fd0:	4288      	cmp	r0, r1
  405fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405fd4:	d90d      	bls.n	405ff2 <memmove+0x22>
  405fd6:	188b      	adds	r3, r1, r2
  405fd8:	4298      	cmp	r0, r3
  405fda:	d20a      	bcs.n	405ff2 <memmove+0x22>
  405fdc:	1884      	adds	r4, r0, r2
  405fde:	2a00      	cmp	r2, #0
  405fe0:	d051      	beq.n	406086 <memmove+0xb6>
  405fe2:	4622      	mov	r2, r4
  405fe4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405fe8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405fec:	4299      	cmp	r1, r3
  405fee:	d1f9      	bne.n	405fe4 <memmove+0x14>
  405ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405ff2:	2a0f      	cmp	r2, #15
  405ff4:	d948      	bls.n	406088 <memmove+0xb8>
  405ff6:	ea41 0300 	orr.w	r3, r1, r0
  405ffa:	079b      	lsls	r3, r3, #30
  405ffc:	d146      	bne.n	40608c <memmove+0xbc>
  405ffe:	f100 0410 	add.w	r4, r0, #16
  406002:	f101 0310 	add.w	r3, r1, #16
  406006:	4615      	mov	r5, r2
  406008:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40600c:	f844 6c10 	str.w	r6, [r4, #-16]
  406010:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406014:	f844 6c0c 	str.w	r6, [r4, #-12]
  406018:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40601c:	f844 6c08 	str.w	r6, [r4, #-8]
  406020:	3d10      	subs	r5, #16
  406022:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406026:	f844 6c04 	str.w	r6, [r4, #-4]
  40602a:	2d0f      	cmp	r5, #15
  40602c:	f103 0310 	add.w	r3, r3, #16
  406030:	f104 0410 	add.w	r4, r4, #16
  406034:	d8e8      	bhi.n	406008 <memmove+0x38>
  406036:	f1a2 0310 	sub.w	r3, r2, #16
  40603a:	f023 030f 	bic.w	r3, r3, #15
  40603e:	f002 0e0f 	and.w	lr, r2, #15
  406042:	3310      	adds	r3, #16
  406044:	f1be 0f03 	cmp.w	lr, #3
  406048:	4419      	add	r1, r3
  40604a:	4403      	add	r3, r0
  40604c:	d921      	bls.n	406092 <memmove+0xc2>
  40604e:	1f1e      	subs	r6, r3, #4
  406050:	460d      	mov	r5, r1
  406052:	4674      	mov	r4, lr
  406054:	3c04      	subs	r4, #4
  406056:	f855 7b04 	ldr.w	r7, [r5], #4
  40605a:	f846 7f04 	str.w	r7, [r6, #4]!
  40605e:	2c03      	cmp	r4, #3
  406060:	d8f8      	bhi.n	406054 <memmove+0x84>
  406062:	f1ae 0404 	sub.w	r4, lr, #4
  406066:	f024 0403 	bic.w	r4, r4, #3
  40606a:	3404      	adds	r4, #4
  40606c:	4421      	add	r1, r4
  40606e:	4423      	add	r3, r4
  406070:	f002 0203 	and.w	r2, r2, #3
  406074:	b162      	cbz	r2, 406090 <memmove+0xc0>
  406076:	3b01      	subs	r3, #1
  406078:	440a      	add	r2, r1
  40607a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40607e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406082:	428a      	cmp	r2, r1
  406084:	d1f9      	bne.n	40607a <memmove+0xaa>
  406086:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406088:	4603      	mov	r3, r0
  40608a:	e7f3      	b.n	406074 <memmove+0xa4>
  40608c:	4603      	mov	r3, r0
  40608e:	e7f2      	b.n	406076 <memmove+0xa6>
  406090:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406092:	4672      	mov	r2, lr
  406094:	e7ee      	b.n	406074 <memmove+0xa4>
  406096:	bf00      	nop

00406098 <_realloc_r>:
  406098:	2900      	cmp	r1, #0
  40609a:	f000 8095 	beq.w	4061c8 <_realloc_r+0x130>
  40609e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4060a2:	460d      	mov	r5, r1
  4060a4:	4616      	mov	r6, r2
  4060a6:	b083      	sub	sp, #12
  4060a8:	4680      	mov	r8, r0
  4060aa:	f106 070b 	add.w	r7, r6, #11
  4060ae:	f7fe f92b 	bl	404308 <__malloc_lock>
  4060b2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4060b6:	2f16      	cmp	r7, #22
  4060b8:	f02e 0403 	bic.w	r4, lr, #3
  4060bc:	f1a5 0908 	sub.w	r9, r5, #8
  4060c0:	d83c      	bhi.n	40613c <_realloc_r+0xa4>
  4060c2:	2210      	movs	r2, #16
  4060c4:	4617      	mov	r7, r2
  4060c6:	42be      	cmp	r6, r7
  4060c8:	d83d      	bhi.n	406146 <_realloc_r+0xae>
  4060ca:	4294      	cmp	r4, r2
  4060cc:	da43      	bge.n	406156 <_realloc_r+0xbe>
  4060ce:	4bc4      	ldr	r3, [pc, #784]	; (4063e0 <_realloc_r+0x348>)
  4060d0:	6899      	ldr	r1, [r3, #8]
  4060d2:	eb09 0004 	add.w	r0, r9, r4
  4060d6:	4288      	cmp	r0, r1
  4060d8:	f000 80b4 	beq.w	406244 <_realloc_r+0x1ac>
  4060dc:	6843      	ldr	r3, [r0, #4]
  4060de:	f023 0101 	bic.w	r1, r3, #1
  4060e2:	4401      	add	r1, r0
  4060e4:	6849      	ldr	r1, [r1, #4]
  4060e6:	07c9      	lsls	r1, r1, #31
  4060e8:	d54c      	bpl.n	406184 <_realloc_r+0xec>
  4060ea:	f01e 0f01 	tst.w	lr, #1
  4060ee:	f000 809b 	beq.w	406228 <_realloc_r+0x190>
  4060f2:	4631      	mov	r1, r6
  4060f4:	4640      	mov	r0, r8
  4060f6:	f7fd fd6f 	bl	403bd8 <_malloc_r>
  4060fa:	4606      	mov	r6, r0
  4060fc:	2800      	cmp	r0, #0
  4060fe:	d03a      	beq.n	406176 <_realloc_r+0xde>
  406100:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406104:	f023 0301 	bic.w	r3, r3, #1
  406108:	444b      	add	r3, r9
  40610a:	f1a0 0208 	sub.w	r2, r0, #8
  40610e:	429a      	cmp	r2, r3
  406110:	f000 8121 	beq.w	406356 <_realloc_r+0x2be>
  406114:	1f22      	subs	r2, r4, #4
  406116:	2a24      	cmp	r2, #36	; 0x24
  406118:	f200 8107 	bhi.w	40632a <_realloc_r+0x292>
  40611c:	2a13      	cmp	r2, #19
  40611e:	f200 80db 	bhi.w	4062d8 <_realloc_r+0x240>
  406122:	4603      	mov	r3, r0
  406124:	462a      	mov	r2, r5
  406126:	6811      	ldr	r1, [r2, #0]
  406128:	6019      	str	r1, [r3, #0]
  40612a:	6851      	ldr	r1, [r2, #4]
  40612c:	6059      	str	r1, [r3, #4]
  40612e:	6892      	ldr	r2, [r2, #8]
  406130:	609a      	str	r2, [r3, #8]
  406132:	4629      	mov	r1, r5
  406134:	4640      	mov	r0, r8
  406136:	f7ff fbcd 	bl	4058d4 <_free_r>
  40613a:	e01c      	b.n	406176 <_realloc_r+0xde>
  40613c:	f027 0707 	bic.w	r7, r7, #7
  406140:	2f00      	cmp	r7, #0
  406142:	463a      	mov	r2, r7
  406144:	dabf      	bge.n	4060c6 <_realloc_r+0x2e>
  406146:	2600      	movs	r6, #0
  406148:	230c      	movs	r3, #12
  40614a:	4630      	mov	r0, r6
  40614c:	f8c8 3000 	str.w	r3, [r8]
  406150:	b003      	add	sp, #12
  406152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406156:	462e      	mov	r6, r5
  406158:	1be3      	subs	r3, r4, r7
  40615a:	2b0f      	cmp	r3, #15
  40615c:	d81e      	bhi.n	40619c <_realloc_r+0x104>
  40615e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406162:	f003 0301 	and.w	r3, r3, #1
  406166:	4323      	orrs	r3, r4
  406168:	444c      	add	r4, r9
  40616a:	f8c9 3004 	str.w	r3, [r9, #4]
  40616e:	6863      	ldr	r3, [r4, #4]
  406170:	f043 0301 	orr.w	r3, r3, #1
  406174:	6063      	str	r3, [r4, #4]
  406176:	4640      	mov	r0, r8
  406178:	f7fe f8cc 	bl	404314 <__malloc_unlock>
  40617c:	4630      	mov	r0, r6
  40617e:	b003      	add	sp, #12
  406180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406184:	f023 0303 	bic.w	r3, r3, #3
  406188:	18e1      	adds	r1, r4, r3
  40618a:	4291      	cmp	r1, r2
  40618c:	db1f      	blt.n	4061ce <_realloc_r+0x136>
  40618e:	68c3      	ldr	r3, [r0, #12]
  406190:	6882      	ldr	r2, [r0, #8]
  406192:	462e      	mov	r6, r5
  406194:	60d3      	str	r3, [r2, #12]
  406196:	460c      	mov	r4, r1
  406198:	609a      	str	r2, [r3, #8]
  40619a:	e7dd      	b.n	406158 <_realloc_r+0xc0>
  40619c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4061a0:	eb09 0107 	add.w	r1, r9, r7
  4061a4:	f002 0201 	and.w	r2, r2, #1
  4061a8:	444c      	add	r4, r9
  4061aa:	f043 0301 	orr.w	r3, r3, #1
  4061ae:	4317      	orrs	r7, r2
  4061b0:	f8c9 7004 	str.w	r7, [r9, #4]
  4061b4:	604b      	str	r3, [r1, #4]
  4061b6:	6863      	ldr	r3, [r4, #4]
  4061b8:	f043 0301 	orr.w	r3, r3, #1
  4061bc:	3108      	adds	r1, #8
  4061be:	6063      	str	r3, [r4, #4]
  4061c0:	4640      	mov	r0, r8
  4061c2:	f7ff fb87 	bl	4058d4 <_free_r>
  4061c6:	e7d6      	b.n	406176 <_realloc_r+0xde>
  4061c8:	4611      	mov	r1, r2
  4061ca:	f7fd bd05 	b.w	403bd8 <_malloc_r>
  4061ce:	f01e 0f01 	tst.w	lr, #1
  4061d2:	d18e      	bne.n	4060f2 <_realloc_r+0x5a>
  4061d4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4061d8:	eba9 0a01 	sub.w	sl, r9, r1
  4061dc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4061e0:	f021 0103 	bic.w	r1, r1, #3
  4061e4:	440b      	add	r3, r1
  4061e6:	4423      	add	r3, r4
  4061e8:	4293      	cmp	r3, r2
  4061ea:	db25      	blt.n	406238 <_realloc_r+0x1a0>
  4061ec:	68c2      	ldr	r2, [r0, #12]
  4061ee:	6881      	ldr	r1, [r0, #8]
  4061f0:	4656      	mov	r6, sl
  4061f2:	60ca      	str	r2, [r1, #12]
  4061f4:	6091      	str	r1, [r2, #8]
  4061f6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4061fa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4061fe:	1f22      	subs	r2, r4, #4
  406200:	2a24      	cmp	r2, #36	; 0x24
  406202:	60c1      	str	r1, [r0, #12]
  406204:	6088      	str	r0, [r1, #8]
  406206:	f200 8094 	bhi.w	406332 <_realloc_r+0x29a>
  40620a:	2a13      	cmp	r2, #19
  40620c:	d96f      	bls.n	4062ee <_realloc_r+0x256>
  40620e:	6829      	ldr	r1, [r5, #0]
  406210:	f8ca 1008 	str.w	r1, [sl, #8]
  406214:	6869      	ldr	r1, [r5, #4]
  406216:	f8ca 100c 	str.w	r1, [sl, #12]
  40621a:	2a1b      	cmp	r2, #27
  40621c:	f200 80a2 	bhi.w	406364 <_realloc_r+0x2cc>
  406220:	3508      	adds	r5, #8
  406222:	f10a 0210 	add.w	r2, sl, #16
  406226:	e063      	b.n	4062f0 <_realloc_r+0x258>
  406228:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40622c:	eba9 0a03 	sub.w	sl, r9, r3
  406230:	f8da 1004 	ldr.w	r1, [sl, #4]
  406234:	f021 0103 	bic.w	r1, r1, #3
  406238:	1863      	adds	r3, r4, r1
  40623a:	4293      	cmp	r3, r2
  40623c:	f6ff af59 	blt.w	4060f2 <_realloc_r+0x5a>
  406240:	4656      	mov	r6, sl
  406242:	e7d8      	b.n	4061f6 <_realloc_r+0x15e>
  406244:	6841      	ldr	r1, [r0, #4]
  406246:	f021 0b03 	bic.w	fp, r1, #3
  40624a:	44a3      	add	fp, r4
  40624c:	f107 0010 	add.w	r0, r7, #16
  406250:	4583      	cmp	fp, r0
  406252:	da56      	bge.n	406302 <_realloc_r+0x26a>
  406254:	f01e 0f01 	tst.w	lr, #1
  406258:	f47f af4b 	bne.w	4060f2 <_realloc_r+0x5a>
  40625c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406260:	eba9 0a01 	sub.w	sl, r9, r1
  406264:	f8da 1004 	ldr.w	r1, [sl, #4]
  406268:	f021 0103 	bic.w	r1, r1, #3
  40626c:	448b      	add	fp, r1
  40626e:	4558      	cmp	r0, fp
  406270:	dce2      	bgt.n	406238 <_realloc_r+0x1a0>
  406272:	4656      	mov	r6, sl
  406274:	f8da 100c 	ldr.w	r1, [sl, #12]
  406278:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40627c:	1f22      	subs	r2, r4, #4
  40627e:	2a24      	cmp	r2, #36	; 0x24
  406280:	60c1      	str	r1, [r0, #12]
  406282:	6088      	str	r0, [r1, #8]
  406284:	f200 808f 	bhi.w	4063a6 <_realloc_r+0x30e>
  406288:	2a13      	cmp	r2, #19
  40628a:	f240 808a 	bls.w	4063a2 <_realloc_r+0x30a>
  40628e:	6829      	ldr	r1, [r5, #0]
  406290:	f8ca 1008 	str.w	r1, [sl, #8]
  406294:	6869      	ldr	r1, [r5, #4]
  406296:	f8ca 100c 	str.w	r1, [sl, #12]
  40629a:	2a1b      	cmp	r2, #27
  40629c:	f200 808a 	bhi.w	4063b4 <_realloc_r+0x31c>
  4062a0:	3508      	adds	r5, #8
  4062a2:	f10a 0210 	add.w	r2, sl, #16
  4062a6:	6829      	ldr	r1, [r5, #0]
  4062a8:	6011      	str	r1, [r2, #0]
  4062aa:	6869      	ldr	r1, [r5, #4]
  4062ac:	6051      	str	r1, [r2, #4]
  4062ae:	68a9      	ldr	r1, [r5, #8]
  4062b0:	6091      	str	r1, [r2, #8]
  4062b2:	eb0a 0107 	add.w	r1, sl, r7
  4062b6:	ebab 0207 	sub.w	r2, fp, r7
  4062ba:	f042 0201 	orr.w	r2, r2, #1
  4062be:	6099      	str	r1, [r3, #8]
  4062c0:	604a      	str	r2, [r1, #4]
  4062c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4062c6:	f003 0301 	and.w	r3, r3, #1
  4062ca:	431f      	orrs	r7, r3
  4062cc:	4640      	mov	r0, r8
  4062ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4062d2:	f7fe f81f 	bl	404314 <__malloc_unlock>
  4062d6:	e751      	b.n	40617c <_realloc_r+0xe4>
  4062d8:	682b      	ldr	r3, [r5, #0]
  4062da:	6003      	str	r3, [r0, #0]
  4062dc:	686b      	ldr	r3, [r5, #4]
  4062de:	6043      	str	r3, [r0, #4]
  4062e0:	2a1b      	cmp	r2, #27
  4062e2:	d82d      	bhi.n	406340 <_realloc_r+0x2a8>
  4062e4:	f100 0308 	add.w	r3, r0, #8
  4062e8:	f105 0208 	add.w	r2, r5, #8
  4062ec:	e71b      	b.n	406126 <_realloc_r+0x8e>
  4062ee:	4632      	mov	r2, r6
  4062f0:	6829      	ldr	r1, [r5, #0]
  4062f2:	6011      	str	r1, [r2, #0]
  4062f4:	6869      	ldr	r1, [r5, #4]
  4062f6:	6051      	str	r1, [r2, #4]
  4062f8:	68a9      	ldr	r1, [r5, #8]
  4062fa:	6091      	str	r1, [r2, #8]
  4062fc:	461c      	mov	r4, r3
  4062fe:	46d1      	mov	r9, sl
  406300:	e72a      	b.n	406158 <_realloc_r+0xc0>
  406302:	eb09 0107 	add.w	r1, r9, r7
  406306:	ebab 0b07 	sub.w	fp, fp, r7
  40630a:	f04b 0201 	orr.w	r2, fp, #1
  40630e:	6099      	str	r1, [r3, #8]
  406310:	604a      	str	r2, [r1, #4]
  406312:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406316:	f003 0301 	and.w	r3, r3, #1
  40631a:	431f      	orrs	r7, r3
  40631c:	4640      	mov	r0, r8
  40631e:	f845 7c04 	str.w	r7, [r5, #-4]
  406322:	f7fd fff7 	bl	404314 <__malloc_unlock>
  406326:	462e      	mov	r6, r5
  406328:	e728      	b.n	40617c <_realloc_r+0xe4>
  40632a:	4629      	mov	r1, r5
  40632c:	f7ff fe50 	bl	405fd0 <memmove>
  406330:	e6ff      	b.n	406132 <_realloc_r+0x9a>
  406332:	4629      	mov	r1, r5
  406334:	4630      	mov	r0, r6
  406336:	461c      	mov	r4, r3
  406338:	46d1      	mov	r9, sl
  40633a:	f7ff fe49 	bl	405fd0 <memmove>
  40633e:	e70b      	b.n	406158 <_realloc_r+0xc0>
  406340:	68ab      	ldr	r3, [r5, #8]
  406342:	6083      	str	r3, [r0, #8]
  406344:	68eb      	ldr	r3, [r5, #12]
  406346:	60c3      	str	r3, [r0, #12]
  406348:	2a24      	cmp	r2, #36	; 0x24
  40634a:	d017      	beq.n	40637c <_realloc_r+0x2e4>
  40634c:	f100 0310 	add.w	r3, r0, #16
  406350:	f105 0210 	add.w	r2, r5, #16
  406354:	e6e7      	b.n	406126 <_realloc_r+0x8e>
  406356:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40635a:	f023 0303 	bic.w	r3, r3, #3
  40635e:	441c      	add	r4, r3
  406360:	462e      	mov	r6, r5
  406362:	e6f9      	b.n	406158 <_realloc_r+0xc0>
  406364:	68a9      	ldr	r1, [r5, #8]
  406366:	f8ca 1010 	str.w	r1, [sl, #16]
  40636a:	68e9      	ldr	r1, [r5, #12]
  40636c:	f8ca 1014 	str.w	r1, [sl, #20]
  406370:	2a24      	cmp	r2, #36	; 0x24
  406372:	d00c      	beq.n	40638e <_realloc_r+0x2f6>
  406374:	3510      	adds	r5, #16
  406376:	f10a 0218 	add.w	r2, sl, #24
  40637a:	e7b9      	b.n	4062f0 <_realloc_r+0x258>
  40637c:	692b      	ldr	r3, [r5, #16]
  40637e:	6103      	str	r3, [r0, #16]
  406380:	696b      	ldr	r3, [r5, #20]
  406382:	6143      	str	r3, [r0, #20]
  406384:	f105 0218 	add.w	r2, r5, #24
  406388:	f100 0318 	add.w	r3, r0, #24
  40638c:	e6cb      	b.n	406126 <_realloc_r+0x8e>
  40638e:	692a      	ldr	r2, [r5, #16]
  406390:	f8ca 2018 	str.w	r2, [sl, #24]
  406394:	696a      	ldr	r2, [r5, #20]
  406396:	f8ca 201c 	str.w	r2, [sl, #28]
  40639a:	3518      	adds	r5, #24
  40639c:	f10a 0220 	add.w	r2, sl, #32
  4063a0:	e7a6      	b.n	4062f0 <_realloc_r+0x258>
  4063a2:	4632      	mov	r2, r6
  4063a4:	e77f      	b.n	4062a6 <_realloc_r+0x20e>
  4063a6:	4629      	mov	r1, r5
  4063a8:	4630      	mov	r0, r6
  4063aa:	9301      	str	r3, [sp, #4]
  4063ac:	f7ff fe10 	bl	405fd0 <memmove>
  4063b0:	9b01      	ldr	r3, [sp, #4]
  4063b2:	e77e      	b.n	4062b2 <_realloc_r+0x21a>
  4063b4:	68a9      	ldr	r1, [r5, #8]
  4063b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4063ba:	68e9      	ldr	r1, [r5, #12]
  4063bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4063c0:	2a24      	cmp	r2, #36	; 0x24
  4063c2:	d003      	beq.n	4063cc <_realloc_r+0x334>
  4063c4:	3510      	adds	r5, #16
  4063c6:	f10a 0218 	add.w	r2, sl, #24
  4063ca:	e76c      	b.n	4062a6 <_realloc_r+0x20e>
  4063cc:	692a      	ldr	r2, [r5, #16]
  4063ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4063d2:	696a      	ldr	r2, [r5, #20]
  4063d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4063d8:	3518      	adds	r5, #24
  4063da:	f10a 0220 	add.w	r2, sl, #32
  4063de:	e762      	b.n	4062a6 <_realloc_r+0x20e>
  4063e0:	20400450 	.word	0x20400450

004063e4 <__sread>:
  4063e4:	b510      	push	{r4, lr}
  4063e6:	460c      	mov	r4, r1
  4063e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4063ec:	f000 f9f6 	bl	4067dc <_read_r>
  4063f0:	2800      	cmp	r0, #0
  4063f2:	db03      	blt.n	4063fc <__sread+0x18>
  4063f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4063f6:	4403      	add	r3, r0
  4063f8:	6523      	str	r3, [r4, #80]	; 0x50
  4063fa:	bd10      	pop	{r4, pc}
  4063fc:	89a3      	ldrh	r3, [r4, #12]
  4063fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406402:	81a3      	strh	r3, [r4, #12]
  406404:	bd10      	pop	{r4, pc}
  406406:	bf00      	nop

00406408 <__swrite>:
  406408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40640c:	4616      	mov	r6, r2
  40640e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406412:	461f      	mov	r7, r3
  406414:	05d3      	lsls	r3, r2, #23
  406416:	460c      	mov	r4, r1
  406418:	4605      	mov	r5, r0
  40641a:	d507      	bpl.n	40642c <__swrite+0x24>
  40641c:	2200      	movs	r2, #0
  40641e:	2302      	movs	r3, #2
  406420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406424:	f000 f9c4 	bl	4067b0 <_lseek_r>
  406428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40642c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406430:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406434:	81a2      	strh	r2, [r4, #12]
  406436:	463b      	mov	r3, r7
  406438:	4632      	mov	r2, r6
  40643a:	4628      	mov	r0, r5
  40643c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406440:	f000 b8a4 	b.w	40658c <_write_r>

00406444 <__sseek>:
  406444:	b510      	push	{r4, lr}
  406446:	460c      	mov	r4, r1
  406448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40644c:	f000 f9b0 	bl	4067b0 <_lseek_r>
  406450:	89a3      	ldrh	r3, [r4, #12]
  406452:	1c42      	adds	r2, r0, #1
  406454:	bf0e      	itee	eq
  406456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40645a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40645e:	6520      	strne	r0, [r4, #80]	; 0x50
  406460:	81a3      	strh	r3, [r4, #12]
  406462:	bd10      	pop	{r4, pc}

00406464 <__sclose>:
  406464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406468:	f000 b908 	b.w	40667c <_close_r>

0040646c <__swbuf_r>:
  40646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40646e:	460d      	mov	r5, r1
  406470:	4614      	mov	r4, r2
  406472:	4606      	mov	r6, r0
  406474:	b110      	cbz	r0, 40647c <__swbuf_r+0x10>
  406476:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406478:	2b00      	cmp	r3, #0
  40647a:	d04b      	beq.n	406514 <__swbuf_r+0xa8>
  40647c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406480:	69a3      	ldr	r3, [r4, #24]
  406482:	60a3      	str	r3, [r4, #8]
  406484:	b291      	uxth	r1, r2
  406486:	0708      	lsls	r0, r1, #28
  406488:	d539      	bpl.n	4064fe <__swbuf_r+0x92>
  40648a:	6923      	ldr	r3, [r4, #16]
  40648c:	2b00      	cmp	r3, #0
  40648e:	d036      	beq.n	4064fe <__swbuf_r+0x92>
  406490:	b2ed      	uxtb	r5, r5
  406492:	0489      	lsls	r1, r1, #18
  406494:	462f      	mov	r7, r5
  406496:	d515      	bpl.n	4064c4 <__swbuf_r+0x58>
  406498:	6822      	ldr	r2, [r4, #0]
  40649a:	6961      	ldr	r1, [r4, #20]
  40649c:	1ad3      	subs	r3, r2, r3
  40649e:	428b      	cmp	r3, r1
  4064a0:	da1c      	bge.n	4064dc <__swbuf_r+0x70>
  4064a2:	3301      	adds	r3, #1
  4064a4:	68a1      	ldr	r1, [r4, #8]
  4064a6:	1c50      	adds	r0, r2, #1
  4064a8:	3901      	subs	r1, #1
  4064aa:	60a1      	str	r1, [r4, #8]
  4064ac:	6020      	str	r0, [r4, #0]
  4064ae:	7015      	strb	r5, [r2, #0]
  4064b0:	6962      	ldr	r2, [r4, #20]
  4064b2:	429a      	cmp	r2, r3
  4064b4:	d01a      	beq.n	4064ec <__swbuf_r+0x80>
  4064b6:	89a3      	ldrh	r3, [r4, #12]
  4064b8:	07db      	lsls	r3, r3, #31
  4064ba:	d501      	bpl.n	4064c0 <__swbuf_r+0x54>
  4064bc:	2d0a      	cmp	r5, #10
  4064be:	d015      	beq.n	4064ec <__swbuf_r+0x80>
  4064c0:	4638      	mov	r0, r7
  4064c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4064c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4064c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4064ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4064ce:	81a2      	strh	r2, [r4, #12]
  4064d0:	6822      	ldr	r2, [r4, #0]
  4064d2:	6661      	str	r1, [r4, #100]	; 0x64
  4064d4:	6961      	ldr	r1, [r4, #20]
  4064d6:	1ad3      	subs	r3, r2, r3
  4064d8:	428b      	cmp	r3, r1
  4064da:	dbe2      	blt.n	4064a2 <__swbuf_r+0x36>
  4064dc:	4621      	mov	r1, r4
  4064de:	4630      	mov	r0, r6
  4064e0:	f7ff f87a 	bl	4055d8 <_fflush_r>
  4064e4:	b940      	cbnz	r0, 4064f8 <__swbuf_r+0x8c>
  4064e6:	6822      	ldr	r2, [r4, #0]
  4064e8:	2301      	movs	r3, #1
  4064ea:	e7db      	b.n	4064a4 <__swbuf_r+0x38>
  4064ec:	4621      	mov	r1, r4
  4064ee:	4630      	mov	r0, r6
  4064f0:	f7ff f872 	bl	4055d8 <_fflush_r>
  4064f4:	2800      	cmp	r0, #0
  4064f6:	d0e3      	beq.n	4064c0 <__swbuf_r+0x54>
  4064f8:	f04f 37ff 	mov.w	r7, #4294967295
  4064fc:	e7e0      	b.n	4064c0 <__swbuf_r+0x54>
  4064fe:	4621      	mov	r1, r4
  406500:	4630      	mov	r0, r6
  406502:	f7fe ff55 	bl	4053b0 <__swsetup_r>
  406506:	2800      	cmp	r0, #0
  406508:	d1f6      	bne.n	4064f8 <__swbuf_r+0x8c>
  40650a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40650e:	6923      	ldr	r3, [r4, #16]
  406510:	b291      	uxth	r1, r2
  406512:	e7bd      	b.n	406490 <__swbuf_r+0x24>
  406514:	f7ff f8b8 	bl	405688 <__sinit>
  406518:	e7b0      	b.n	40647c <__swbuf_r+0x10>
  40651a:	bf00      	nop

0040651c <_wcrtomb_r>:
  40651c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40651e:	4606      	mov	r6, r0
  406520:	b085      	sub	sp, #20
  406522:	461f      	mov	r7, r3
  406524:	b189      	cbz	r1, 40654a <_wcrtomb_r+0x2e>
  406526:	4c10      	ldr	r4, [pc, #64]	; (406568 <_wcrtomb_r+0x4c>)
  406528:	4d10      	ldr	r5, [pc, #64]	; (40656c <_wcrtomb_r+0x50>)
  40652a:	6824      	ldr	r4, [r4, #0]
  40652c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40652e:	2c00      	cmp	r4, #0
  406530:	bf08      	it	eq
  406532:	462c      	moveq	r4, r5
  406534:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406538:	47a0      	blx	r4
  40653a:	1c43      	adds	r3, r0, #1
  40653c:	d103      	bne.n	406546 <_wcrtomb_r+0x2a>
  40653e:	2200      	movs	r2, #0
  406540:	238a      	movs	r3, #138	; 0x8a
  406542:	603a      	str	r2, [r7, #0]
  406544:	6033      	str	r3, [r6, #0]
  406546:	b005      	add	sp, #20
  406548:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40654a:	460c      	mov	r4, r1
  40654c:	4906      	ldr	r1, [pc, #24]	; (406568 <_wcrtomb_r+0x4c>)
  40654e:	4a07      	ldr	r2, [pc, #28]	; (40656c <_wcrtomb_r+0x50>)
  406550:	6809      	ldr	r1, [r1, #0]
  406552:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406554:	2900      	cmp	r1, #0
  406556:	bf08      	it	eq
  406558:	4611      	moveq	r1, r2
  40655a:	4622      	mov	r2, r4
  40655c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406560:	a901      	add	r1, sp, #4
  406562:	47a0      	blx	r4
  406564:	e7e9      	b.n	40653a <_wcrtomb_r+0x1e>
  406566:	bf00      	nop
  406568:	20400024 	.word	0x20400024
  40656c:	20400864 	.word	0x20400864

00406570 <__ascii_wctomb>:
  406570:	b121      	cbz	r1, 40657c <__ascii_wctomb+0xc>
  406572:	2aff      	cmp	r2, #255	; 0xff
  406574:	d804      	bhi.n	406580 <__ascii_wctomb+0x10>
  406576:	700a      	strb	r2, [r1, #0]
  406578:	2001      	movs	r0, #1
  40657a:	4770      	bx	lr
  40657c:	4608      	mov	r0, r1
  40657e:	4770      	bx	lr
  406580:	238a      	movs	r3, #138	; 0x8a
  406582:	6003      	str	r3, [r0, #0]
  406584:	f04f 30ff 	mov.w	r0, #4294967295
  406588:	4770      	bx	lr
  40658a:	bf00      	nop

0040658c <_write_r>:
  40658c:	b570      	push	{r4, r5, r6, lr}
  40658e:	460d      	mov	r5, r1
  406590:	4c08      	ldr	r4, [pc, #32]	; (4065b4 <_write_r+0x28>)
  406592:	4611      	mov	r1, r2
  406594:	4606      	mov	r6, r0
  406596:	461a      	mov	r2, r3
  406598:	4628      	mov	r0, r5
  40659a:	2300      	movs	r3, #0
  40659c:	6023      	str	r3, [r4, #0]
  40659e:	f7fa fa25 	bl	4009ec <_write>
  4065a2:	1c43      	adds	r3, r0, #1
  4065a4:	d000      	beq.n	4065a8 <_write_r+0x1c>
  4065a6:	bd70      	pop	{r4, r5, r6, pc}
  4065a8:	6823      	ldr	r3, [r4, #0]
  4065aa:	2b00      	cmp	r3, #0
  4065ac:	d0fb      	beq.n	4065a6 <_write_r+0x1a>
  4065ae:	6033      	str	r3, [r6, #0]
  4065b0:	bd70      	pop	{r4, r5, r6, pc}
  4065b2:	bf00      	nop
  4065b4:	20400e54 	.word	0x20400e54

004065b8 <__register_exitproc>:
  4065b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4065bc:	4d2c      	ldr	r5, [pc, #176]	; (406670 <__register_exitproc+0xb8>)
  4065be:	4606      	mov	r6, r0
  4065c0:	6828      	ldr	r0, [r5, #0]
  4065c2:	4698      	mov	r8, r3
  4065c4:	460f      	mov	r7, r1
  4065c6:	4691      	mov	r9, r2
  4065c8:	f7ff fc1e 	bl	405e08 <__retarget_lock_acquire_recursive>
  4065cc:	4b29      	ldr	r3, [pc, #164]	; (406674 <__register_exitproc+0xbc>)
  4065ce:	681c      	ldr	r4, [r3, #0]
  4065d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4065d4:	2b00      	cmp	r3, #0
  4065d6:	d03e      	beq.n	406656 <__register_exitproc+0x9e>
  4065d8:	685a      	ldr	r2, [r3, #4]
  4065da:	2a1f      	cmp	r2, #31
  4065dc:	dc1c      	bgt.n	406618 <__register_exitproc+0x60>
  4065de:	f102 0e01 	add.w	lr, r2, #1
  4065e2:	b176      	cbz	r6, 406602 <__register_exitproc+0x4a>
  4065e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4065e8:	2401      	movs	r4, #1
  4065ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4065ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4065f2:	4094      	lsls	r4, r2
  4065f4:	4320      	orrs	r0, r4
  4065f6:	2e02      	cmp	r6, #2
  4065f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4065fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406600:	d023      	beq.n	40664a <__register_exitproc+0x92>
  406602:	3202      	adds	r2, #2
  406604:	f8c3 e004 	str.w	lr, [r3, #4]
  406608:	6828      	ldr	r0, [r5, #0]
  40660a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40660e:	f7ff fbfd 	bl	405e0c <__retarget_lock_release_recursive>
  406612:	2000      	movs	r0, #0
  406614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406618:	4b17      	ldr	r3, [pc, #92]	; (406678 <__register_exitproc+0xc0>)
  40661a:	b30b      	cbz	r3, 406660 <__register_exitproc+0xa8>
  40661c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406620:	f7fd faca 	bl	403bb8 <malloc>
  406624:	4603      	mov	r3, r0
  406626:	b1d8      	cbz	r0, 406660 <__register_exitproc+0xa8>
  406628:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40662c:	6002      	str	r2, [r0, #0]
  40662e:	2100      	movs	r1, #0
  406630:	6041      	str	r1, [r0, #4]
  406632:	460a      	mov	r2, r1
  406634:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406638:	f04f 0e01 	mov.w	lr, #1
  40663c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406640:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406644:	2e00      	cmp	r6, #0
  406646:	d0dc      	beq.n	406602 <__register_exitproc+0x4a>
  406648:	e7cc      	b.n	4065e4 <__register_exitproc+0x2c>
  40664a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40664e:	430c      	orrs	r4, r1
  406650:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406654:	e7d5      	b.n	406602 <__register_exitproc+0x4a>
  406656:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40665a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40665e:	e7bb      	b.n	4065d8 <__register_exitproc+0x20>
  406660:	6828      	ldr	r0, [r5, #0]
  406662:	f7ff fbd3 	bl	405e0c <__retarget_lock_release_recursive>
  406666:	f04f 30ff 	mov.w	r0, #4294967295
  40666a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40666e:	bf00      	nop
  406670:	20400860 	.word	0x20400860
  406674:	00406b50 	.word	0x00406b50
  406678:	00403bb9 	.word	0x00403bb9

0040667c <_close_r>:
  40667c:	b538      	push	{r3, r4, r5, lr}
  40667e:	4c07      	ldr	r4, [pc, #28]	; (40669c <_close_r+0x20>)
  406680:	2300      	movs	r3, #0
  406682:	4605      	mov	r5, r0
  406684:	4608      	mov	r0, r1
  406686:	6023      	str	r3, [r4, #0]
  406688:	f7fa fed0 	bl	40142c <_close>
  40668c:	1c43      	adds	r3, r0, #1
  40668e:	d000      	beq.n	406692 <_close_r+0x16>
  406690:	bd38      	pop	{r3, r4, r5, pc}
  406692:	6823      	ldr	r3, [r4, #0]
  406694:	2b00      	cmp	r3, #0
  406696:	d0fb      	beq.n	406690 <_close_r+0x14>
  406698:	602b      	str	r3, [r5, #0]
  40669a:	bd38      	pop	{r3, r4, r5, pc}
  40669c:	20400e54 	.word	0x20400e54

004066a0 <_fclose_r>:
  4066a0:	b570      	push	{r4, r5, r6, lr}
  4066a2:	b159      	cbz	r1, 4066bc <_fclose_r+0x1c>
  4066a4:	4605      	mov	r5, r0
  4066a6:	460c      	mov	r4, r1
  4066a8:	b110      	cbz	r0, 4066b0 <_fclose_r+0x10>
  4066aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4066ac:	2b00      	cmp	r3, #0
  4066ae:	d03c      	beq.n	40672a <_fclose_r+0x8a>
  4066b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4066b2:	07d8      	lsls	r0, r3, #31
  4066b4:	d505      	bpl.n	4066c2 <_fclose_r+0x22>
  4066b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4066ba:	b92b      	cbnz	r3, 4066c8 <_fclose_r+0x28>
  4066bc:	2600      	movs	r6, #0
  4066be:	4630      	mov	r0, r6
  4066c0:	bd70      	pop	{r4, r5, r6, pc}
  4066c2:	89a3      	ldrh	r3, [r4, #12]
  4066c4:	0599      	lsls	r1, r3, #22
  4066c6:	d53c      	bpl.n	406742 <_fclose_r+0xa2>
  4066c8:	4621      	mov	r1, r4
  4066ca:	4628      	mov	r0, r5
  4066cc:	f7fe fee4 	bl	405498 <__sflush_r>
  4066d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4066d2:	4606      	mov	r6, r0
  4066d4:	b133      	cbz	r3, 4066e4 <_fclose_r+0x44>
  4066d6:	69e1      	ldr	r1, [r4, #28]
  4066d8:	4628      	mov	r0, r5
  4066da:	4798      	blx	r3
  4066dc:	2800      	cmp	r0, #0
  4066de:	bfb8      	it	lt
  4066e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4066e4:	89a3      	ldrh	r3, [r4, #12]
  4066e6:	061a      	lsls	r2, r3, #24
  4066e8:	d422      	bmi.n	406730 <_fclose_r+0x90>
  4066ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4066ec:	b141      	cbz	r1, 406700 <_fclose_r+0x60>
  4066ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4066f2:	4299      	cmp	r1, r3
  4066f4:	d002      	beq.n	4066fc <_fclose_r+0x5c>
  4066f6:	4628      	mov	r0, r5
  4066f8:	f7ff f8ec 	bl	4058d4 <_free_r>
  4066fc:	2300      	movs	r3, #0
  4066fe:	6323      	str	r3, [r4, #48]	; 0x30
  406700:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406702:	b121      	cbz	r1, 40670e <_fclose_r+0x6e>
  406704:	4628      	mov	r0, r5
  406706:	f7ff f8e5 	bl	4058d4 <_free_r>
  40670a:	2300      	movs	r3, #0
  40670c:	6463      	str	r3, [r4, #68]	; 0x44
  40670e:	f7fe ffe7 	bl	4056e0 <__sfp_lock_acquire>
  406712:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406714:	2200      	movs	r2, #0
  406716:	07db      	lsls	r3, r3, #31
  406718:	81a2      	strh	r2, [r4, #12]
  40671a:	d50e      	bpl.n	40673a <_fclose_r+0x9a>
  40671c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40671e:	f7ff fb71 	bl	405e04 <__retarget_lock_close_recursive>
  406722:	f7fe ffe3 	bl	4056ec <__sfp_lock_release>
  406726:	4630      	mov	r0, r6
  406728:	bd70      	pop	{r4, r5, r6, pc}
  40672a:	f7fe ffad 	bl	405688 <__sinit>
  40672e:	e7bf      	b.n	4066b0 <_fclose_r+0x10>
  406730:	6921      	ldr	r1, [r4, #16]
  406732:	4628      	mov	r0, r5
  406734:	f7ff f8ce 	bl	4058d4 <_free_r>
  406738:	e7d7      	b.n	4066ea <_fclose_r+0x4a>
  40673a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40673c:	f7ff fb66 	bl	405e0c <__retarget_lock_release_recursive>
  406740:	e7ec      	b.n	40671c <_fclose_r+0x7c>
  406742:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406744:	f7ff fb60 	bl	405e08 <__retarget_lock_acquire_recursive>
  406748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40674c:	2b00      	cmp	r3, #0
  40674e:	d1bb      	bne.n	4066c8 <_fclose_r+0x28>
  406750:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406752:	f016 0601 	ands.w	r6, r6, #1
  406756:	d1b1      	bne.n	4066bc <_fclose_r+0x1c>
  406758:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40675a:	f7ff fb57 	bl	405e0c <__retarget_lock_release_recursive>
  40675e:	4630      	mov	r0, r6
  406760:	bd70      	pop	{r4, r5, r6, pc}
  406762:	bf00      	nop

00406764 <_fstat_r>:
  406764:	b538      	push	{r3, r4, r5, lr}
  406766:	460b      	mov	r3, r1
  406768:	4c07      	ldr	r4, [pc, #28]	; (406788 <_fstat_r+0x24>)
  40676a:	4605      	mov	r5, r0
  40676c:	4611      	mov	r1, r2
  40676e:	4618      	mov	r0, r3
  406770:	2300      	movs	r3, #0
  406772:	6023      	str	r3, [r4, #0]
  406774:	f7fa fe5d 	bl	401432 <_fstat>
  406778:	1c43      	adds	r3, r0, #1
  40677a:	d000      	beq.n	40677e <_fstat_r+0x1a>
  40677c:	bd38      	pop	{r3, r4, r5, pc}
  40677e:	6823      	ldr	r3, [r4, #0]
  406780:	2b00      	cmp	r3, #0
  406782:	d0fb      	beq.n	40677c <_fstat_r+0x18>
  406784:	602b      	str	r3, [r5, #0]
  406786:	bd38      	pop	{r3, r4, r5, pc}
  406788:	20400e54 	.word	0x20400e54

0040678c <_isatty_r>:
  40678c:	b538      	push	{r3, r4, r5, lr}
  40678e:	4c07      	ldr	r4, [pc, #28]	; (4067ac <_isatty_r+0x20>)
  406790:	2300      	movs	r3, #0
  406792:	4605      	mov	r5, r0
  406794:	4608      	mov	r0, r1
  406796:	6023      	str	r3, [r4, #0]
  406798:	f7fa fe50 	bl	40143c <_isatty>
  40679c:	1c43      	adds	r3, r0, #1
  40679e:	d000      	beq.n	4067a2 <_isatty_r+0x16>
  4067a0:	bd38      	pop	{r3, r4, r5, pc}
  4067a2:	6823      	ldr	r3, [r4, #0]
  4067a4:	2b00      	cmp	r3, #0
  4067a6:	d0fb      	beq.n	4067a0 <_isatty_r+0x14>
  4067a8:	602b      	str	r3, [r5, #0]
  4067aa:	bd38      	pop	{r3, r4, r5, pc}
  4067ac:	20400e54 	.word	0x20400e54

004067b0 <_lseek_r>:
  4067b0:	b570      	push	{r4, r5, r6, lr}
  4067b2:	460d      	mov	r5, r1
  4067b4:	4c08      	ldr	r4, [pc, #32]	; (4067d8 <_lseek_r+0x28>)
  4067b6:	4611      	mov	r1, r2
  4067b8:	4606      	mov	r6, r0
  4067ba:	461a      	mov	r2, r3
  4067bc:	4628      	mov	r0, r5
  4067be:	2300      	movs	r3, #0
  4067c0:	6023      	str	r3, [r4, #0]
  4067c2:	f7fa fe3d 	bl	401440 <_lseek>
  4067c6:	1c43      	adds	r3, r0, #1
  4067c8:	d000      	beq.n	4067cc <_lseek_r+0x1c>
  4067ca:	bd70      	pop	{r4, r5, r6, pc}
  4067cc:	6823      	ldr	r3, [r4, #0]
  4067ce:	2b00      	cmp	r3, #0
  4067d0:	d0fb      	beq.n	4067ca <_lseek_r+0x1a>
  4067d2:	6033      	str	r3, [r6, #0]
  4067d4:	bd70      	pop	{r4, r5, r6, pc}
  4067d6:	bf00      	nop
  4067d8:	20400e54 	.word	0x20400e54

004067dc <_read_r>:
  4067dc:	b570      	push	{r4, r5, r6, lr}
  4067de:	460d      	mov	r5, r1
  4067e0:	4c08      	ldr	r4, [pc, #32]	; (406804 <_read_r+0x28>)
  4067e2:	4611      	mov	r1, r2
  4067e4:	4606      	mov	r6, r0
  4067e6:	461a      	mov	r2, r3
  4067e8:	4628      	mov	r0, r5
  4067ea:	2300      	movs	r3, #0
  4067ec:	6023      	str	r3, [r4, #0]
  4067ee:	f7fa f8df 	bl	4009b0 <_read>
  4067f2:	1c43      	adds	r3, r0, #1
  4067f4:	d000      	beq.n	4067f8 <_read_r+0x1c>
  4067f6:	bd70      	pop	{r4, r5, r6, pc}
  4067f8:	6823      	ldr	r3, [r4, #0]
  4067fa:	2b00      	cmp	r3, #0
  4067fc:	d0fb      	beq.n	4067f6 <_read_r+0x1a>
  4067fe:	6033      	str	r3, [r6, #0]
  406800:	bd70      	pop	{r4, r5, r6, pc}
  406802:	bf00      	nop
  406804:	20400e54 	.word	0x20400e54

00406808 <sysfont_glyphs>:
  406808:	00000000 20000000 20202020 50502000     .......     . PP
  406818:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
  406828:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
  406838:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
  406848:	10101020 50004020 5020f820 20200000      ... @.P . P..  
  406858:	002020f8 00000000 00402060 00f80000     .  .....` @.....
  406868:	00000000 60000000 10080060 00804020     .......``... @..
  406878:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
  406888:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
  406898:	f81010f8 0808f080 40307088 8888f080     .........p0@....
  4068a8:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
  4068b8:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
  4068c8:	40206000 40201008 00081020 f800f800     .` @.. @ .......
  4068d8:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
  4068e8:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
  4068f8:	8888f088 808870f0 70888080 888890e0     .....p.....p....
  406908:	f8e09088 80f08080 80f8f880 8080e080     ................
  406918:	80887080 70889880 f8888888 70888888     .p.....p.......p
  406928:	20202020 10387020 90101010 a0908860          p8.....`...
  406938:	8890a0c0 80808080 88f88080 8888a8d8     ................
  406948:	88888888 8898a8c8 88887088 70888888     .........p.....p
  406958:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
  406968:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
  406978:	88202020 88888888 88887088 50888888        ......p.....P
  406988:	88888820 88d8a8a8 20508888 88888850      .........P P...
  406998:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
  4069a8:	38202020 20408000 e0000810 20202020        8..@ ....    
  4069b8:	5020e020 00000088 00000000 f8000000      . P............
  4069c8:	00102040 00000000 78087000 80807888     @ .......p.x.x..
  4069d8:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
  4069e8:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
  4069f8:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
  406a08:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
  406a18:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
  406a28:	00008888 8888c8b0 70000088 70888888     ...........p...p
  406a38:	88f00000 008080f0 78986800 00000808     .........h.x....
  406a48:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
  406a58:	00304840 88888800 00006898 50888888     @H0......h.....P
  406a68:	88000020 50a8a888 50880000 00885020      ......P...P P..
  406a78:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
  406a88:	10202040 20202020 40202020 20102020     @  .       @  . 
  406a98:	00004020 454c4449 00000000 51726d54      @..IDLE....TmrQ
  406aa8:	00000000 20726d54 00637653 656d6167     ....Tmr Svc.game
  406ab8:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  406ac8:	65746165 6d616720 61742065 0a0d6b73     eate game task..
  406ad8:	00000000 686c6166 6d652061 69726320     ....falha em cri
  406ae8:	61207261 65757120 52206575 0a204247     ar a queue RGB .
  406af8:	00000000 6576654c 30203a6c 00000000     ....Level: 0....
  406b08:	206d754e 0a206425 00000000 20716553     Num %d .....Seq 
  406b18:	0a206425 00000000 20202020 20202020     %d .....        
  406b28:	20202020 00000020 4f525245 00000055          ...ERROU...
  406b38:	63617473 766f206b 6c667265 2520776f     stack overflow %
  406b48:	73252078 00000a0d                       x %s....

00406b50 <_global_impure_ptr>:
  406b50:	20400028 33323130 37363534 42413938     (.@ 0123456789AB
  406b60:	46454443 00000000 33323130 37363534     CDEF....01234567
  406b70:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  406b80:	0000296c                                l)..

00406b84 <blanks.7217>:
  406b84:	20202020 20202020 20202020 20202020                     

00406b94 <zeroes.7218>:
  406b94:	30303030 30303030 30303030 30303030     0000000000000000
  406ba4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00406bb4 <_ctype_>:
  406bb4:	20202000 20202020 28282020 20282828     .         ((((( 
  406bc4:	20202020 20202020 20202020 20202020                     
  406bd4:	10108820 10101010 10101010 10101010      ...............
  406be4:	04040410 04040404 10040404 10101010     ................
  406bf4:	41411010 41414141 01010101 01010101     ..AAAAAA........
  406c04:	01010101 01010101 01010101 10101010     ................
  406c14:	42421010 42424242 02020202 02020202     ..BBBBBB........
  406c24:	02020202 02020202 02020202 10101010     ................
  406c34:	00000020 00000000 00000000 00000000      ...............
	...

00406cb8 <_init>:
  406cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406cba:	bf00      	nop
  406cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406cbe:	bc08      	pop	{r3}
  406cc0:	469e      	mov	lr, r3
  406cc2:	4770      	bx	lr

00406cc4 <__init_array_start>:
  406cc4:	00405479 	.word	0x00405479

00406cc8 <__frame_dummy_init_array_entry>:
  406cc8:	00400165                                e.@.

00406ccc <_fini>:
  406ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406cce:	bf00      	nop
  406cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406cd2:	bc08      	pop	{r3}
  406cd4:	469e      	mov	lr, r3
  406cd6:	4770      	bx	lr

00406cd8 <__fini_array_start>:
  406cd8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 6808 0040 0706 7d20               .....h@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__malloc_av_>:
	...
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <__malloc_trim_threshold>:
2040085c:	0000 0002                                   ....

20400860 <__atexit_recursive_mutex>:
20400860:	0e30 2040                                   0.@ 

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	6571 0040 5f01 0040 0000 0000 6bb4 0040     qe@.._@......k@.
20400954:	6bb0 0040 6ad8 0040 6ad8 0040 6ad8 0040     .k@..j@..j@..j@.
20400964:	6ad8 0040 6ad8 0040 6ad8 0040 6ad8 0040     .j@..j@..j@..j@.
20400974:	6ad8 0040 6ad8 0040 ffff ffff ffff ffff     .j@..j@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
